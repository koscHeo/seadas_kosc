!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	airmass_avhrr.f	/^1       CONTINUE$/;"	l	subroutine:AIRMASS_AVHRR	file:
1	atmcor_soa.f	/^    1 RESTART = RESTART+1$/;"	l	subroutine:ZXMWD	file:
1	atmcor_soa.f	/^ 1        FORMAT( a3,x,a6,5(x,a13) )$/;"	l	subroutine:ATMCOR_SOA	file:
1	atrem_app_refl_plus_gas_removal_l2.f90	/^1       jhi=jlo+inc$/;"	l	subroutine:hunt	file:
1	atrem_app_refl_plus_gas_removal_l2.f90	/^1     if (khi-klo.gt.1) then$/;"	l	subroutine:splint	file:
1	dtran_brdf.f	/^1     format(a)$/;"	l	subroutine:Morel_BRDF	file:
10	atmcor_soa.f	/^   10             IF (XII.GE.XD(IMD)) THEN$/;"	l	subroutine:DRGLCTN	file:
10	atmcor_soa.f	/^   10         CONTINUE$/;"	l	subroutine:DRGPD3P	file:
10	atmcor_soa.f	/^   10       continue$/;"	l	subroutine:dpofa	file:
10	atmcor_soa.f	/^   10       continue$/;"	l	subroutine:hpsolb	file:
10	atmcor_soa.f	/^   10    CONTINUE$/;"	l	subroutine:ZXMWE	file:
10	atmcor_soa.f	/^   10    continue$/;"	l	subroutine:dtrsl	file:
10	atmcor_soa.f	/^   10 CONTINUE$/;"	l	subroutine:DRGPLNL	file:
10	atmcor_soa.f	/^   10 CONTINUE$/;"	l	subroutine:ZXMJN	file:
10	atmcor_soa.f	/^   10 CONTINUE$/;"	l	subroutine:ZXMWD	file:
10	atmcor_soa.f	/^   10 L1 = L1-1$/;"	l	subroutine:ZSRCH	file:
10	atmcor_soa.f	/^   10 continue$/;"	l	function:ddot	file:
10	atmcor_soa.f	/^   10 continue$/;"	l	function:dpmeps	file:
10	atmcor_soa.f	/^   10 continue$/;"	l	subroutine:daxpy	file:
10	atmcor_soa.f	/^   10 continue$/;"	l	subroutine:dcopy	file:
10	atmcor_soa.f	/^   10 continue$/;"	l	subroutine:dscal	file:
10	atmcor_soa.f	/^  10        continue$/;"	l	subroutine:formk	file:
10	atmcor_soa.f	/^  10     continue$/;"	l	subroutine:bmv	file:
10	atmcor_soa.f	/^  10     continue$/;"	l	subroutine:subsm	file:
10	atmcor_soa.f	/^  10  continue$/;"	l	subroutine:active	file:
10	atmcor_soa.f	/^  10  continue$/;"	l	subroutine:errclb	file:
10	atmcor_soa.f	/^10         continue$/;"	l	subroutine:FUNCT_A_B_C_D_FOURIER_INTERPOLATE	file:
10	atmcor_soa.f	/^10      FORMAT($/;"	l	subroutine:READ_MODEL_DATA	file:
10	atmcor_soa.f	/^10    CONTINUE                     ! GOTO here if Exp crashes$/;"	l	subroutine:QUADINTRP	file:
10	atrem_app_refl_plus_gas_removal_l2.f90	/^10    if(ju-jl.gt.1)then$/;"	l	subroutine:locate	file:
10	dtran_brdf.f	/^10    CONTINUE   ! USE ISUN and ISUN -1$/;"	l	subroutine:Morel_BRDF	file:
10	dtran_brdf.f	/^10    CONTINUE   ! USE IVIEW and IVIEW -1$/;"	l	subroutine:diff_tran_corr	file:
10	raygetpol.f	/^10     format(\/\/(1x,5f13.0))$/;"	l	subroutine:rayget	file:
100	atmcor_soa.f	/^  100       continue$/;"	l	subroutine:dtrsl	file:
100	atmcor_soa.f	/^  100   CONTINUE$/;"	l	subroutine:ZXMJN	file:
100	atmcor_soa.f	/^  100 LINK = 1$/;"	l	subroutine:ZXMWE	file:
100	atmcor_soa.f	/^ 100  CONTINUE$/;"	l	subroutine:DRV_SPECOPT_LBFGSB	file:
100	atmcor_soa.f	/^ 100  FORMAT ('itn  f  x(5)  g(5)  ifn  f_lambda(6)  w0')$/;"	l	subroutine:ZXMWH_INI	file:
100	atmcor_soa.f	/^100         continue$/;"	l	subroutine:FUNCT_A_B_C_D_FOURIER_INTERPOLATE	file:
1000	atmcor_soa.f	/^ 1000 continue$/;"	l	subroutine:dcsrch	file:
1000	atmcor_soa.f	/^ 1000 continue$/;"	l	subroutine:mainlb	file:
1001	atmcor_soa.f	/^ 1001 format (\/,'----------------SUBSM entered-----------------',\/)$/;"	l	subroutine:subsm	file:
1001	atmcor_soa.f	/^ 1001 format (\/,'At X0 ',i9,' variables are exactly at the bounds') $/;"	l	subroutine:active	file:
1001	atmcor_soa.f	/^ 1001 format (\/\/,'ITERATION ',i5)$/;"	l	subroutine:mainlb	file:
1002	atmcor_soa.f	/^ 1002 format ( 'ALPHA = ',f7.5,' backtrack to the BOX') $/;"	l	subroutine:subsm	file:
1002	atmcor_soa.f	/^ 1002 format$/;"	l	subroutine:mainlb	file:
1003	atmcor_soa.f	/^ 1003 format ('Subspace solution X =  ',\/,(4x,1p,6(1x,d11.4)))$/;"	l	subroutine:subsm	file:
1003	atmcor_soa.f	/^ 1003 format (2(1x,i4),5x,'-',5x,'-',3x,'-',5x,'-',5x,'-',8x,'-',3x,$/;"	l	subroutine:mainlb	file:
1004	atmcor_soa.f	/^ 1004 format ('  ys=',1p,e10.3,'  -gs=',1p,e10.3,' BFGS update SKIPPED')$/;"	l	subroutine:mainlb	file:
1004	atmcor_soa.f	/^ 1004 format (\/,'----------------exit SUBSM --------------------',\/)$/;"	l	subroutine:subsm	file:
1004	atmcor_soa.f	/^ 1004 format (\/,a4, 1p, 6(1x,d11.4),\/,(4x,1p,6(1x,d11.4)))$/;"	l	subroutine:prn1lb	file:
1004	atmcor_soa.f	/^ 1004 format (\/,a4, 1p, 6(1x,d11.4),\/,(4x,1p,6(1x,d11.4)))$/;"	l	subroutine:prn2lb	file:
1004	atmcor_soa.f	/^ 1004 format (\/,a4, 1p, 6(1x,d11.4),\/,(4x,1p,6(1x,d11.4)))$/;"	l	subroutine:prn3lb	file:
1005	atmcor_soa.f	/^ 1005 format (\/, $/;"	l	subroutine:mainlb	file:
1006	atmcor_soa.f	/^ 1006 format (\/, $/;"	l	subroutine:mainlb	file:
1007	atmcor_soa.f	/^ 1007 format (\/, $/;"	l	subroutine:mainlb	file:
1008	atmcor_soa.f	/^ 1008 format (\/, $/;"	l	subroutine:mainlb	file:
101	atmcor_soa.f	/^ 101  FORMAT (\/\/)$/;"	l	subroutine:ZXMWH_INI	file:
101	simpsn.f	/^  101 CONTINUE$/;"	l	function:SIMPSN	file:
1010	atmcor_soa.f	/^ 1010 format ('Cauchy X =  ',\/,(4x,1p,6(1x,d11.4)))$/;"	l	subroutine:cauchy	file:
102	atmcor_soa.f	/^ 102  FORMAT(I3,' ',F8.4,' ',2(' ',F8.5),' ',2(' ',F12.5),' ',I4,$/;"	l	subroutine:DZXMWH_WRITE	file:
102	atmcor_soa.f	/^ 102  FORMAT(I3,' ',F8.4,' ',2(' ',F8.5),' ',2(' ',F9.5),' ',I4)$/;"	l	subroutine:ZXMWH_WRITE	file:
102	simpsn.f	/^  102 CONTINUE$/;"	l	function:SIMPSN	file:
103	simpsn.f	/^  103 SIMPSN = TWO3R*X(1)*SIMPSN$/;"	l	function:SIMPSN	file:
104	simpsn.f	/^  104 CONTINUE$/;"	l	function:SIMPSN	file:
1043	etbpsub.f	/^1043    continue$/;"	l	subroutine:etgetvis	file:
1044	etbpsub.f	/^1044    continue$/;"	l	subroutine:etgetrsp	file:
1044	etbpsub.f	/^1044    continue$/;"	l	subroutine:etgetvis	file:
105	atmcor_soa.f	/^  105   GM = TIM\/TI$/;"	l	subroutine:ZXMJN	file:
105	atmcor_soa.f	/^  105 CONTINUE$/;"	l	subroutine:ZXMWE	file:
105	atmcor_soa.f	/^ 105  FORMAT(I3,' ',F8.4,' ',5(' ',F8.5),' ',5(' ',F9.5),' ',I4)$/;"	l	subroutine:ZXMWH_WRITE	file:
105	atmcor_soa.f	/^ 105  FORMAT(f8.3,I4,(' ',F12.3),' ',$/;"	l	subroutine:DZXMWH_WRITE	file:
105	simpsn.f	/^  105 CONTINUE$/;"	l	function:SIMPSN	file:
106	simpsn.f	/^  106 CONTINUE$/;"	l	function:SIMPSN	file:
107	simpsn.f	/^  107 SSUM = 0.0d0$/;"	l	function:SIMPSN	file:
108	simpsn.f	/^  108 CONTINUE$/;"	l	function:SIMPSN	file:
11	atrem_app_refl_plus_gas_removal_l2.f90	/^11    continue$/;"	l	subroutine:spline	file:
11	dtran_brdf.f	/^11    CONTINUE   ! USE ICHL and ICHL -1$/;"	l	subroutine:Morel_BRDF	file:
110	atmcor_soa.f	/^  110    continue$/;"	l	subroutine:dtrsl	file:
110	atmcor_soa.f	/^  110   CONTINUE$/;"	l	subroutine:ZXMJN	file:
110	atmcor_soa.f	/^  110 CONTINUE$/;"	l	subroutine:ZXMWE	file:
111	atmcor_soa.f	/^ 111  continue$/;"	l	subroutine:DRV_SPECOPT_LBFGSB	file:
111	atmcor_soa.f	/^ 111  continue$/;"	l	subroutine:mainlb	file:
115	atmcor_soa.f	/^  115   TIM = TI$/;"	l	subroutine:ZXMJN	file:
115	atmcor_soa.f	/^  115 II = 1$/;"	l	subroutine:ZXMWE	file:
12	atrem_app_refl_plus_gas_removal_l2.f90	/^12    continue$/;"	l	subroutine:spline	file:
120	atmcor_soa.f	/^  120       continue$/;"	l	subroutine:dtrsl	file:
120	atmcor_soa.f	/^  120    CONTINUE$/;"	l	subroutine:ZXMWE	file:
120	atmcor_soa.f	/^  120 CONTINUE$/;"	l	subroutine:ZXMJN	file:
120	atrem_app_refl_plus_gas_removal_l2.f90	/^  120   CONTINUE$/;"	l	subroutine:GET_INPUT	file:
125	atmcor_soa.f	/^  125 CONTINUE$/;"	l	subroutine:ZXMWE	file:
125	atmcor_soa.f	/^  125 IF (IR.LT.0) IR = -IR$/;"	l	subroutine:ZXMJN	file:
130	atmcor_soa.f	/^  130       continue$/;"	l	subroutine:dtrsl	file:
130	atmcor_soa.f	/^  130    CONTINUE$/;"	l	subroutine:ZXMWE	file:
135	atmcor_soa.f	/^  135 CONTINUE$/;"	l	subroutine:ZXMWE	file:
140	atmcor_soa.f	/^  140    continue$/;"	l	subroutine:dtrsl	file:
140	atmcor_soa.f	/^  140 RELX = ZERO$/;"	l	subroutine:ZXMWE	file:
145	atmcor_soa.f	/^  145 CONTINUE$/;"	l	subroutine:ZXMWE	file:
1466	atrem_app_refl_plus_gas_removal_l2.f90	/^1466  CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
1466	atrem_app_refl_plus_gas_removal_l2.f90	/^1466  CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
1491	atrem_app_refl_plus_gas_removal_l2.f90	/^1491      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
1491	atrem_app_refl_plus_gas_removal_l2.f90	/^1491      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
1492	atrem_app_refl_plus_gas_removal_l2.f90	/^1492      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
1492	atrem_app_refl_plus_gas_removal_l2.f90	/^1492      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
15	atmcor_soa.f	/^   15    CONTINUE$/;"	l	subroutine:ZXMWD	file:
15	atmcor_soa.f	/^   15 CONTINUE$/;"	l	subroutine:ZSRCH	file:
15	atmcor_soa.f	/^   15 CONTINUE$/;"	l	subroutine:ZXMWE	file:
15	atmcor_soa.f	/^   15 DO 20 J = 1, N$/;"	l	subroutine:ZXMJN	file:
15	atmcor_soa.f	/^  15        continue$/;"	l	subroutine:formk	file:
15	atmcor_soa.f	/^  15  continue$/;"	l	subroutine:projgr	file:
150	atmcor_soa.f	/^  150 IF (IFN.GE.MAXFN) GO TO 240$/;"	l	subroutine:ZXMWE	file:
150	atmcor_soa.f	/^  150 continue$/;"	l	subroutine:dtrsl	file:
155	atmcor_soa.f	/^  155 CONTINUE$/;"	l	subroutine:ZXMWE	file:
1560	atrem_app_refl_plus_gas_removal_l2.f90	/^1560      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
1560	atrem_app_refl_plus_gas_removal_l2.f90	/^1560      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
1565	atrem_app_refl_plus_gas_removal_l2.f90	/^1565      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
1565	atrem_app_refl_plus_gas_removal_l2.f90	/^1565      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
1570	atrem_app_refl_plus_gas_removal_l2.f90	/^1570      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
1570	atrem_app_refl_plus_gas_removal_l2.f90	/^1570      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
16	atmcor_soa.f	/^  16        continue$/;"	l	subroutine:formk	file:
160	atmcor_soa.f	/^  160 IER = 0$/;"	l	subroutine:ZXMWE	file:
165	atmcor_soa.f	/^  165 CONTINUE$/;"	l	subroutine:ZXMWE	file:
167	atmcor_soa.f	/^ 167   continue$/;"	l	subroutine:DRV_SPECOPT_LBFGSB	file:
170	atmcor_soa.f	/^  170 IF (IFN.GE.MAXFN) GO TO 240$/;"	l	subroutine:ZXMWE	file:
175	atmcor_soa.f	/^  175 CONTINUE$/;"	l	subroutine:ZXMWE	file:
180	atmcor_soa.f	/^  180 CONTINUE$/;"	l	subroutine:ZXMWE	file:
185	atmcor_soa.f	/^  185 CONTINUE$/;"	l	subroutine:ZXMWE	file:
190	atmcor_soa.f	/^  190 CONTINUE$/;"	l	subroutine:ZXMWE	file:
195	atmcor_soa.f	/^  195 Z = P1$/;"	l	subroutine:ZXMWE	file:
2	airmass_avhrr.f	/^2       CONTINUE$/;"	l	subroutine:AIRMASS_AVHRR	file:
2	atmcor_soa.f	/^ 2        FORMAT( i3,x,f6.1,5(x,E13.6) )$/;"	l	subroutine:ATMCOR_SOA	file:
2	atrem_app_refl_plus_gas_removal_l2.f90	/^2       jlo=jhi-inc$/;"	l	subroutine:hunt	file:
2	dtran_brdf.f	/^2     format(' ', 13(2x,f10.6))$/;"	l	subroutine:Morel_BRDF	file:
20	atmcor_soa.f	/^   20             IF (YII.GE.YD(IMD)) THEN$/;"	l	subroutine:DRGLCTN	file:
20	atmcor_soa.f	/^   20         CONTINUE$/;"	l	subroutine:DRGPD3P	file:
20	atmcor_soa.f	/^   20       continue$/;"	l	subroutine:dpofa	file:
20	atmcor_soa.f	/^   20    CONTINUE$/;"	l	subroutine:ZXMWD	file:
20	atmcor_soa.f	/^   20    continue$/;"	l	subroutine:dtrsl	file:
20	atmcor_soa.f	/^   20    continue$/;"	l	subroutine:hpsolb	file:
20	atmcor_soa.f	/^   20 CONTINUE$/;"	l	subroutine:ZSRCH	file:
20	atmcor_soa.f	/^   20 CONTINUE$/;"	l	subroutine:ZXMJN	file:
20	atmcor_soa.f	/^   20 IF (IOPT.NE.0) GO TO 30$/;"	l	subroutine:ZXMWE	file:
20	atmcor_soa.f	/^   20 continue$/;"	l	function:dpmeps	file:
20	atmcor_soa.f	/^   20 m = mod(n,4)$/;"	l	subroutine:daxpy	file:
20	atmcor_soa.f	/^   20 m = mod(n,5)$/;"	l	function:ddot	file:
20	atmcor_soa.f	/^   20 m = mod(n,5)$/;"	l	subroutine:dscal	file:
20	atmcor_soa.f	/^   20 m = mod(n,7)$/;"	l	subroutine:dcopy	file:
20	atmcor_soa.f	/^  20     continue$/;"	l	subroutine:formk	file:
20	atmcor_soa.f	/^  20     continue$/;"	l	subroutine:freev	file:
20	atmcor_soa.f	/^  20  continue  $/;"	l	subroutine:bmv	file:
20	atmcor_soa.f	/^  20  continue $/;"	l	subroutine:cauchy	file:
20	atmcor_soa.f	/^  20  continue$/;"	l	subroutine:active	file:
20	atmcor_soa.f	/^  20  continue$/;"	l	subroutine:subsm	file:
20	atmcor_soa.f	/^20           if(theta .lt. thetav(j1)) goto 21$/;"	l	subroutine:FUNCT_A_B_C_D_FOURIER_INTERPOLATE	file:
20	atmcor_soa.f	/^20    FORMAT( 5(2x,E13.6) )$/;"	l	subroutine:READ_MODEL_DATA	file:
20	raygetpol.f	/^20     format(\/\/(1x,2f13.0))$/;"	l	subroutine:rayget	file:
200	atmcor_soa.f	/^  200 IF (TOT.LT.AEPS) GO TO 245$/;"	l	subroutine:ZXMWE	file:
2001	atmcor_soa.f	/^ 2001 format ('RUNNING THE L-BFGS-B CODE',\/,\/,$/;"	l	subroutine:prn1lb	file:
2001	atmcor_soa.f	/^ 2001 format$/;"	l	subroutine:prn2lb	file:
2010	atmcor_soa.f	/^ 2010 format (\/,'---------------- exit CAUCHY----------------------',\/)$/;"	l	subroutine:cauchy	file:
205	atmcor_soa.f	/^  205 ALPHA = TOT$/;"	l	subroutine:ZXMWE	file:
21	atmcor_soa.f	/^21           jv1 = jv2 - 1$/;"	l	subroutine:FUNCT_A_B_C_D_FOURIER_INTERPOLATE	file:
21	atmcor_soa.f	/^21    FORMAT( )$/;"	l	subroutine:READ_MODEL_DATA	file:
210	atmcor_soa.f	/^  210 CONTINUE$/;"	l	subroutine:ZXMWE	file:
215	atmcor_soa.f	/^  215 IF (IFN.GE.MAXFN) GO TO 240$/;"	l	subroutine:ZXMWE	file:
22	atmcor_soa.f	/^  22     continue$/;"	l	subroutine:freev	file:
220	atmcor_soa.f	/^  220 CONTINUE$/;"	l	subroutine:ZXMWE	file:
222	atmcor_soa.f	/^ 222  continue$/;"	l	subroutine:mainlb	file:
225	atmcor_soa.f	/^  225 CONTINUE$/;"	l	subroutine:ZXMWE	file:
230	atmcor_soa.f	/^  230 ZZ = ALPHA\/(DGS-ALPHA*GS0)$/;"	l	subroutine:ZXMWE	file:
235	atmcor_soa.f	/^  235 CONTINUE$/;"	l	subroutine:ZXMWE	file:
24	atmcor_soa.f	/^  24  continue$/;"	l	subroutine:freev	file:
240	atmcor_soa.f	/^  240 IER = 131$/;"	l	subroutine:ZXMWE	file:
245	atmcor_soa.f	/^  245 IF (IDIFF.EQ.2) GO TO 250$/;"	l	subroutine:ZXMWE	file:
25	atmcor_soa.f	/^   25       CONTINUE$/;"	l	subroutine:ZXMWD	file:
25	atmcor_soa.f	/^   25   TI = TI + (V*V)\/A(JJ)$/;"	l	subroutine:ZXMJN	file:
25	atmcor_soa.f	/^   25 CONTINUE$/;"	l	subroutine:ZXMWE	file:
25	atmcor_soa.f	/^   25 M(I) = 1$/;"	l	subroutine:ZSRCH	file:
25	atmcor_soa.f	/^  25        continue $/;"	l	subroutine:formk	file:
25	atmcor_soa.f	/^  25     continue$/;"	l	subroutine:subsm	file:
250	atmcor_soa.f	/^  250 IF (RELX.GT.EPS .AND. IER.EQ.0) GO TO 100$/;"	l	subroutine:ZXMWE	file:
255	atmcor_soa.f	/^  255 CONTINUE$/;"	l	subroutine:ZXMWE	file:
26	atmcor_soa.f	/^  26     continue$/;"	l	subroutine:cmprlb	file:
260	atmcor_soa.f	/^  260       CONTINUE$/;"	l	subroutine:ZXMWE	file:
265	atmcor_soa.f	/^  265    CONTINUE$/;"	l	subroutine:ZXMWE	file:
270	atmcor_soa.f	/^  270 CONTINUE$/;"	l	subroutine:ZXMWE	file:
275	atmcor_soa.f	/^  275 IF (IDIFF.EQ.2) GO TO 290$/;"	l	subroutine:ZXMWE	file:
280	atmcor_soa.f	/^  280 CONTINUE$/;"	l	subroutine:ZXMWE	file:
285	atmcor_soa.f	/^  285 CONTINUE$/;"	l	subroutine:ZXMWE	file:
290	atmcor_soa.f	/^  290 DO 295 I=1,N$/;"	l	subroutine:ZXMWE	file:
295	atmcor_soa.f	/^  295 CONTINUE$/;"	l	subroutine:ZXMWE	file:
3	airmass_avhrr.f	/^3       CONTINUE$/;"	l	subroutine:AIRMASS_AVHRR	file:
3	atrem_app_refl_plus_gas_removal_l2.f90	/^3     if(jhi-jlo.eq.1)then$/;"	l	subroutine:hunt	file:
30	atmcor_soa.f	/^   30             CONTINUE$/;"	l	subroutine:DRGPD3P	file:
30	atmcor_soa.f	/^   30       continue$/;"	l	subroutine:dtrsl	file:
30	atmcor_soa.f	/^   30    CONTINUE$/;"	l	subroutine:ZXMWD	file:
30	atmcor_soa.f	/^   30    continue$/;"	l	subroutine:dpofa	file:
30	atmcor_soa.f	/^   30    continue$/;"	l	subroutine:hpsolb	file:
30	atmcor_soa.f	/^   30   CONTINUE$/;"	l	subroutine:ZXMJN	file:
30	atmcor_soa.f	/^   30 CONTINUE$/;"	l	subroutine:DRGLCTN	file:
30	atmcor_soa.f	/^   30 IM1 = 1$/;"	l	subroutine:ZXMWE	file:
30	atmcor_soa.f	/^   30 JM = J$/;"	l	subroutine:ZSRCH	file:
30	atmcor_soa.f	/^   30 continue$/;"	l	function:ddot	file:
30	atmcor_soa.f	/^   30 continue$/;"	l	function:dpmeps	file:
30	atmcor_soa.f	/^   30 continue$/;"	l	subroutine:daxpy	file:
30	atmcor_soa.f	/^   30 continue$/;"	l	subroutine:dcopy	file:
30	atmcor_soa.f	/^   30 continue$/;"	l	subroutine:dscal	file:
30	atmcor_soa.f	/^  30     continue$/;"	l	subroutine:cmprlb	file:
30	atmcor_soa.f	/^  30     continue$/;"	l	subroutine:formk	file:
30	atmcor_soa.f	/^  30     continue$/;"	l	subroutine:subsm	file:
30	atmcor_soa.f	/^  30  continue $/;"	l	subroutine:bmv	file:
300	atmcor_soa.f	/^  300 CONTINUE$/;"	l	subroutine:ZXMWE	file:
3001	atmcor_soa.f	/^ 3001 format(2(1x,i4),2(1x,i5),2x,a3,1x,i4,1p,2(2x,d7.1),1p,2(1x,d10.3))$/;"	l	subroutine:prn2lb	file:
3002	atmcor_soa.f	/^ 3002 format(2(1x,i4),2(1x,i5),2x,a3,1x,i4,1p,2(2x,d7.1),6x,'-',10x,'-')$/;"	l	subroutine:prn3lb	file:
3003	atmcor_soa.f	/^ 3003 format (\/,$/;"	l	subroutine:prn3lb	file:
3004	atmcor_soa.f	/^ 3004 format (\/,3x,'N',3x,'Tit',2x,'Tnf',2x,'Tnint',2x,$/;"	l	subroutine:prn3lb	file:
3005	atmcor_soa.f	/^ 3005 format (i5,2(1x,i4),(1x,i6),(2x,i4),(1x,i5),1p,2(2x,d10.3))$/;"	l	subroutine:prn3lb	file:
3006	atmcor_soa.f	/^ 3006 format (i5,2(1x,i4),2(1x,i6),(1x,i4),(1x,i5),7x,'-',10x,'-')$/;"	l	subroutine:prn3lb	file:
3007	atmcor_soa.f	/^ 3007 format (\/,' Cauchy                time',1p,e10.3,' seconds.',\/ $/;"	l	subroutine:prn3lb	file:
3008	atmcor_soa.f	/^ 3008 format (\/,' Total User time',1p,e10.3,' seconds.',\/)$/;"	l	subroutine:prn3lb	file:
3009	atmcor_soa.f	/^ 3009 format (\/,a60)$/;"	l	subroutine:prn3lb	file:
3010	atmcor_soa.f	/^ 3010 format (\/,'---------------- CAUCHY entered-------------------')$/;"	l	subroutine:cauchy	file:
310	atrem_app_refl_plus_gas_removal_l2.f90	/^  310   VMR(I)=VMR(I)*1.0E-06$/;"	l	subroutine:MODEL_ADJ	file:
310	atrem_app_refl_plus_gas_removal_l2.f90	/^  310 CONTINUE$/;"	l	subroutine:GEOMETRY	file:
32	atmcor_soa.f	/^  32        continue$/;"	l	subroutine:cmprlb	file:
320	atrem_app_refl_plus_gas_removal_l2.f90	/^  320 CONTINUE$/;"	l	subroutine:CUBSPLN	file:
320	atrem_app_refl_plus_gas_removal_l2.f90	/^  320 CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
322	atrem_app_refl_plus_gas_removal_l2.f90	/^  322     CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
324	atrem_app_refl_plus_gas_removal_l2.f90	/^  324     CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
325	atrem_app_refl_plus_gas_removal_l2.f90	/^  325     CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
326	atrem_app_refl_plus_gas_removal_l2.f90	/^  326     CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
327	atrem_app_refl_plus_gas_removal_l2.f90	/^  327     CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
333	atmcor_soa.f	/^ 333  continue$/;"	l	subroutine:mainlb	file:
34	atmcor_soa.f	/^  34     continue$/;"	l	subroutine:cmprlb	file:
35	atmcor_soa.f	/^   35  CONTINUE$/;"	l	subroutine:ZXMWD	file:
35	atmcor_soa.f	/^   35 CONTINUE$/;"	l	subroutine:ZSRCH	file:
35	atmcor_soa.f	/^   35 CONTINUE$/;"	l	subroutine:ZXMJN	file:
35	atmcor_soa.f	/^   35 CONTINUE$/;"	l	subroutine:ZXMWE	file:
35	atmcor_soa.f	/^  35        continue$/;"	l	subroutine:formk	file:
350	atrem_app_refl_plus_gas_removal_l2.f90	/^ 350  CONTINUE$/;"	l	subroutine:MODEL_ADJ	file:
357	atrem_app_refl_plus_gas_removal_l2.f90	/^ 357  CONTINUE$/;"	l	subroutine:MODEL_ADJ	file:
36	atmcor_soa.f	/^  36        continue$/;"	l	subroutine:formk	file:
397	dtran_brdf.f	/^ 397   Format(' ' , '  Iwave = ', I2)$/;"	l	subroutine:read_tstar	file:
398	dtran_brdf.f	/^ 398   Format(' ' , ' Iphase = ', I2, '  Iwave = ', I2)$/;"	l	subroutine:read_tstar	file:
399	dtran_brdf.f	/^ 399   FORMAT(a)$/;"	l	subroutine:read_tstar	file:
399	dtran_brdf.f	/^399    FORMAT(a)$/;"	l	subroutine:diff_tran_corr	file:
399	dtran_brdf.f	/^399    FORMAT(a)$/;"	l	subroutine:read_partial_phase_integrations	file:
40	atmcor_soa.f	/^   40         CONTINUE$/;"	l	subroutine:DRGPD3P	file:
40	atmcor_soa.f	/^   40       continue$/;"	l	subroutine:dtrsl	file:
40	atmcor_soa.f	/^   40    CONTINUE$/;"	l	subroutine:ZXMWD	file:
40	atmcor_soa.f	/^   40    CONTINUE$/;"	l	subroutine:ZXMWE	file:
40	atmcor_soa.f	/^   40 CONTINUE$/;"	l	subroutine:ZSRCH	file:
40	atmcor_soa.f	/^   40 IF (IR.LE.0) GO TO 45$/;"	l	subroutine:ZXMJN	file:
40	atmcor_soa.f	/^   40 continue$/;"	l	function:dpmeps	file:
40	atmcor_soa.f	/^   40 continue$/;"	l	subroutine:dpofa	file:
40	atmcor_soa.f	/^   40 mp1 = m + 1$/;"	l	function:ddot	file:
40	atmcor_soa.f	/^   40 mp1 = m + 1$/;"	l	subroutine:daxpy	file:
40	atmcor_soa.f	/^   40 mp1 = m + 1$/;"	l	subroutine:dcopy	file:
40	atmcor_soa.f	/^   40 mp1 = m + 1$/;"	l	subroutine:dscal	file:
40	atmcor_soa.f	/^  40        continue $/;"	l	subroutine:cauchy	file:
40	atmcor_soa.f	/^  40     continue$/;"	l	subroutine:formk	file:
40	atmcor_soa.f	/^  40  continue$/;"	l	subroutine:bmv	file:
40	atmcor_soa.f	/^  40  continue$/;"	l	subroutine:mainlb	file:
40	atmcor_soa.f	/^  40  continue$/;"	l	subroutine:subsm	file:
400	dtran_brdf.f	/^ 400   FORMAT( 5(3X, E12.6))$/;"	l	subroutine:read_tstar	file:
400	dtran_brdf.f	/^400    FORMAT( 5(3X, E12.6))$/;"	l	subroutine:diff_tran_corr	file:
400	dtran_brdf.f	/^400    FORMAT( 5(3X, E12.6))$/;"	l	subroutine:read_partial_phase_integrations	file:
400	dtran_brdf.f	/^400   FORMAT( 5(3X, E12.6))$/;"	l	subroutine:Morel_BRDF	file:
4010	atmcor_soa.f	/^ 4010 format ('Piece    ',i3,' --f1, f2 at start point ',1p,2(1x,d11.4))$/;"	l	subroutine:cauchy	file:
4011	atmcor_soa.f	/^ 4011 format (\/,'Piece    ',i3,' --f1, f2 at start point ',$/;"	l	subroutine:cauchy	file:
41	atmcor_soa.f	/^  41        continue$/;"	l	subroutine:lnsrlb	file:
42	atmcor_soa.f	/^  42  continue$/;"	l	subroutine:mainlb	file:
42	etbpsub.f	/^42      format()$/;"	l	subroutine:etgetvis	file:
43	atmcor_soa.f	/^  43        continue$/;"	l	subroutine:lnsrlb	file:
43	etbpsub.f	/^43      format(i3,2f16.0)$/;"	l	subroutine:etgetvis	file:
44	etbpsub.f	/^44              format(3x,i2)$/;"	l	subroutine:etgetrsp	file:
444	atmcor_soa.f	/^ 444  continue$/;"	l	subroutine:mainlb	file:
45	atmcor_soa.f	/^   45 CONTINUE$/;"	l	subroutine:ZXMWE	file:
45	atmcor_soa.f	/^   45 JM = J$/;"	l	subroutine:ZSRCH	file:
45	atmcor_soa.f	/^   45 TI = ZERO$/;"	l	subroutine:ZXMJN	file:
45	atmcor_soa.f	/^  45  continue$/;"	l	subroutine:formk	file:
45	etbpsub.f	/^45      format(11x,f14.0,4x,f10.0,5x,i3)$/;"	l	subroutine:etgetrsp	file:
460	atrem_app_refl_plus_gas_removal_l2.f90	/^  460 CONTINUE$/;"	l	function:FINDMATCH	file:
466	atrem_app_refl_plus_gas_removal_l2.f90	/^ 466  CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
466	atrem_app_refl_plus_gas_removal_l2.f90	/^ 466  CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
47	etbpsub.f	/^47      format(5(e11.5,4x))$/;"	l	subroutine:etgetrsp	file:
470	atrem_app_refl_plus_gas_removal_l2.f90	/^  470 CONTINUE$/;"	l	function:FINDMATCH	file:
491	atrem_app_refl_plus_gas_removal_l2.f90	/^ 491      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
491	atrem_app_refl_plus_gas_removal_l2.f90	/^ 491      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
5	atmcor_soa.f	/^    5 CONTINUE$/;"	l	subroutine:ZSRCH	file:
5	atmcor_soa.f	/^    5 CONTINUE$/;"	l	subroutine:ZXMWE	file:
5	atmcor_soa.f	/^    5 IF (SIG.GT.ZERO) GO TO 65$/;"	l	subroutine:ZXMJN	file:
50	atmcor_soa.f	/^   50     CONTINUE$/;"	l	subroutine:DRGPD3P	file:
50	atmcor_soa.f	/^   50    M(I) = MOD(M(I),JM)+1$/;"	l	subroutine:ZSRCH	file:
50	atmcor_soa.f	/^   50    continue$/;"	l	subroutine:dtrsl	file:
50	atmcor_soa.f	/^   50 HMIN = H(1)$/;"	l	subroutine:ZXMWE	file:
50	atmcor_soa.f	/^   50 TI = EPS\/SIG$/;"	l	subroutine:ZXMJN	file:
50	atmcor_soa.f	/^   50 continue$/;"	l	function:ddot	file:
50	atmcor_soa.f	/^   50 continue$/;"	l	function:dpmeps	file:
50	atmcor_soa.f	/^   50 continue$/;"	l	subroutine:daxpy	file:
50	atmcor_soa.f	/^   50 continue$/;"	l	subroutine:dcopy	file:
50	atmcor_soa.f	/^   50 continue$/;"	l	subroutine:dscal	file:
50	atmcor_soa.f	/^  50        continue$/;"	l	subroutine:formk	file:
50	atmcor_soa.f	/^  50     continue$/;"	l	subroutine:bmv	file:
50	atmcor_soa.f	/^  50     continue$/;"	l	subroutine:matupd	file:
50	atmcor_soa.f	/^  50  continue $/;"	l	subroutine:cauchy	file:
50	atmcor_soa.f	/^  50  continue$/;"	l	subroutine:subsm	file:
5010	atmcor_soa.f	/^ 5010 format ('Distance to the next break point =  ',1p,d11.4)$/;"	l	subroutine:cauchy	file:
51	atmcor_soa.f	/^  51        continue$/;"	l	subroutine:formk	file:
51	atmcor_soa.f	/^  51  continue$/;"	l	subroutine:matupd	file:
52	atmcor_soa.f	/^  52  continue$/;"	l	subroutine:formt	file:
5237	atrem_app_refl_plus_gas_removal_l2.f90	/^ 5237     FORMAT(2X,'***WARNING: Surface elevation smaller then lowest boundary of the model atmosphere.')$/;"	l	subroutine:MODEL_ADJ	file:
5239	atrem_app_refl_plus_gas_removal_l2.f90	/^ 5239     FORMAT(2X,'***WARNING: Plane altitude less then lowest boundary of the model atmosphere.')$/;"	l	subroutine:MODEL_ADJ	file:
5240	atrem_app_refl_plus_gas_removal_l2.f90	/^ 5240     CONTINUE$/;"	l	subroutine:MODEL_ADJ	file:
5245	atrem_app_refl_plus_gas_removal_l2.f90	/^ 5245     CONTINUE$/;"	l	subroutine:MODEL_ADJ	file:
5255	atrem_app_refl_plus_gas_removal_l2.f90	/^ 5255 CONTINUE$/;"	l	subroutine:MODEL_ADJ	file:
5256	atrem_app_refl_plus_gas_removal_l2.f90	/^ 5256 CONTINUE$/;"	l	subroutine:MODEL_ADJ	file:
53	atmcor_soa.f	/^  53        continue$/;"	l	subroutine:formt	file:
54	atmcor_soa.f	/^  54     continue$/;"	l	subroutine:formt	file:
55	atmcor_soa.f	/^   55    CONTINUE$/;"	l	subroutine:ZXMWD	file:
55	atmcor_soa.f	/^   55 CONTINUE$/;"	l	subroutine:ZSRCH	file:
55	atmcor_soa.f	/^   55 CONTINUE$/;"	l	subroutine:ZXMWE	file:
55	atmcor_soa.f	/^   55 TIM = TI$/;"	l	subroutine:ZXMJN	file:
55	atmcor_soa.f	/^  55     continue$/;"	l	subroutine:formk	file:
55	atmcor_soa.f	/^  55  continue$/;"	l	subroutine:formt	file:
555	atmcor_soa.f	/^ 555  continue$/;"	l	subroutine:mainlb	file:
556	atmcor_soa.f	/^ 556  continue$/;"	l	subroutine:lnsrlb	file:
56	atmcor_soa.f	/^   56      CONTINUE$/;"	l	subroutine:ZXMWD	file:
560	atrem_app_refl_plus_gas_removal_l2.f90	/^  560 CONTINUE$/;"	l	subroutine:CHNLRATIO	file:
560	atrem_app_refl_plus_gas_removal_l2.f90	/^ 560      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
560	atrem_app_refl_plus_gas_removal_l2.f90	/^ 560      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
565	atrem_app_refl_plus_gas_removal_l2.f90	/^ 565      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
565	atrem_app_refl_plus_gas_removal_l2.f90	/^ 565      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
570	atrem_app_refl_plus_gas_removal_l2.f90	/^  570 CONTINUE$/;"	l	subroutine:CHNLRATIO	file:
570	atrem_app_refl_plus_gas_removal_l2.f90	/^ 570      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH	file:
570	atrem_app_refl_plus_gas_removal_l2.f90	/^ 570      CONTINUE$/;"	l	subroutine:TRAN_SMOOTH_OTHERS	file:
575	atrem_app_refl_plus_gas_removal_l2.f90	/^  575 CONTINUE$/;"	l	subroutine:CHNLRATIO	file:
580	atrem_app_refl_plus_gas_removal_l2.f90	/^  580 CONTINUE$/;"	l	subroutine:CHNLRATIO	file:
585	atrem_app_refl_plus_gas_removal_l2.f90	/^  585   CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
590	atrem_app_refl_plus_gas_removal_l2.f90	/^  590   CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
590	atrem_app_refl_plus_gas_removal_l2.f90	/^  590 CONTINUE$/;"	l	subroutine:CHNLRATIO	file:
595	atrem_app_refl_plus_gas_removal_l2.f90	/^  595   CONTINUE$/;"	l	subroutine:INIT_SPECCAL	file:
595	atrem_app_refl_plus_gas_removal_l2.f90	/^  595 CONTINUE$/;"	l	subroutine:CHNLRATIO	file:
60	atmcor_soa.f	/^   60       continue$/;"	l	subroutine:dtrsl	file:
60	atmcor_soa.f	/^   60  CONTINUE$/;"	l	subroutine:ZXMWD	file:
60	atmcor_soa.f	/^   60 CONTINUE$/;"	l	subroutine:DRGPD3P	file:
60	atmcor_soa.f	/^   60 CONTINUE$/;"	l	subroutine:ZXMJN	file:
60	atmcor_soa.f	/^   60 CONTINUE$/;"	l	subroutine:ZXMWE	file:
60	atmcor_soa.f	/^   60 IF (I2.GT.L2.AND.M(NS).EQ.JP1) GO TO 20$/;"	l	subroutine:ZSRCH	file:
60	atmcor_soa.f	/^   60 continue$/;"	l	function:dpmeps	file:
60	atmcor_soa.f	/^   60 ddot = dtemp$/;"	l	function:ddot	file:
60	atmcor_soa.f	/^  60  continue $/;"	l	subroutine:cauchy	file:
60	atmcor_soa.f	/^  60  continue$/;"	l	subroutine:bmv	file:
60	atmcor_soa.f	/^  60  continue$/;"	l	subroutine:formk	file:
60	atmcor_soa.f	/^  60  continue$/;"	l	subroutine:subsm	file:
6010	atmcor_soa.f	/^ 6010 format ('Distance to the stationary point =  ',1p,d11.4) $/;"	l	subroutine:cauchy	file:
61	atmcor_soa.f	/^   61 IR = N$/;"	l	subroutine:ZXMWE	file:
627	atrem_app_refl_plus_gas_removal_l2.f90	/^ 627  FORMAT(A10)$/;"	l	subroutine:GET_INPUT	file:
65	atmcor_soa.f	/^   65 CONTINUE$/;"	l	subroutine:ZSRCH	file:
65	atmcor_soa.f	/^   65 MM = 0$/;"	l	subroutine:ZXMJN	file:
65	atmcor_soa.f	/^   65 NM1 = N-1$/;"	l	subroutine:ZXMWE	file:
65	atmcor_soa.f	/^  65     continue$/;"	l	subroutine:formk	file:
66	atmcor_soa.f	/^  66     continue$/;"	l	subroutine:formk	file:
666	atmcor_soa.f	/^ 666  continue$/;"	l	subroutine:mainlb	file:
67	atmcor_soa.f	/^  67     continue$/;"	l	subroutine:formk	file:
70	atmcor_soa.f	/^   70       continue$/;"	l	subroutine:dtrsl	file:
70	atmcor_soa.f	/^   70    IF (J.EQ.N) GO TO 85$/;"	l	subroutine:ZXMWE	file:
70	atmcor_soa.f	/^   70   CONTINUE$/;"	l	subroutine:ZXMWD	file:
70	atmcor_soa.f	/^   70 JJ = 0$/;"	l	subroutine:ZXMJN	file:
70	atmcor_soa.f	/^   70 return$/;"	l	function:dpmeps	file:
70	atmcor_soa.f	/^  70     continue $/;"	l	subroutine:cauchy	file:
70	atmcor_soa.f	/^  70  continue$/;"	l	subroutine:formk	file:
70	atmcor_soa.f	/^  70  continue$/;"	l	subroutine:subsm	file:
7001	atmcor_soa.f	/^ 7001 format ('RUNNING THE L-BFGS-B CODE',\/,\/,$/;"	l	subroutine:prn1lb	file:
71	atmcor_soa.f	/^  71  continue$/;"	l	subroutine:formk	file:
72	atmcor_soa.f	/^  72     continue$/;"	l	subroutine:formk	file:
74	atmcor_soa.f	/^  74        continue$/;"	l	subroutine:formk	file:
7455	atrem_app_refl_plus_gas_removal_l2.f90	/^ 7455     IF(HSURF.EQ.H(I)) HSURF=H(I)+0.0001$/;"	l	subroutine:MODEL_ADJ	file:
7456	atrem_app_refl_plus_gas_removal_l2.f90	/^ 7456     IF(HPLANE.EQ.HP(I)) HPLANE=HP(I)-0.0001$/;"	l	subroutine:MODEL_ADJ	file:
75	atmcor_soa.f	/^   75       CONTINUE$/;"	l	subroutine:ZXMWE	file:
75	atmcor_soa.f	/^   75   A(JJ) = RINF\/TIM$/;"	l	subroutine:ZXMJN	file:
75	atmcor_soa.f	/^   75   CONTINUE$/;"	l	subroutine:ZXMWD	file:
777	atmcor_soa.f	/^ 777  CONTINUE$/;"	l	subroutine:SPEC1GEOFIT	file:
777	atmcor_soa.f	/^ 777  continue$/;"	l	subroutine:cauchy	file:
777	atmcor_soa.f	/^ 777  continue$/;"	l	subroutine:mainlb	file:
777	atmcor_soa.f	/^777   CONTINUE$/;"	l	subroutine:ATMCOR_SOA	file:
80	atmcor_soa.f	/^   80    CONTINUE$/;"	l	subroutine:ZXMWE	file:
80	atmcor_soa.f	/^   80    continue$/;"	l	subroutine:dtrsl	file:
80	atmcor_soa.f	/^   80   IF (J.EQ.N) GO TO 9005$/;"	l	subroutine:ZXMJN	file:
800	atmcor_soa.f	/^800   CONTINUE$/;"	l	subroutine:SPEC1GEOFIT	file:
85	atmcor_soa.f	/^   85   CONTINUE$/;"	l	subroutine:ZXMJN	file:
85	atmcor_soa.f	/^   85 CONTINUE$/;"	l	subroutine:ZXMWE	file:
85	atrem_app_refl_plus_gas_removal_l2.f90	/^  85  FORMAT(A1000)$/;"	l	subroutine:GET_INPUT	file:
888	atmcor_soa.f	/^ 888  continue$/;"	l	subroutine:cauchy	file:
888	atmcor_soa.f	/^ 888  continue$/;"	l	subroutine:mainlb	file:
90	atmcor_soa.f	/^   90       continue$/;"	l	subroutine:dtrsl	file:
90	atmcor_soa.f	/^   90   TI = TIM$/;"	l	subroutine:ZXMJN	file:
90	atmcor_soa.f	/^   90 IF (IR.EQ.N) GO TO 95$/;"	l	subroutine:ZXMWE	file:
9000	atmcor_soa.f	/^ 9000   CONTINUE$/;"	l	subroutine:ZXMWD	file:
9000	atmcor_soa.f	/^ 9000 CONTINUE$/;"	l	subroutine:ZSRCH	file:
9000	atmcor_soa.f	/^ 9000 CONTINUE$/;"	l	subroutine:ZXMWE	file:
9001	atmcor_soa.f	/^ 9001 format (\/,3x,'it',3x,'nf',2x,'nint',2x,'nact',2x,'sub',2x,'itls',$/;"	l	subroutine:prn1lb	file:
9005	atmcor_soa.f	/^ 9005 CONTINUE$/;"	l	subroutine:ZXMJN	file:
9005	atmcor_soa.f	/^ 9005 RETURN$/;"	l	subroutine:ZSRCH	file:
9005	atmcor_soa.f	/^ 9005 RETURN$/;"	l	subroutine:ZXMWE	file:
901	avhrrsub5h.f	/^901      continue$/;"	l	function:avhrrsub5h	file:
9010	atmcor_soa.f	/^ 9010 CONTINUE$/;"	l	subroutine:ZXMWD	file:
9010	atmcor_soa.f	/^ 9010 IER = 136$/;"	l	subroutine:ZXMWE	file:
9011	atmcor_soa.f	/^ 9011 format (\/,$/;"	l	subroutine:prn3lb	file:
9012	atmcor_soa.f	/^ 9012 format (\/,$/;"	l	subroutine:prn3lb	file:
9013	atmcor_soa.f	/^ 9013 format (\/,$/;"	l	subroutine:prn3lb	file:
9014	atmcor_soa.f	/^ 9014 format (\/,$/;"	l	subroutine:prn3lb	file:
9015	atmcor_soa.f	/^ 9015 format (\/,$/;"	l	subroutine:prn3lb	file:
9018	atmcor_soa.f	/^ 9018 format (\/,' The triangular system is singular.')$/;"	l	subroutine:prn3lb	file:
9019	atmcor_soa.f	/^ 9019 format (\/,$/;"	l	subroutine:prn3lb	file:
902	avhrrsub5h.f	/^902      continue$/;"	l	function:avhrrsub5h	file:
911	atmcor_soa.f	/^  911 CONTINUE$/;"	l	subroutine:ZXMWD	file:
911	atmcor_soa.f	/^ 911  CONTINUE$/;"	l	subroutine:MAIN_OPTIM_INOUT_PROC	file:
95	atmcor_soa.f	/^   95   AL = V\/A(JJ)$/;"	l	subroutine:ZXMJN	file:
95	atmcor_soa.f	/^   95 ITN = 0$/;"	l	subroutine:ZXMWE	file:
990	lenstr.f	/^  990 return$/;"	l	function:lenstr	file:
999	atmcor_soa.f	/^ 999  continue$/;"	l	subroutine:cauchy	file:
999	atmcor_soa.f	/^ 999  continue$/;"	l	subroutine:mainlb	file:
999	atmcor_soa.f	/^ 999  continue$/;"	l	subroutine:prn3lb	file:
999	atmcor_soa.f	/^999   RETURN$/;"	l	subroutine:SPEC1GEOFIT	file:
A	COMMONS_INC.f	/^      REAL/;"	v
ABSAER	l2_flags.h	26;"	d
ABSIND_NS	niwa_iop.c	43;"	d	file:
ACDOMNONE	giop.h	40;"	d
ACDOMTAB	giop.h	39;"	d
ACOSS	getglint.f	/^        function ACOSS /;"	f
ADGS	giop.h	13;"	d
ADGSIOPTAB	giop.h	16;"	d
ADGSOBPG	giop.h	15;"	d
ADGSQAA	giop.h	14;"	d
ADGTAB	giop.h	12;"	d
AERMUMM	l12_parms.h	56;"	d
AERNULL	l12_parms.h	64;"	d
AERRH	l12_parms.h	61;"	d
AERRHFRNIR	l12_parms.h	59;"	d
AERRHMSEPS	l12_parms.h	63;"	d
AERRHMUMM	l12_parms.h	62;"	d
AERRHNIR	l12_parms.h	48;"	d
AERRHSWIR	l12_parms.h	60;"	d
AERSMA	l12_parms.h	58;"	d
AERSOA	l12_parms.h	57;"	d
AERWANG	l12_parms.h	47;"	d
AERWANGNIR	l12_parms.h	49;"	d
AERWANGSWIR	l12_parms.h	55;"	d
AERWHITE	l12_parms.h	46;"	d
AGZONE0	l12_proto.h	58;"	d
AGZONE1	l12_proto.h	59;"	d
AGZONE2	l12_proto.h	60;"	d
AGZONE3	l12_proto.h	61;"	d
AGZONE4	l12_proto.h	62;"	d
AGZONE5	l12_proto.h	63;"	d
AIRMASS_AVHRR	airmass_avhrr.f	/^        SUBROUTINE AIRMASS_AVHRR(/;"	s
ALPHA510	smi_climatology.h	5;"	d
ALTSENSORINFO	l12_parms.h	131;"	d
AMOEBA	giop.h	6;"	d
AMOEBA	gsm.c	34;"	d	file:
AMSRE3DAY	sstref.c	22;"	d	file:
AMSRE3DN	sstref.c	26;"	d	file:
AMSREDAY	sstref.c	23;"	d	file:
ANAPNONE	giop.h	44;"	d
ANAPTAB	giop.h	43;"	d
ANCBAD	anc_acq.c	20;"	d	file:
ANC_STAT_1T	anc_acq.c	12;"	d	file:
ANC_STAT_2T_END	anc_acq.c	13;"	d	file:
ANC_STAT_2T_START	anc_acq.c	15;"	d	file:
ANC_STAT_3T	anc_acq.c	17;"	d	file:
ANC_STAT_CLIM	anc_acq.c	18;"	d	file:
ANGSTROM	bin_climatology.c	13;"	d	file:
AOT_MAX	l12_parms.h	73;"	d
AOT_MIN	l12_parms.h	72;"	d
APHBRICAUD	giop.h	34;"	d
APHCIOTTI	giop.h	35;"	d
APHGAUSS	giop.h	33;"	d
APHTAB	giop.h	32;"	d
APH_MIN	carder.c	42;"	d	file:
AP_NS	niwa_iop.c	41;"	d	file:
ARRAY_CHUNK_SIZE	get_l2prod_index.c	18;"	d	file:
ASCENDING	scene_meta.h	11;"	d
ASCENDING_TRACK	main_l1info.c	36;"	d	file:
ASINN	getglint.f	/^        function ASINN /;"	f
ATMCOR_SOA	atmcor_soa.f	/^       SUBROUTINE ATMCOR_SOA /;"	s
ATMFAIL	l2_flags.h	9;"	d
ATMWARN	l2_flags.h	31;"	d
ATOM	misc.h	/^typedef uint32_t ATOM;$/;"	t
ATREM_BIT	l12_parms.h	94;"	d
ATREM_CH4	atrem_corl1.h	26;"	d
ATREM_CO	atrem_corl1.h	25;"	d
ATREM_CO2	atrem_corl1.h	23;"	d
ATREM_N2O	atrem_corl1.h	28;"	d
ATREM_NO2	atrem_corl1.h	24;"	d
ATREM_O2	atrem_corl1.h	27;"	d
ATREM_O3	atrem_corl1.h	22;"	d
ATSR	sstref.c	24;"	d	file:
ATSRDAY	sstref.c	27;"	d	file:
BAD_BYTE	l12_parms.h	42;"	d
BAD_CACO3	calcite.c	27;"	d	file:
BAD_FLT	jplaeriallib.h	19;"	d
BAD_FLT	l12_parms.h	39;"	d
BAD_INT	l12_parms.h	40;"	d
BAD_UBYTE	l12_parms.h	43;"	d
BAD_UINT	l12_parms.h	41;"	d
BAND	atmcor_soa.f	2080;"	c	subroutine:MAIN_OPTIM_INOUT_PROC
BANDED	l1_hdf_generic_read.c	4;"	d	file:
BANDLIST	l1_hmodis_hdf.c	/^static const bandinfo BANDLIST[] = {$/;"	v	file:
BANDW	l12_parms.h	81;"	d
BBNAPNONE	giop.h	52;"	d
BBNAPTAB	giop.h	51;"	d
BBPHNONE	giop.h	48;"	d
BBPHTAB	giop.h	47;"	d
BBPLAS	giop.h	27;"	d
BBPLASFIX	giop.h	28;"	d
BBPQAAFIX	giop.h	29;"	d
BBPS	giop.h	20;"	d
BBPSCIOTTI	giop.h	24;"	d
BBPSHAL	giop.h	21;"	d
BBPSLAS	giop.h	26;"	d
BBPSMM01	giop.h	25;"	d
BBPSPML	giop.h	23;"	d
BBPSQAA	giop.h	22;"	d
BBPTAB	giop.h	19;"	d
BIL	jplaeriallib.h	14;"	d
BINBELOWTHRESH	main_l1mapgen.c	65;"	d	file:
BINMATCH	calfile_utils.h	/^typedef enum {DET2DET, CROSSCAL, BINMATCH} caltype;$/;"	e	enum:__anon23
BINNUMBER	globals.h	33;"	d
BIP	jplaeriallib.h	13;"	d
BLOOPUPPERLIMITDEFAULT	globals.h	19;"	d
BORDER	get_nc_height.c	15;"	d	file:
BOWTIEDEL	l2_flags.h	37;"	d
BOX_MAX	b128_msk_get.c	7;"	d	file:
BP_NS	niwa_iop.c	42;"	d	file:
BRACKET4QUAD	atmcor_soa.f	/^      SUBROUTINE BRACKET4QUAD /;"	s
BRESINCRPGON	miscanfill.h	69;"	d
BRESINCRPGONSTRUCT	miscanfill.h	111;"	d
BRESINFO	miscanfill.h	/^} BRESINFO;$/;"	t	typeref:struct:__anon40
BRESINITPGON	miscanfill.h	43;"	d
BRESINITPGONSTRUCT	miscanfill.h	107;"	d
BSQ	jplaeriallib.h	15;"	d
BT_HI	l12_parms.h	75;"	d
BT_LO	l12_parms.h	74;"	d
BUFSZ	get_atrem_corl1.c	97;"	d	file:
BYTE	l1_imgscale.c	5;"	d	file:
BYTE	main_l1bgen.c	37;"	d	file:
BYTE	main_l1brsgen.c	36;"	d	file:
BYTE	main_l1mapgen.c	63;"	d	file:
BandInterp	bioOptBandShift.c	/^float BandInterp(ccstr* vcc, float* rrs_sh, int idx_0,int num_in){$/;"	f
BandShift	bioOptBandShift.c	/^float BandShift(ccstr* vccp, l2str *l2rec, int32_t ip, float target_band){$/;"	f
Between	setflags.c	318;"	d	file:
Bool	misc.h	/^typedef int Bool;$/;"	t
BoxPtr	misc.h	/^typedef struct _Box *BoxPtr;$/;"	t	typeref:struct:_Box
BoxRec	miscstruct.h	/^} BoxRec;$/;"	t	typeref:struct:_Box
Bt	l1_struc.h	/^    float  *Bt;$/;"	m	struct:l1_struct
Bt	l2_struc.h	/^    float  *Bt;$/;"	m	struct:l2_struct
Bt11_maxmin	sst.c	/^static float *Bt11_maxmin = NULL;$/;"	v	file:
Bt11unif1	sst.c	/^static float Bt11unif1 = 0.7;$/;"	v	file:
Bt11unif2	sst.c	/^static float Bt11unif2 = 1.2;$/;"	v	file:
Bt12_maxmin	sst.c	/^static float *Bt12_maxmin = NULL;$/;"	v	file:
Bt12unif1	sst.c	/^static float Bt12unif1 = 0.7;$/;"	v	file:
Bt12unif2	sst.c	/^static float Bt12unif2 = 1.2;$/;"	v	file:
Bt37_maxmin	sst.c	/^static float *Bt37_maxmin = NULL;$/;"	v	file:
Bt37_stdev	sst.c	/^static float *Bt37_stdev = NULL;$/;"	v	file:
Bt37unif1	sst.c	/^static float Bt37unif1 = 0.7;$/;"	v	file:
Bt37unif2	sst.c	/^static float Bt37unif2 = 1.2;$/;"	v	file:
Bt39_maxmin	sst.c	/^static float *Bt39_maxmin = NULL;$/;"	v	file:
Bt39unif1	sst.c	/^static float Bt39unif1 = 0.7;$/;"	v	file:
Bt39unif2	sst.c	/^static float Bt39unif2 = 1.2;$/;"	v	file:
Bt40_maxmin	sst.c	/^static float *Bt40_maxmin = NULL;$/;"	v	file:
Bt40unif1	sst.c	/^static float Bt40unif1 = 0.7;$/;"	v	file:
Bt40unif2	sst.c	/^static float Bt40unif2 = 1.2;$/;"	v	file:
Bt85_min	sst.c	/^static float *Bt85_min = NULL;$/;"	v	file:
Btmax	sst.c	/^static float Btmax = 37.0; \/* pre Nov 2012 was 33.0 *\/$/;"	v	file:
Btmax40	sst.c	/^static float Btmax40 = 35.0;$/;"	v	file:
Btmaxa	sst.c	/^static float Btmaxa = 37.0; \/* pre Nov 2012 was 35.0 *\/$/;"	v	file:
Btmin	sst.c	/^static float Btmin = -4.0;$/;"	v	file:
Btmina	sst.c	/^static float Btmina = -10.0;$/;"	v	file:
C	atmcor_soa.f	/^      REAL*8   xmi,ymr(1),C,/;"	v
CALFILE_UTILS_H	calfile_utils.h	3;"	d
CALIBRATE_VIIRS_H	calibrate_viirs.h	2;"	d
CALLOC	main_l1mapgen.c	75;"	d	file:
CAND_MISC	atmcor_soa.f	1006;"	c	function:COMPCANDDATA
CAND_MISC	atmcor_soa.f	2086;"	c	subroutine:MAIN_OPTIM_INOUT_PROC
CAND_MISC	atmcor_soa.f	698;"	c	subroutine:SPEC1GEOFIT
CARDER_FAIL	carder.c	43;"	d	file:
CASE2_FLAG	atmcor_soa.f	1684;"	c	function:FCN_TAUVV_DIFFTRAN
CASE2_FLAG	atmcor_soa.f	701;"	c	subroutine:SPEC1GEOFIT
CASE2_ITER	atmcor_soa.f	712;"	c	subroutine:SPEC1GEOFIT
CAT_BSi	l2prod.h	274;"	d
CAT_BT	l2prod.h	167;"	d
CAT_BT_11	l2prod.h	170;"	d
CAT_BT_12	l2prod.h	172;"	d
CAT_BT_39	l2prod.h	168;"	d
CAT_BT_40	l2prod.h	169;"	d
CAT_CI_cyano	l2prod.h	368;"	d
CAT_CI_noncyano	l2prod.h	369;"	d
CAT_CI_stumpf	l2prod.h	324;"	d
CAT_Es	l2prod.h	14;"	d
CAT_KPAR_lee	l2prod.h	166;"	d
CAT_KPAR_morel	l2prod.h	146;"	d
CAT_Kd_532	l2prod.h	165;"	d
CAT_Kd_KD2	l2prod.h	152;"	d
CAT_Kd_jamet	l2prod.h	284;"	d
CAT_Kd_lee	l2prod.h	110;"	d
CAT_Kd_morel	l2prod.h	144;"	d
CAT_Kd_mueller	l2prod.h	41;"	d
CAT_Kd_obpg	l2prod.h	111;"	d
CAT_Kd_rhos	l2prod.h	323;"	d
CAT_Kd_swim	l2prod.h	287;"	d
CAT_L_q	l2prod.h	71;"	d
CAT_L_u	l2prod.h	73;"	d
CAT_La	l2prod.h	9;"	d
CAT_Lr	l2prod.h	8;"	d
CAT_Lt	l2prod.h	7;"	d
CAT_Lt_unc	l2prod.h	252;"	d
CAT_Ltir	l2prod.h	173;"	d
CAT_Lw	l2prod.h	10;"	d
CAT_MCI_stumpf	l2prod.h	325;"	d
CAT_MPH_chl	l2prod.h	326;"	d
CAT_MPH_flags	l2prod.h	327;"	d
CAT_Rrs	l2prod.h	64;"	d
CAT_Rrs_unc	l2prod.h	254;"	d
CAT_Rrs_vc	l2prod.h	260;"	d
CAT_Sg_275_295_mlrc	l2prod.h	314;"	d
CAT_Sg_300_600_mlrc	l2prod.h	315;"	d
CAT_TLg	l2prod.h	37;"	d
CAT_Taua	l2prod.h	13;"	d
CAT_Zeu_morel	l2prod.h	148;"	d
CAT_Zhl_morel	l2prod.h	147;"	d
CAT_Zphotic_lee	l2prod.h	162;"	d
CAT_Zsd_gbr	l2prod.h	249;"	d
CAT_Zsd_morel	l2prod.h	150;"	d
CAT_a	l2prod.h	102;"	d
CAT_a_carder	l2prod.h	86;"	d
CAT_a_giop	l2prod.h	194;"	d
CAT_a_gsm	l2prod.h	95;"	d
CAT_a_las	l2prod.h	188;"	d
CAT_a_niwa	l2prod.h	219;"	d
CAT_a_pml	l2prod.h	181;"	d
CAT_a_qaa	l2prod.h	104;"	d
CAT_a_swim	l2prod.h	277;"	d
CAT_a_unc_giop	l2prod.h	200;"	d
CAT_acdom_giop	l2prod.h	357;"	d
CAT_acdom_unc_giop	l2prod.h	361;"	d
CAT_adg_carder	l2prod.h	89;"	d
CAT_adg_giop	l2prod.h	198;"	d
CAT_adg_gsm	l2prod.h	67;"	d
CAT_adg_mgiop	l2prod.h	268;"	d
CAT_adg_morel	l2prod.h	233;"	d
CAT_adg_pml	l2prod.h	186;"	d
CAT_adg_qaa	l2prod.h	108;"	d
CAT_adg_sma	l2prod.h	178;"	d
CAT_adg_soa	l2prod.h	117;"	d
CAT_adg_swim	l2prod.h	279;"	d
CAT_adg_unc_giop	l2prod.h	204;"	d
CAT_adgs_giop	l2prod.h	207;"	d
CAT_aer_model	l2prod.h	32;"	d
CAT_aer_ratio	l2prod.h	33;"	d
CAT_aerindex	l2prod.h	46;"	d
CAT_ag_412_mlrc	l2prod.h	313;"	d
CAT_alpha	l2prod.h	82;"	d
CAT_anap_giop	l2prod.h	358;"	d
CAT_anap_unc_giop	l2prod.h	362;"	d
CAT_angstrom	l2prod.h	40;"	d
CAT_aph_carder	l2prod.h	88;"	d
CAT_aph_giop	l2prod.h	197;"	d
CAT_aph_gsm	l2prod.h	97;"	d
CAT_aph_mgiop	l2prod.h	269;"	d
CAT_aph_pml	l2prod.h	185;"	d
CAT_aph_qaa	l2prod.h	107;"	d
CAT_aph_swim	l2prod.h	280;"	d
CAT_aph_unc_giop	l2prod.h	203;"	d
CAT_aphs_giop	l2prod.h	206;"	d
CAT_aw	l2prod.h	262;"	d
CAT_b_las	l2prod.h	189;"	d
CAT_b_qaa	l2prod.h	163;"	d
CAT_bb	l2prod.h	103;"	d
CAT_bb_carder	l2prod.h	87;"	d
CAT_bb_giop	l2prod.h	195;"	d
CAT_bb_gsm	l2prod.h	96;"	d
CAT_bb_las	l2prod.h	191;"	d
CAT_bb_niwa	l2prod.h	220;"	d
CAT_bb_pml	l2prod.h	183;"	d
CAT_bb_qaa	l2prod.h	106;"	d
CAT_bb_swim	l2prod.h	278;"	d
CAT_bb_unc_giop	l2prod.h	201;"	d
CAT_bbnap_giop	l2prod.h	360;"	d
CAT_bbnap_unc_giop	l2prod.h	364;"	d
CAT_bbp_carder	l2prod.h	101;"	d
CAT_bbp_giop	l2prod.h	196;"	d
CAT_bbp_gsm	l2prod.h	68;"	d
CAT_bbp_las	l2prod.h	192;"	d
CAT_bbp_mgiop	l2prod.h	267;"	d
CAT_bbp_pml	l2prod.h	184;"	d
CAT_bbp_qaa	l2prod.h	109;"	d
CAT_bbp_sma	l2prod.h	177;"	d
CAT_bbp_soa	l2prod.h	115;"	d
CAT_bbp_swim	l2prod.h	281;"	d
CAT_bbp_unc_giop	l2prod.h	202;"	d
CAT_bbph_giop	l2prod.h	359;"	d
CAT_bbph_unc_giop	l2prod.h	363;"	d
CAT_bbps_giop	l2prod.h	208;"	d
CAT_bbps_las	l2prod.h	218;"	d
CAT_bbw	l2prod.h	263;"	d
CAT_bbws	l2prod.h	275;"	d
CAT_bias_mean_sst	l2prod.h	308;"	d
CAT_bias_mean_sst4	l2prod.h	309;"	d
CAT_bias_mean_sst_triple	l2prod.h	334;"	d
CAT_bias_sst	l2prod.h	139;"	d
CAT_bias_sst4	l2prod.h	140;"	d
CAT_bias_sst_triple	l2prod.h	332;"	d
CAT_brdf	l2prod.h	45;"	d
CAT_c_las	l2prod.h	190;"	d
CAT_c_qaa	l2prod.h	164;"	d
CAT_calcite	l2prod.h	126;"	d
CAT_calcite_2b	l2prod.h	93;"	d
CAT_calcite_3b	l2prod.h	62;"	d
CAT_chisqr_giop	l2prod.h	211;"	d
CAT_chl_abi	l2prod.h	321;"	d
CAT_chl_carder	l2prod.h	90;"	d
CAT_chl_carder_emp	l2prod.h	161;"	d
CAT_chl_cdomcorr_morel	l2prod.h	250;"	d
CAT_chl_cdr	l2prod.h	285;"	d
CAT_chl_giop	l2prod.h	199;"	d
CAT_chl_gsm	l2prod.h	66;"	d
CAT_chl_hu	l2prod.h	251;"	d
CAT_chl_mgiop	l2prod.h	266;"	d
CAT_chl_morel	l2prod.h	232;"	d
CAT_chl_oc2	l2prod.h	35;"	d
CAT_chl_oc3	l2prod.h	75;"	d
CAT_chl_oc3c	l2prod.h	257;"	d
CAT_chl_oc4	l2prod.h	52;"	d
CAT_chl_oci	l2prod.h	255;"	d
CAT_chl_oci2	l2prod.h	258;"	d
CAT_chl_owterr	l2prod.h	243;"	d
CAT_chl_sma	l2prod.h	176;"	d
CAT_chl_soa	l2prod.h	114;"	d
CAT_chl_swim	l2prod.h	289;"	d
CAT_chl_unc_giop	l2prod.h	205;"	d
CAT_chl_vc	l2prod.h	261;"	d
CAT_class_34k_w_owmc	l2prod.h	247;"	d
CAT_class_k_owmc	l2prod.h	246;"	d
CAT_class_ward_owmc	l2prod.h	244;"	d
CAT_cloud_albedo	l2prod.h	56;"	d
CAT_counts_sst	l2prod.h	310;"	d
CAT_counts_sst4	l2prod.h	311;"	d
CAT_counts_sst_triple	l2prod.h	335;"	d
CAT_crat_mgiop	l2prod.h	271;"	d
CAT_depth	l2prod.h	36;"	d
CAT_detnum	l2prod.h	80;"	d
CAT_diatoms_hirata	l2prod.h	293;"	d
CAT_dinoflagellates_hirata	l2prod.h	298;"	d
CAT_dom_sma	l2prod.h	180;"	d
CAT_dpol	l2prod.h	92;"	d
CAT_edz_swim	l2prod.h	288;"	d
CAT_elev	l2prod.h	283;"	d
CAT_epsilon	l2prod.h	31;"	d
CAT_evi	l2prod.h	48;"	d
CAT_fitpar_giop	l2prod.h	212;"	d
CAT_fitpar_mgiop	l2prod.h	272;"	d
CAT_flags_carder	l2prod.h	91;"	d
CAT_flags_giop	l2prod.h	215;"	d
CAT_flags_habs	l2prod.h	349;"	d
CAT_flags_niwa	l2prod.h	221;"	d
CAT_flags_qaa	l2prod.h	217;"	d
CAT_flags_sst	l2prod.h	122;"	d
CAT_flags_sst4	l2prod.h	123;"	d
CAT_flags_sst_triple	l2prod.h	330;"	d
CAT_flh	l2prod.h	63;"	d
CAT_fqy	l2prod.h	100;"	d
CAT_fsat	l2prod.h	85;"	d
CAT_fsol	l2prod.h	58;"	d
CAT_glint_coef	l2prod.h	43;"	d
CAT_greenalgae_hirata	l2prod.h	294;"	d
CAT_height	l2prod.h	60;"	d
CAT_humidity	l2prod.h	27;"	d
CAT_iCDOM_morel	l2prod.h	230;"	d
CAT_ice_frac	l2prod.h	237;"	d
CAT_ipar	l2prod.h	99;"	d
CAT_iter_giop	l2prod.h	209;"	d
CAT_iter_gsm	l2prod.h	112;"	d
CAT_l2_flags	l2prod.h	34;"	d
CAT_mRrs_giop	l2prod.h	214;"	d
CAT_microplankton_abundanceksm	l2prod.h	337;"	d
CAT_microplankton_hirata	l2prod.h	292;"	d
CAT_microplankton_ratioksm	l2prod.h	345;"	d
CAT_microplankton_uitz	l2prod.h	303;"	d
CAT_microplankton_volumeksm	l2prod.h	341;"	d
CAT_mod_rrs_qaa	l2prod.h	187;"	d
CAT_ms_epsilon	l2prod.h	236;"	d
CAT_mside	l2prod.h	81;"	d
CAT_mwind	l2prod.h	54;"	d
CAT_myprod1	l2prod.h	128;"	d
CAT_myprod10	l2prod.h	137;"	d
CAT_myprod2	l2prod.h	129;"	d
CAT_myprod3	l2prod.h	130;"	d
CAT_myprod4	l2prod.h	131;"	d
CAT_myprod5	l2prod.h	132;"	d
CAT_myprod6	l2prod.h	133;"	d
CAT_myprod7	l2prod.h	134;"	d
CAT_myprod8	l2prod.h	135;"	d
CAT_myprod9	l2prod.h	136;"	d
CAT_nLw	l2prod.h	11;"	d
CAT_nLw_unc	l2prod.h	253;"	d
CAT_nanoplankton_abundanceksm	l2prod.h	338;"	d
CAT_nanoplankton_hirata	l2prod.h	299;"	d
CAT_nanoplankton_ratioksm	l2prod.h	346;"	d
CAT_nanoplankton_uitz	l2prod.h	304;"	d
CAT_nanoplankton_volumeksm	l2prod.h	342;"	d
CAT_ndvi	l2prod.h	42;"	d
CAT_no2_frac	l2prod.h	84;"	d
CAT_no2_strat	l2prod.h	51;"	d
CAT_no2_tropo	l2prod.h	30;"	d
CAT_npix_mgiop	l2prod.h	270;"	d
CAT_num_iter	l2prod.h	44;"	d
CAT_nw	l2prod.h	264;"	d
CAT_opp_bbp	l2prod.h	354;"	d
CAT_opp_befa	l2prod.h	317;"	d
CAT_opp_cbpm2	l2prod.h	319;"	d
CAT_opp_eppley	l2prod.h	318;"	d
CAT_opp_mld	l2prod.h	351;"	d
CAT_opp_par	l2prod.h	353;"	d
CAT_opp_zno3	l2prod.h	352;"	d
CAT_opt_siop_giop	l2prod.h	365;"	d
CAT_owt	l2prod.h	240;"	d
CAT_owtd	l2prod.h	242;"	d
CAT_owtn	l2prod.h	241;"	d
CAT_ozone	l2prod.h	24;"	d
CAT_pCDOM_morel	l2prod.h	231;"	d
CAT_par	l2prod.h	38;"	d
CAT_pcentcdm_soa	l2prod.h	118;"	d
CAT_picoeukaryotes_hirata	l2prod.h	300;"	d
CAT_picoplankton_abundanceksm	l2prod.h	339;"	d
CAT_picoplankton_hirata	l2prod.h	295;"	d
CAT_picoplankton_ratioksm	l2prod.h	347;"	d
CAT_picoplankton_uitz	l2prod.h	305;"	d
CAT_picoplankton_volumeksm	l2prod.h	343;"	d
CAT_pixnum	l2prod.h	79;"	d
CAT_poc_stramski_443	l2prod.h	174;"	d
CAT_poc_stramski_490	l2prod.h	175;"	d
CAT_polcor	l2prod.h	74;"	d
CAT_pressure	l2prod.h	26;"	d
CAT_prochlorococcus_hirata	l2prod.h	297;"	d
CAT_prokaryotes_hirata	l2prod.h	296;"	d
CAT_prymnesiophytes_hirata	l2prod.h	301;"	d
CAT_qual_sst	l2prod.h	124;"	d
CAT_qual_sst4	l2prod.h	125;"	d
CAT_qual_sst_triple	l2prod.h	331;"	d
CAT_relaz	l2prod.h	216;"	d
CAT_rho_cirrus	l2prod.h	222;"	d
CAT_rhom	l2prod.h	143;"	d
CAT_rhos	l2prod.h	47;"	d
CAT_rhot	l2prod.h	59;"	d
CAT_rrsdiff_giop	l2prod.h	210;"	d
CAT_scattang	l2prod.h	234;"	d
CAT_sena	l2prod.h	22;"	d
CAT_senz	l2prod.h	23;"	d
CAT_slot	l2prod.h	78;"	d
CAT_smoke	l2prod.h	49;"	d
CAT_sola	l2prod.h	21;"	d
CAT_solz	l2prod.h	20;"	d
CAT_sssref	l2prod.h	121;"	d
CAT_sst	l2prod.h	65;"	d
CAT_sst4	l2prod.h	113;"	d
CAT_sst_treesum	l2prod.h	371;"	d
CAT_sst_triple	l2prod.h	329;"	d
CAT_sstref	l2prod.h	70;"	d
CAT_stdv_sst	l2prod.h	141;"	d
CAT_stdv_sst4	l2prod.h	142;"	d
CAT_stdv_sst_triple	l2prod.h	333;"	d
CAT_tLf	l2prod.h	12;"	d
CAT_t_h2o	l2prod.h	69;"	d
CAT_t_o2	l2prod.h	57;"	d
CAT_t_sen	l2prod.h	16;"	d
CAT_t_sol	l2prod.h	15;"	d
CAT_tg_sen	l2prod.h	19;"	d
CAT_tg_sol	l2prod.h	18;"	d
CAT_tindx_morel	l2prod.h	151;"	d
CAT_tindx_shi	l2prod.h	145;"	d
CAT_tsm_swim	l2prod.h	290;"	d
CAT_vLt	l2prod.h	154;"	d
CAT_vLw	l2prod.h	156;"	d
CAT_v_soa	l2prod.h	120;"	d
CAT_vbsat	l2prod.h	158;"	d
CAT_vbtgt	l2prod.h	159;"	d
CAT_vgain	l2prod.h	153;"	d
CAT_vnLw	l2prod.h	157;"	d
CAT_vtLw	l2prod.h	155;"	d
CAT_w0_sma	l2prod.h	179;"	d
CAT_w0_soa	l2prod.h	119;"	d
CAT_water_vapor	l2prod.h	28;"	d
CAT_windangle	l2prod.h	53;"	d
CAT_windspeed	l2prod.h	25;"	d
CAT_zwind	l2prod.h	55;"	d
CELL	ice_mask.c	41;"	d	file:
CFLAG_BLEND	carder.c	48;"	d	file:
CFLAG_CHLINC	carder.c	57;"	d	file:
CFLAG_DEFAULT	carder.c	47;"	d	file:
CFLAG_FAIL	carder.c	46;"	d	file:
CFLAG_GLOBAL	carder.c	53;"	d	file:
CFLAG_HIPKG	carder.c	52;"	d	file:
CFLAG_LO412	carder.c	55;"	d	file:
CFLAG_LO555	carder.c	56;"	d	file:
CFLAG_PKG	carder.c	51;"	d	file:
CFLAG_UNPKG	carder.c	50;"	d	file:
CGOLD	numerical.c	252;"	d	file:
CGOLD	numerical.c	323;"	d	file:
CHESAPEAKE	gsm.c	32;"	d	file:
CHLFAIL	l2_flags.h	24;"	d
CHLORA	bin_climatology.c	11;"	d	file:
CHLWARN	l2_flags.h	30;"	d
CHL_MAX	l12_parms.h	71;"	d
CHL_MIN	l12_parms.h	70;"	d
CHNLRATIO	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE CHNLRATIO$/;"	s
CIR	l1b_viirs_nc.c	/^enum bandtypes { RSB, TEB, CIR };$/;"	e	enum:bandtypes	file:
CIRRUS	l1_viirs_h5.c	55;"	d	file:
CIR_1KM	l1_hmodis_hdf.c	/^    CIR_1KM,     \/*< Band 26             *\/$/;"	e	enum:L1B_SDS	file:
CLEAR_SMA_PROD	soa_sma_utils.f	/^      SUBROUTINE CLEAR_SMA_PROD$/;"	s
CLEAR_SOA_PROD	soa_sma_utils.f	/^      SUBROUTINE CLEAR_SOA_PROD$/;"	s
CLOCKWISE	mipoly.h	57;"	d
CLOSEINFILE	atrem_cubeio.f90	/^      SUBROUTINE CLOSEINFILE(/;"	s	module:cubeio
CLOSEOUTFILE	atrem_cubeio.f90	/^      SUBROUTINE CLOSEOUTFILE(/;"	s	module:cubeio
CLOSEVAPFILE	atrem_cubeio.f90	/^      SUBROUTINE CLOSEVAPFILE(/;"	s	module:cubeio
CLOUD	l2_flags.h	18;"	d
CMD_ARGS	main_lonlat2pixline.c	59;"	d	file:
CO2_BIT	l12_parms.h	91;"	d
COASTZ	l2_flags.h	15;"	d
COCCOLITH	l2_flags.h	19;"	d
COMDIFF	atmcor_soa.f	5756;"	c	subroutine:READ_MODEL_DATA
COMDIFF	atmcor_soa.f	688;"	c	subroutine:SPEC1GEOFIT
COMDIFF_MISC	atmcor_soa.f	1144;"	c	subroutine:DRV_TAUVV_ZXMWD
COMDIFF_MISC	atmcor_soa.f	1688;"	c	function:FCN_TAUVV_DIFFTRAN
COMDIFF_MISC	atmcor_soa.f	689;"	c	subroutine:SPEC1GEOFIT
COMPCANDDATA	atmcor_soa.f	/^      LOGICAL FUNCTION COMPCANDDATA /;"	f
COMPHASE	atmcor_soa.f	1138;"	c	subroutine:DRV_TAUVV_ZXMWD
COMPHASE	atmcor_soa.f	1681;"	c	function:FCN_TAUVV_DIFFTRAN
COMPHASE	atmcor_soa.f	5754;"	c	subroutine:READ_MODEL_DATA
COMPHASE	atmcor_soa.f	686;"	c	subroutine:SPEC1GEOFIT
COMRTELUT	atmcor_soa.f	5755;"	c	subroutine:READ_MODEL_DATA
CONST1	COMMONS_INC.f	/^      REAL CONST1$/;"	v
COPYNAME	ice_mask.c	159;"	d	file:
COUNTERCLOCKWISE	mipoly.h	58;"	d
CREATOR_EMAIL	l12_proto.h	75;"	d
CREATOR_NAME	l12_proto.h	74;"	d
CREATOR_URL	l12_proto.h	76;"	d
CROSSCAL	calfile_utils.h	/^typedef enum {DET2DET, CROSSCAL, BINMATCH} caltype;$/;"	e	enum:__anon23
CT_NONE	gc.h	31;"	d
CT_PIXMAP	gc.h	32;"	d
CT_REGION	gc.h	33;"	d
CT_UNSORTED	gc.h	34;"	d
CT_YSORTED	gc.h	35;"	d
CT_YXBANDED	gc.h	37;"	d
CT_YXSORTED	gc.h	36;"	d
CUBSPLN	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE CUBSPLN(/;"	s
C_IN_K	met_cvt.h	36;"	d
CalcViewAngle	l1_octs_hdf.c	/^int CalcViewAngle(float32 lon1, float32 lat1, float32 pos[3],$/;"	f
CarderRecNum	carder.c	/^static int    CarderRecNum = -99;$/;"	v	file:
CheckNULL	bioOptBandShift.c	/^void CheckNULL(void *ptr,char* ptrName,int lineNum,char* filename)$/;"	f
ClockWise	mipoly.h	/^     int ClockWise;        \/* flag for winding number rule       *\/$/;"	m	struct:_EdgeTableEntry
ConfidentClear	cloud_flag.c	7;"	d	file:
ConfidentCloudy	cloud_flag.c	4;"	d	file:
CreateScanData	l1_hdf_generic_write.c	/^int32 CreateScanData(int32 np, int32 nb, int32 nscan, $/;"	f
CtoK	sst.c	36;"	d	file:
DATPATH	COMMONS_INC.f	/^      CHARACTER*4096 DATPATH$/;"	v
DAYANDNIGHT	l12_parms.h	138;"	d
DAYANDNIGHT	scene_meta.h	8;"	d
DAYSCENE	l12_parms.h	136;"	d
DAYSCENE	scene_meta.h	6;"	d
DAY_MODE	main_l1info.c	55;"	d	file:
DDXPointPtr	misc.h	/^typedef struct _DDXPoint *DDXPointPtr;$/;"	t	typeref:struct:_DDXPoint
DDXPointRec	miscstruct.h	/^} DDXPointRec;$/;"	t	typeref:struct:_DDXPoint
DEBUG	covariance_inversion.c	13;"	d	file:
DEBUG	fuzzy_func_v3.c	24;"	d	file:
DEBUG	owt.c	5;"	d	file:
DEFAULT_CFG	pml_iop_config.h	8;"	d
DEFAULT_CHL	l12_parms.h	69;"	d
DEFAULT_COORD_VALUE	main_l1info.c	52;"	d	file:
DEFAULT_DAYNIGHT_MODE	main_l1info.c	54;"	d	file:
DEFAULT_SPACECRAFT_DIRECTION	main_l1info.c	35;"	d	file:
DEG_TO_RAD	jplaeriallib.h	17;"	d
DEL_DAY	viirs_utls.c	48;"	d	file:
DEM_HEIGHT	l12_parms.h	79;"	d
DEM_WIDTH	l12_parms.h	78;"	d
DENOMINATOR	l1_viirs_h5.c	22;"	d	file:
DESCENDING_TRACK	main_l1info.c	37;"	d	file:
DET2DET	calfile_utils.h	/^typedef enum {DET2DET, CROSSCAL, BINMATCH} caltype;$/;"	e	enum:__anon23
DFCNLSQ_GRAD	atmcor_soa.f	/^      LOGICAL FUNCTION DFCNLSQ_GRAD /;"	f
DGS97	atmcor_soa.f	/^        SUBROUTINE DGS97(/;"	s
DGS97_CASE2	atmcor_soa.f	/^        SUBROUTINE DGS97_CASE2 /;"	s
DIMNAMELEN	l2prod_struc.h	7;"	d
DLN	COMMONS_INC.f	/^      INTEGER DLN$/;"	v
DLT_MED	COMMONS_INC.f	/^      REAL DLT_MED /;"	v
DMAX	nrutil.h	11;"	d
DMIN	nrutil.h	15;"	d
DPDLWN_GS97	atmcor_soa.f	/^      SUBROUTINE DPDLWN_GS97 /;"	s
DPDR_MIMR	atmcor_soa.f	/^      SUBROUTINE DPDR_MIMR /;"	s
DPHI_NS	niwa_iop.c	40;"	d	file:
DRAWABLE_SERIAL_BITS	gc.h	49;"	d
DRGLCTN	atmcor_soa.f	/^      SUBROUTINE DRGLCTN(/;"	s
DRGPD3P	atmcor_soa.f	/^      SUBROUTINE DRGPD3P(/;"	s
DRGPLNL	atmcor_soa.f	/^      SUBROUTINE DRGPLNL(/;"	s
DRV_SPECOPT_LBFGSB	atmcor_soa.f	/^      SUBROUTINE DRV_SPECOPT_LBFGSB(/;"	s
DRV_TAUVV_ZXMWD	atmcor_soa.f	/^      SUBROUTINE DRV_TAUVV_ZXMWD(/;"	s
DSCENDING	scene_meta.h	12;"	d
DSQR	nrutil.h	8;"	d
DTBRDF	l12_parms.h	87;"	d
DTNTHETA	aerosol.c	56;"	d	file:
DWAVLN	COMMONS_INC.f	/^      REAL VSTART, VEND, DWAVLN /;"	v
DWAVNO	COMMONS_INC.f	/^      REAL DWAVNO$/;"	v
DWVAVR	COMMONS_INC.f	/^      REAL DWVAVR /;"	v
DZXMWH_WRITE	atmcor_soa.f	/^      SUBROUTINE DZXMWH_WRITE /;"	s
D_WATERPAR	atmcor_soa.f	4779;"	c	subroutine:DPDLWN_GS97
D_WATERPAR	atmcor_soa.f	5419;"	c	subroutine:DGS97
D_WATERPAR	atmcor_soa.f	5504;"	c	subroutine:DGS97_CASE2
D_WATERPAR	atmcor_soa.f	5876;"	c	subroutine:INIT_WATER_PAR1
D_WATERPAR	atmcor_soa.f	6186;"	c	subroutine:INIT_WATER_PAR2
DevUnion	miscstruct.h	/^} DevUnion;$/;"	t	typeref:union:_DevUnion
E2	ice_mask.c	39;"	d	file:
EARTH_RADIUS_EQUATORIAL	main_l1info.c	59;"	d	file:
EC	ice_mask.c	38;"	d	file:
ELINT_FLOAT32_FILL	l1_viirs_h5.h	24;"	d
ELINT_UINT16_FILL	l1_viirs_h5.h	25;"	d
EOSMETALEN	getformat.c	26;"	d	file:
EPS	fuzzy_func_v3.c	26;"	d	file:
EPS	gcf.c	34;"	d	file:
EPS	gcf.c	3;"	d	file:
EPS	gser.c	34;"	d	file:
EPS	gser.c	3;"	d	file:
ERR_FLOAT32_FILL	l1_viirs_h5.h	22;"	d
ERR_UINT16_FILL	l1_viirs_h5.h	23;"	d
EVALUATEEDGEEVENODD	mipoly.h	139;"	d
EVALUATEEDGEWINDING	mipoly.h	116;"	d
EdgeTable	mipoly.h	/^} EdgeTable;$/;"	t	typeref:struct:__anon39
EdgeTableEntry	mipoly.h	/^} EdgeTableEntry;$/;"	t	typeref:struct:_EdgeTableEntry
EstimateDobson	par_utils.c	/^float EstimateDobson(int32_t year, int32_t month, int32_t day, float lat) {$/;"	f
EstimateWatVap	par_utils.c	/^float EstimateWatVap(int32_t year, int32_t month, int32_t day, float lat) {$/;"	f
F0	atmcor_soa.f	/^      REAL     aerwatRho(NLAMBDA),F0(/;"	v
FACDLT	COMMONS_INC.f	/^      REAL FACDLT /;"	v
FALSE	main_l1info.c	47;"	d	file:
FALSE	misc.h	62;"	d
FATAL_ERROR	l12_parms.h	24;"	d
FBTDETAVG	filter.h	13;"	d
FCLEAN	filter.h	10;"	d
FCN_TAUVV_DIFFTRAN	atmcor_soa.f	/^      LOGICAL FUNCTION FCN_TAUVV_DIFFTRAN /;"	f
FCOMPLEX	nr.h	/^typedef struct FCOMPLEX {float r,i;} fcomplex;$/;"	s
FDILATE	filter.h	4;"	d
FEPSMEAN	filter.h	9;"	d
FILESIZE_ERROR	l12_parms.h	112;"	d
FILTER	l2_flags.h	35;"	d
FILTMAX	l12_parms.h	13;"	d
FINDMATCH	atrem_app_refl_plus_gas_removal_l2.f90	/^      INTEGER FUNCTION FINDMATCH(/;"	f
FINSTMAX	atrem_corl1.h	19;"	d
FINSTR	COMMONS_INC.f	/^      REAL    FINSTR(/;"	v
FINSTR_WAVNO	COMMONS_INC.f	/^      REAL    FINSTR_WAVNO(/;"	v
FIRST_KNEE	l1a_seawifs.c	18;"	d	file:
FITLOWERCUTOFFABSOLUTE	globals.h	34;"	d
FITSTRUCT	amoeba.h	/^} FITSTRUCT;$/;"	t	typeref:struct:__anon1
FITUPPERCUTOFFPERCENT	globals.h	35;"	d
FIXANGSTROM	l12_parms.h	52;"	d
FIXANGSTROMNIR	l12_parms.h	53;"	d
FIXAOT	l12_parms.h	54;"	d
FIXMODPAIR	l12_parms.h	50;"	d
FIXMODPAIRNIR	l12_parms.h	51;"	d
FL	l1_octs_hdf.c	40;"	d	file:
FLAGMASK	main_l3gen.cpp	22;"	d	file:
FLATBINARY	main_l1brsgen.c	41;"	d	file:
FLOAT32	l1_imgscale.c	4;"	d	file:
FLOAT32	main_l1bgen.c	36;"	d	file:
FLOAT32	main_l1brsgen.c	35;"	d	file:
FLOAT32	main_l1mapgen.c	62;"	d	file:
FLTMEAN	filter.h	5;"	d
FLTMED	filter.h	6;"	d
FLTRIQMEAN	filter.h	11;"	d
FLTRMEAN	filter.h	7;"	d
FLTRMED	filter.h	8;"	d
FLTRREJECT	filter.h	14;"	d
FMAX	nrutil.h	19;"	d
FMIN	nrutil.h	23;"	d
FMT_AVIRIS	filehandle.h	/^    FMT_AVIRIS,$/;"	e	enum:fmt_codes
FMT_CLASSAVHRR	filehandle.h	/^    FMT_CLASSAVHRR,$/;"	e	enum:fmt_codes
FMT_CZCSL1A	filehandle.h	/^    FMT_CZCSL1A,$/;"	e	enum:fmt_codes
FMT_GOCIL1B	filehandle.h	/^    FMT_GOCIL1B,$/;"	e	enum:fmt_codes
FMT_HICOL1B	filehandle.h	/^    FMT_HICOL1B,$/;"	e	enum:fmt_codes
FMT_HMODISL1B	filehandle.h	/^    FMT_HMODISL1B,	\/\/ MODIS L1B (hdf4, all bands)$/;"	e	enum:fmt_codes
FMT_L1BNCDF	filehandle.h	/^    FMT_L1BNCDF,$/;"	e	enum:fmt_codes
FMT_L1HDF	filehandle.h	/^    FMT_L1HDF,$/;"	e	enum:fmt_codes
FMT_L1XCAL	filehandle.h	/^    FMT_L1XCAL,$/;"	e	enum:fmt_codes
FMT_L2HDF	filehandle.h	/^    FMT_L2HDF,$/;"	e	enum:fmt_codes
FMT_L2NCDF	filehandle.h	/^    FMT_L2NCDF,$/;"	e	enum:fmt_codes
FMT_L3BIN	filehandle.h	/^    FMT_L3BIN,$/;"	e	enum:fmt_codes
FMT_L3MAP	filehandle.h	/^    FMT_L3MAP,$/;"	e	enum:fmt_codes
FMT_MERISCC	filehandle.h	/^    FMT_MERISCC,$/;"	e	enum:fmt_codes
FMT_MERISL1B	filehandle.h	/^    FMT_MERISL1B,$/;"	e	enum:fmt_codes
FMT_MERISL2	filehandle.h	/^    FMT_MERISL2,$/;"	e	enum:fmt_codes
FMT_MODISGEO	filehandle.h	/^    FMT_MODISGEO,	\/\/ MODIS Geolocation (hdf4)$/;"	e	enum:fmt_codes
FMT_MODISL1B	filehandle.h	/^    FMT_MODISL1B,	\/\/ MODIS L1B (hdf4, ocean-color band subset)$/;"	e	enum:fmt_codes
FMT_MOSL1B	filehandle.h	/^    FMT_MOSL1B,$/;"	e	enum:fmt_codes
FMT_OCM2L1B	filehandle.h	/^    FMT_OCM2L1B,$/;"	e	enum:fmt_codes
FMT_OCML1B	filehandle.h	/^    FMT_OCML1B,$/;"	e	enum:fmt_codes
FMT_OCML1BDB	filehandle.h	/^    FMT_OCML1BDB,$/;"	e	enum:fmt_codes
FMT_OCTSL1A	filehandle.h	/^    FMT_OCTSL1A,$/;"	e	enum:fmt_codes
FMT_OCTSL1B	filehandle.h	/^    FMT_OCTSL1B,$/;"	e	enum:fmt_codes
FMT_OLCI	filehandle.h	/^    FMT_OLCI,$/;"	e	enum:fmt_codes
FMT_OLIL1B	filehandle.h	/^    FMT_OLIL1B,$/;"	e	enum:fmt_codes
FMT_ORCA	filehandle.h	/^    FMT_ORCA,$/;"	e	enum:fmt_codes
FMT_OSMIL1A	filehandle.h	/^    FMT_OSMIL1A,$/;"	e	enum:fmt_codes
FMT_PRISM	filehandle.h	/^    FMT_PRISM,$/;"	e	enum:fmt_codes
FMT_SEAWIFSL1A	filehandle.h	/^    FMT_SEAWIFSL1A,$/;"	e	enum:fmt_codes
FMT_VIIRSGEO	filehandle.h	/^    FMT_VIIRSGEO,	\/\/ VIIRS Geolocation (hdf5)$/;"	e	enum:fmt_codes
FMT_VIIRSGEONC	filehandle.h	/^    FMT_VIIRSGEONC,	\/\/ VIIRS Geolocation (NetCDF4)$/;"	e	enum:fmt_codes
FMT_VIIRSL1A	filehandle.h	/^    FMT_VIIRSL1A,	\/\/ VIIRS Level-1A (NetCDF4)$/;"	e	enum:fmt_codes
FMT_VIIRSL1B	filehandle.h	/^    FMT_VIIRSL1B,	\/\/ VIIRS M-band (hdf5)$/;"	e	enum:fmt_codes
FMT_VIIRSL1BNC	filehandle.h	/^    FMT_VIIRSL1BNC,	\/\/ VIIRS M-band (NetCDF4)$/;"	e	enum:fmt_codes
FOQMOREL	l12_parms.h	86;"	d
FORWARD	filehandle.h	12;"	d
FPMIN	fuzzy_func_v3.c	27;"	d	file:
FPMIN	gcf.c	35;"	d	file:
FPMIN	gcf.c	4;"	d	file:
FREE_ARG	fuzzy_func_v3.c	32;"	d	file:
FREE_ARG	nrutil.c	5;"	d	file:
FRESNSEN	l12_parms.h	84;"	d
FRESNSOL	l12_parms.h	85;"	d
FSTLIGHT	filter.h	12;"	d
FTEST	filter.h	15;"	d
FUNCT_A_B_C_D_FOURIER_INTERPOLATE	atmcor_soa.f	/^        SUBROUTINE FUNCT_A_B_C_D_FOURIER_INTERPOLATE$/;"	s
FWHM_WAVNO	COMMONS_INC.f	/^      REAL    FINSTR_WAVNO(5000,NP_MED), FWHM_WAVNO(/;"	v
F_INBAND	atmcor_soa.f	1153;"	c	subroutine:DRV_TAUVV_ZXMWD
F_INBAND	atmcor_soa.f	1690;"	c	function:FCN_TAUVV_DIFFTRAN
Fo	l1_struc.h	/^    float       *Fo    ;$/;"	m	struct:l1_struct
Fo	l2_struc.h	/^    float  *Fo; \/\/ Extraterrestrial irradiance$/;"	m	struct:l2_struct
Fobar	l1_hmodis_hdf.c	/^static float *Fobar;$/;"	v	file:
Fobar	l1_oli.c	/^static float *Fobar;$/;"	v	file:
Fobar	l1_struc.h	/^    float       *Fobar ;$/;"	m	struct:l1_struct
Fobar	l1_viirs_h5.c	/^static float *Fobar;$/;"	v	file:
Fobar	l1_viirs_nc.c	/^static float *Fobar; \/\/ reflectance to radiance conversion factors$/;"	v	file:
Fobar	l1b_viirs_nc.c	/^static float *Fobar; \/\/ reflectance to radiance conversion factors$/;"	v	file:
Fobar	l2_struc.h	/^    float  *Fobar; \/\/ Mean Extraterrestrial irradiance$/;"	m	struct:l2_struct
Fonom	l1_struc.h	/^    float       *Fonom ;$/;"	m	struct:l1_struct
Fonom	l2_struc.h	/^    float  *Fonom; \/\/ Nominal 11nm F0$/;"	m	struct:l2_struct
GAC_PIXEL_NUM	l1a_seawifs.c	14;"	d	file:
GCExtensionInterest	gc.h	47;"	d
GCInterestPtr	gc.h	/^typedef struct _GCInterest *GCInterestPtr;$/;"	t	typeref:struct:_GCInterest
GCPtr	gc.h	/^typedef struct _GC    *GCPtr;$/;"	t	typeref:struct:_GC
GCQREASON_CHANGE	gc.h	40;"	d
GCQREASON_COPY_DST	gc.h	42;"	d
GCQREASON_COPY_SRC	gc.h	41;"	d
GCQREASON_DESTROY	gc.h	43;"	d
GCQREASON_VALIDATE	gc.h	39;"	d
GC_CALL_VALIDATE_BIT	gc.h	46;"	d
GC_CHANGE_SERIAL_BIT	gc.h	45;"	d
GC_H	gc.h	28;"	d
GENBUFSIZ	l1a_seawifs.c	20;"	d	file:
GENERIC_OUT	soa_sma_utils.f	122;"	c	subroutine:CLEAR_SOA_PROD
GENERIC_OUT	soa_sma_utils.f	160;"	c	subroutine:CLEAR_SMA_PROD
GENERIC_OUT	soa_sma_utils.f	20;"	c	subroutine:GET_SOA_PROD
GENERIC_OUT	soa_sma_utils.f	75;"	c	subroutine:GET_SMA_PROD
GEOBOX_INC	l2_generic.c	82;"	d	file:
GEOMETRY	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE GEOMETRY$/;"	s
GEOMETRY1	atrem_app_refl_plus_gas_removal_l2.f90	818;"	c	subroutine:GEOMETRY
GEOMETRY2	atrem_app_refl_plus_gas_removal_l2.f90	1046;"	c	subroutine:INIT_SPECCAL
GEOMETRY2	atrem_app_refl_plus_gas_removal_l2.f90	1698;"	c	subroutine:TRAN_TABLE
GEOMETRY2	atrem_app_refl_plus_gas_removal_l2.f90	819;"	c	subroutine:GEOMETRY
GEOMETRY3	atrem_app_refl_plus_gas_removal_l2.f90	1062;"	c	subroutine:INIT_SPECCAL
GEOMETRY3	atrem_app_refl_plus_gas_removal_l2.f90	1699;"	c	subroutine:TRAN_TABLE
GEOMETRY3	atrem_app_refl_plus_gas_removal_l2.f90	825;"	c	subroutine:GEOMETRY
GEOMETRY4	atrem_app_refl_plus_gas_removal_l2.f90	1063;"	c	subroutine:INIT_SPECCAL
GEOMETRY4	atrem_app_refl_plus_gas_removal_l2.f90	1700;"	c	subroutine:TRAN_TABLE
GEOMETRY4	atrem_app_refl_plus_gas_removal_l2.f90	826;"	c	subroutine:GEOMETRY
GEOMETRY_L2GEN	COMMONS_INC.f	103;"	c
GEO_ANGLES	l1_hmodis_hdf.c	/^    GEO_ANGLES,     \/*< attitude_angles *\/$/;"	e	enum:REF_SDS	file:
GEO_COEFFS	l1_hmodis_hdf.c	/^enum GEO_COEFFS {$/;"	g	file:
GEO_GRP	l1b_viirs_nc.c	/^static const char* GEO_GRP = "geolocation_data";$/;"	v	file:
GEO_HGT	l1_hmodis_hdf.c	/^    GEO_HGT,     \/*< Height        *\/$/;"	e	enum:GEO_SDS	file:
GEO_HGT	l1b_viirs_nc.c	/^    GEO_HGT,     \/*< short height         (-> float) *\/$/;"	e	enum:geo_var	file:
GEO_LAT	l1_hmodis_hdf.c	/^    GEO_LAT,     \/*< Latitude      *\/$/;"	e	enum:GEO_SDS	file:
GEO_LAT	l1b_viirs_nc.c	/^    GEO_LAT,     \/*< float latitude        *\/$/;"	e	enum:geo_var	file:
GEO_LON	l1_hmodis_hdf.c	/^    GEO_LON,     \/*< Longitude     *\/$/;"	e	enum:GEO_SDS	file:
GEO_LON	l1b_viirs_nc.c	/^    GEO_LON,     \/*< float longitude       *\/$/;"	e	enum:geo_var	file:
GEO_MNORM	l1_hmodis_hdf.c	/^    GEO_MNORM,      \/*< T_inst2ECR      *\/$/;"	e	enum:REF_SDS	file:
GEO_MSIDE	l1_hmodis_hdf.c	/^    GEO_MSIDE,      \/*< Mirror side     *\/$/;"	e	enum:REF_SDS	file:
GEO_NUM_COEFFS	l1_hmodis_hdf.c	/^    GEO_NUM_COEFFS \/*< last entry = number of scale attributes *\/$/;"	e	enum:GEO_COEFFS	file:
GEO_NUM_SDS	l1_hmodis_hdf.c	/^    GEO_NUM_SDS  \/*< last entry = number of SDSs *\/$/;"	e	enum:GEO_SDS	file:
GEO_QUAL	l1b_viirs_nc.c	/^    GEO_QUAL,    \/*< ubyte quality_flag    *\/$/;"	e	enum:geo_var	file:
GEO_SCALE	l1_hmodis_hdf.c	/^    GEO_SCALE,     \/*< scale_factor *\/$/;"	e	enum:GEO_COEFFS	file:
GEO_SDS	l1_hmodis_hdf.c	/^enum GEO_SDS {$/;"	g	file:
GEO_SENA	l1_hmodis_hdf.c	/^    GEO_SENA,    \/*< SensorAzimuth *\/$/;"	e	enum:GEO_SDS	file:
GEO_SENA	l1b_viirs_nc.c	/^    GEO_SENA,    \/*< short sensor_azimuth (-> float) *\/$/;"	e	enum:geo_var	file:
GEO_SENZ	l1_hmodis_hdf.c	/^    GEO_SENZ,    \/*< SensorZenith  *\/$/;"	e	enum:GEO_SDS	file:
GEO_SENZ	l1b_viirs_nc.c	/^    GEO_SENZ,    \/*< short sensor_zenith  (-> float) *\/$/;"	e	enum:geo_var	file:
GEO_SOLA	l1_hmodis_hdf.c	/^    GEO_SOLA,    \/*< SolarAzimuth  *\/$/;"	e	enum:GEO_SDS	file:
GEO_SOLA	l1b_viirs_nc.c	/^    GEO_SOLA,    \/*< short solar_azimuth  (-> float) *\/$/;"	e	enum:geo_var	file:
GEO_SOLZ	l1_hmodis_hdf.c	/^    GEO_SOLZ,    \/*< SolarZenith   *\/$/;"	e	enum:GEO_SDS	file:
GEO_SOLZ	l1b_viirs_nc.c	/^    GEO_SOLZ,    \/*< short solar_zenith   (-> float) *\/$/;"	e	enum:geo_var	file:
GEO_TAISEC	l1_hmodis_hdf.c	/^    GEO_TAISEC,     \/*< EV start time   *\/$/;"	e	enum:REF_SDS	file:
GETINPUT1	atrem_app_refl_plus_gas_removal_l2.f90	1040;"	c	subroutine:INIT_SPECCAL
GETINPUT1	atrem_app_refl_plus_gas_removal_l2.f90	1684;"	c	subroutine:TRAN_TABLE
GETINPUT1	atrem_app_refl_plus_gas_removal_l2.f90	393;"	c	subroutine:GET_INPUT
GETINPUT10	atrem_app_refl_plus_gas_removal_l2.f90	401;"	c	subroutine:GET_INPUT
GETINPUT10	atrem_app_refl_plus_gas_removal_l2.f90	816;"	c	subroutine:GEOMETRY
GETINPUT11	atrem_app_refl_plus_gas_removal_l2.f90	402;"	c	subroutine:GET_INPUT
GETINPUT12	atrem_app_refl_plus_gas_removal_l2.f90	403;"	c	subroutine:GET_INPUT
GETINPUT13	atrem_app_refl_plus_gas_removal_l2.f90	413;"	c	subroutine:GET_INPUT
GETINPUT14	atrem_app_refl_plus_gas_removal_l2.f90	416;"	c	subroutine:GET_INPUT
GETINPUT14	atrem_app_refl_plus_gas_removal_l2.f90	553;"	c	subroutine:MODEL_ADJ
GETINPUT14	atrem_app_refl_plus_gas_removal_l2.f90	828;"	c	subroutine:GEOMETRY
GETINPUT15	atrem_app_refl_plus_gas_removal_l2.f90	420;"	c	subroutine:GET_INPUT
GETINPUT15	atrem_app_refl_plus_gas_removal_l2.f90	832;"	c	subroutine:GEOMETRY
GETINPUT3	atrem_app_refl_plus_gas_removal_l2.f90	1041;"	c	subroutine:INIT_SPECCAL
GETINPUT3	atrem_app_refl_plus_gas_removal_l2.f90	394;"	c	subroutine:GET_INPUT
GETINPUT3	atrem_app_refl_plus_gas_removal_l2.f90	542;"	c	subroutine:MODEL_ADJ
GETINPUT3	atrem_app_refl_plus_gas_removal_l2.f90	812;"	c	subroutine:GEOMETRY
GETINPUT4	atrem_app_refl_plus_gas_removal_l2.f90	1042;"	c	subroutine:INIT_SPECCAL
GETINPUT4	atrem_app_refl_plus_gas_removal_l2.f90	1685;"	c	subroutine:TRAN_TABLE
GETINPUT4	atrem_app_refl_plus_gas_removal_l2.f90	2243;"	c	subroutine:TRAN_SMOOTH
GETINPUT4	atrem_app_refl_plus_gas_removal_l2.f90	2498;"	c	subroutine:TRAN_SMOOTH_OTHERS
GETINPUT4	atrem_app_refl_plus_gas_removal_l2.f90	395;"	c	subroutine:GET_INPUT
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	1043;"	c	subroutine:INIT_SPECCAL
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	1686;"	c	subroutine:TRAN_TABLE
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	2251;"	c	subroutine:TRAN_SMOOTH
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	2506;"	c	subroutine:TRAN_SMOOTH_OTHERS
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	2843;"	c	subroutine:CUBSPLN
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	396;"	c	subroutine:GET_INPUT
GETINPUT5	atrem_app_refl_plus_gas_removal_l2.f90	543;"	c	subroutine:MODEL_ADJ
GETINPUT6	atrem_app_refl_plus_gas_removal_l2.f90	1044;"	c	subroutine:INIT_SPECCAL
GETINPUT6	atrem_app_refl_plus_gas_removal_l2.f90	397;"	c	subroutine:GET_INPUT
GETINPUT7	atrem_app_refl_plus_gas_removal_l2.f90	1045;"	c	subroutine:INIT_SPECCAL
GETINPUT7	atrem_app_refl_plus_gas_removal_l2.f90	2725;"	c	subroutine:CHNLRATIO
GETINPUT7	atrem_app_refl_plus_gas_removal_l2.f90	398;"	c	subroutine:GET_INPUT
GETINPUT8	atrem_app_refl_plus_gas_removal_l2.f90	399;"	c	subroutine:GET_INPUT
GETINPUT8	atrem_app_refl_plus_gas_removal_l2.f90	814;"	c	subroutine:GEOMETRY
GETINPUT9	atrem_app_refl_plus_gas_removal_l2.f90	400;"	c	subroutine:GET_INPUT
GETINPUT9	atrem_app_refl_plus_gas_removal_l2.f90	815;"	c	subroutine:GEOMETRY
GET_INPUT	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE GET_INPUT$/;"	s
GET_PSUM	amoeba.c	6;"	d	file:
GET_SMA_PROD	soa_sma_utils.f	/^      SUBROUTINE GET_SMA_PROD(/;"	s
GET_SOA_PROD	soa_sma_utils.f	/^      SUBROUTINE GET_SOA_PROD(/;"	s
GLIMIT	numerical.c	182;"	d	file:
GLIMIT	numerical.c	245;"	d	file:
GLINT_MIN	l12_parms.h	76;"	d
GOLD	numerical.c	181;"	d	file:
GOLD	numerical.c	244;"	d	file:
GS97_CASE2	atmcor_soa.f	/^        SUBROUTINE GS97_CASE2 /;"	s
GS97_OUT	soa_sma_utils.f	120;"	c	subroutine:CLEAR_SOA_PROD
GS97_OUT	soa_sma_utils.f	157;"	c	subroutine:CLEAR_SMA_PROD
GS97_OUT	soa_sma_utils.f	17;"	c	subroutine:GET_SOA_PROD
GS97_OUT	soa_sma_utils.f	72;"	c	subroutine:GET_SMA_PROD
GSMDEFAULT	gsm.c	31;"	d	file:
GSMRecNum	gsm.c	/^static int32_t    GSMRecNum = -1;$/;"	v	file:
GetAerPhase	par_utils.c	/^void GetAerPhase(l2str *l2rec, int ip, int32_t nbands, float angstrom,$/;"	f
GetTime	l1_mos_hdf.c	/^int32_t GetTime(char arr[MAXLEN])$/;"	f
GetYearDayMsec	l1_mos_hdf.c	/^int GetYearDayMsec(double dtime[NS])  $/;"	f
Get_a	bioOptBandShift.c	/^float Get_a(l2str *l2rec,ccstr *vccp,int32_t ip,int vccidx,char key){$/;"	f
Get_bb	bioOptBandShift.c	/^float Get_bb(l2str *l2rec, ccstr *vccp,int32_t ip,int vccidx,char key){$/;"	f
H2O_BIT	l12_parms.h	93;"	d
H5IO_DAT_RWALL	h5io.h	32;"	d
H5IO_DAT_RWSLICE	h5io.h	33;"	d
H5IO_MAXDIM	h5io.h	26;"	d
H5IO_TYP_DAT_ID	h5io.h	31;"	d
H5IO_TYP_FILE_ID	h5io.h	29;"	d
H5IO_TYP_GRP_ID	h5io.h	30;"	d
HABS_CLOUD	mph_flags.h	19;"	d
HABS_NONWTR	mph_flags.h	20;"	d
HABS_WATER	mph_flags.h	18;"	d
HAMSideId	l1_viirs_nc.c	/^static int HAMSideId;$/;"	v	file:
HDF24	main_l1brsgen.c	39;"	d	file:
HDF8	main_l1brsgen.c	38;"	d	file:
HIGLINT	l2_flags.h	12;"	d
HILT	l2_flags.h	13;"	d
HIPOL	l2_flags.h	38;"	d
HISATZEN	l2_flags.h	14;"	d
HISOLZEN	l2_flags.h	21;"	d
HMF8	hmf8.f	/^        subroutine HMF8 /;"	s
HYCOMNX	sssref.c	164;"	d	file:
HYCOMNY	sssref.c	165;"	d	file:
ICE_TYPE_NSIDC	ice_mask.c	4;"	d	file:
ICE_TYPE_OISST	ice_mask.c	5;"	d	file:
ICE_TYPE_OLD	ice_mask.c	3;"	d	file:
IDX2MODEL	atmcor_soa.f	/^      SUBROUTINE IDX2MODEL(/;"	s
IH2OLQ	COMMONS_INC.f	/^      INTEGER IH2OLQ /;"	v
ILOOPUPPERLIMITDEFAULT	globals.h	18;"	d
IMAX	nrutil.h	35;"	d
IMI1	atmcor_soa.f	/^      INTEGER  IMI1(/;"	v
IMI2	atmcor_soa.f	/^      INTEGER  IMI1(1),IMI2(/;"	v
IMIN	nrutil.h	39;"	d
IMR1	atmcor_soa.f	/^      INTEGER  IMI1(1),IMI2(1),IMR1(/;"	v
IMR2	atmcor_soa.f	/^      INTEGER  IMI1(1),IMI2(1),IMR1(1),IMR2(/;"	v
INBAND	atmcor_soa.f	/^      SUBROUTINE INBAND /;"	s
INCUBE	atrem_app_refl_plus_gas_removal_l2.f90	408;"	c	subroutine:GET_INPUT
INCUBE	atrem_cubeio.f90	13;"	c	subroutine:OPENINFILE
INDEX	aerosol.c	789;"	d	file:
INDEX_MED	COMMONS_INC.f	/^      INTEGER INDEX_MED(/;"	v
INIT_SPECCAL	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE INIT_SPECCAL$/;"	s
INIT_SPECCAL1	COMMONS_INC.f	38;"	c
INIT_SPECCAL10	atrem_app_refl_plus_gas_removal_l2.f90	1055;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL11	atrem_app_refl_plus_gas_removal_l2.f90	1056;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL12	COMMONS_INC.f	39;"	c
INIT_SPECCAL13	COMMONS_INC.f	86;"	c
INIT_SPECCAL14	COMMONS_INC.f	87;"	c
INIT_SPECCAL15	COMMONS_INC.f	102;"	c
INIT_SPECCAL16	atrem_app_refl_plus_gas_removal_l2.f90	1069;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL16	atrem_app_refl_plus_gas_removal_l2.f90	2492;"	c	subroutine:TRAN_SMOOTH_OTHERS
INIT_SPECCAL17	atrem_app_refl_plus_gas_removal_l2.f90	1075;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL17	atrem_app_refl_plus_gas_removal_l2.f90	2495;"	c	subroutine:TRAN_SMOOTH_OTHERS
INIT_SPECCAL3	atrem_app_refl_plus_gas_removal_l2.f90	1049;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL3	atrem_app_refl_plus_gas_removal_l2.f90	1687;"	c	subroutine:TRAN_TABLE
INIT_SPECCAL5	atrem_app_refl_plus_gas_removal_l2.f90	1050;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL5	atrem_app_refl_plus_gas_removal_l2.f90	1688;"	c	subroutine:TRAN_TABLE
INIT_SPECCAL6	atrem_app_refl_plus_gas_removal_l2.f90	1051;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL6	atrem_app_refl_plus_gas_removal_l2.f90	2726;"	c	subroutine:CHNLRATIO
INIT_SPECCAL7	atrem_app_refl_plus_gas_removal_l2.f90	1052;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL7	atrem_app_refl_plus_gas_removal_l2.f90	2727;"	c	subroutine:CHNLRATIO
INIT_SPECCAL8	atrem_app_refl_plus_gas_removal_l2.f90	1053;"	c	subroutine:INIT_SPECCAL
INIT_SPECCAL8	atrem_app_refl_plus_gas_removal_l2.f90	2728;"	c	subroutine:CHNLRATIO
INIT_WATER_PAR1	atmcor_soa.f	/^      SUBROUTINE INIT_WATER_PAR1(/;"	s
INIT_WATER_PAR2	atmcor_soa.f	/^      SUBROUTINE INIT_WATER_PAR2(/;"	s
INOUT_UNITS	atrem_app_refl_plus_gas_removal_l2.f90	373;"	c	subroutine:GET_INPUT
INPUT_L2GEN	COMMONS_INC.f	104;"	c
INSTITUTION	l12_proto.h	66;"	d
INT16	atrem_cubeio.f90	/^      INTEGER, PARAMETER :: INT16 /;"	v	module:cubeio
INT32	l1_imgscale.c	3;"	d	file:
INT32	main_l1bgen.c	35;"	d	file:
INT32	main_l1brsgen.c	34;"	d	file:
INT32	main_l1mapgen.c	61;"	d	file:
INTAWTAB	water.c	12;"	d	file:
INTERLACED	l1_hdf_generic_read.c	5;"	d	file:
INVERSE_LW	filehandle.h	15;"	d
INVERSE_NLW	filehandle.h	14;"	d
INVERSE_ZERO	filehandle.h	13;"	d
IOPCARDER	l12_parms.h	97;"	d
IOPDEFAULT	l12_parms.h	105;"	d
IOPF_ADGHI	flags_iop.h	19;"	d
IOPF_ADGLO	flags_iop.h	18;"	d
IOPF_AHI	flags_iop.h	15;"	d
IOPF_ALO	flags_iop.h	14;"	d
IOPF_APHHI	flags_iop.h	17;"	d
IOPF_APHLO	flags_iop.h	16;"	d
IOPF_BADRRS	flags_iop.h	11;"	d
IOPF_BBHI	flags_iop.h	21;"	d
IOPF_BBLO	flags_iop.h	20;"	d
IOPF_BBPHI	flags_iop.h	23;"	d
IOPF_BBPLO	flags_iop.h	22;"	d
IOPF_FAILED	flags_iop.h	9;"	d
IOPF_ISMASKED	flags_iop.h	8;"	d
IOPF_MAXITER	flags_iop.h	10;"	d
IOPF_NAN	flags_iop.h	12;"	d
IOPF_NIWA_BADGEOM	niwa_iop.c	45;"	d	file:
IOPF_RRSDIFF	flags_iop.h	13;"	d
IOPGIOP	l12_parms.h	103;"	d
IOPGSM	l12_parms.h	98;"	d
IOPLAS	l12_parms.h	102;"	d
IOPNIWA	l12_parms.h	101;"	d
IOPNONE	l12_parms.h	96;"	d
IOPPML	l12_parms.h	100;"	d
IOPQAA	l12_parms.h	99;"	d
IOPSWIM	l12_parms.h	104;"	d
IOPmodel	niwa_iop.c	47;"	d	file:
ITMAX	fuzzy_func_v3.c	25;"	d	file:
ITMAX	gcf.c	2;"	d	file:
ITMAX	gcf.c	33;"	d	file:
ITMAX	gser.c	2;"	d	file:
ITMAX	gser.c	33;"	d	file:
ITMAX	numerical.c	251;"	d	file:
ITMAX	numerical.c	322;"	d	file:
KD_MAX	get_Kd.c	11;"	d	file:
KD_MIN	get_Kd.c	12;"	d	file:
KDtree	KDvector.h	/^struct KDtree {$/;"	s
KDtree	KDvector.h	/^typedef struct KDtree KDtree;$/;"	t	typeref:struct:KDtree
KEYWORDS_IOP	l12_proto.h	71;"	d
KEYWORDS_OC	l12_proto.h	70;"	d
KEYWORDS_SST	l12_proto.h	72;"	d
KEYWORDS_VOCABULARY	l12_proto.h	69;"	d
Kd490_KD2	get_Kd.c	/^void Kd490_KD2(l2str *l2rec, float *Kd)$/;"	f
Kd490_morel	get_Kd.c	/^void Kd490_morel(l2str *l2rec, float *Kd)$/;"	f
Kd490_mueller	get_Kd.c	/^void Kd490_mueller(l2str *l2rec, float k490[])$/;"	f
Kd490_obpg	get_Kd.c	/^void Kd490_obpg(l2str *l2rec, float k490[])$/;"	f
Kd532	get_Kd.c	/^void Kd532(l2str *l2rec, int flag, float k532[])$/;"	f
Kd_PAR_lee	get_Kd.c	/^void Kd_PAR_lee(l2str *l2rec, float *Kd)$/;"	f
Kd_PAR_morel	get_Kd.c	/^void Kd_PAR_morel(l2str *l2rec, int depth, float *Kd)$/;"	f
Kd_jamet	get_Kd.c	/^void Kd_jamet(l2str *l2rec, int band, float *Kd)$/;"	f
Kd_lee	get_Kd.c	/^void Kd_lee(l2str *l2rec, int band, float *Kd)$/;"	f
Kd_rhos	get_Kd.c	/^void Kd_rhos(l2str *l2rec,float *Kd)$/;"	f
L1A_SEAWIFS_H	l1a_seawifs.h	2;"	d
L1BSCN_MODE	l1b_viirs_nc.c	/^    L1BSCN_MODE,  \/*< ubyte  scan_state_flags    *\/$/;"	e	enum:l1bscn_var	file:
L1BSCN_QUAL	l1b_viirs_nc.c	/^    L1BSCN_QUAL,  \/*< ubyte  scan_quality_flags  *\/$/;"	e	enum:l1bscn_var	file:
L1BSCN_STIME	l1b_viirs_nc.c	/^    L1BSCN_STIME, \/*< double scan_start_time *\/$/;"	e	enum:l1bscn_var	file:
L1B_COEFFS	l1_hmodis_hdf.c	/^enum L1B_COEFFS {$/;"	g	file:
L1B_GRP	l1b_viirs_nc.c	/^static const char* L1B_GRP = "observation_data";$/;"	v	file:
L1B_NUM_COEFFS	l1_hmodis_hdf.c	/^    L1B_NUM_COEFFS  \/*< last entry = number of scale attributes *\/$/;"	e	enum:L1B_COEFFS	file:
L1B_NUM_SDS	l1_hmodis_hdf.c	/^    L1B_NUM_SDS  \/*< last entry = number of SDSs *\/$/;"	e	enum:L1B_SDS	file:
L1B_SDS	l1_hmodis_hdf.c	/^enum L1B_SDS {$/;"	g	file:
L1_CZCS_H	l1_czcs_hdf.h	5;"	d
L1_GOCI_H	l1_goci.h	2;"	d
L1_HICO_H5_H_	l1_hico_h5.h	6;"	d
L1_OLCI_H_	l1_olci.h	6;"	d
L1_OLI_H	l1_oli.h	2;"	d
L2BINMATCH_INPUT_H	l2binmatch_input.h	2;"	d
L2GEN_VERSION_MAJOR	version.h	1;"	d
L2GEN_VERSION_MINOR	version.h	2;"	d
L2GEN_VERSION_PATCH_LEVEL	version.h	3;"	d
LAC_PIXEL_NUM	l12_seawifs.c	6;"	d	file:
LAC_PIXEL_NUM	l1a_osmi.c	12;"	d	file:
LAC_PIXEL_NUM	l1a_seawifs.c	13;"	d	file:
LAGRINTRP	atmcor_soa.f	/^      SUBROUTINE LAGRINTRP(/;"	s
LAND	l2_flags.h	10;"	d
LASNKC	las_iop.c	41;"	d	file:
LASNRC	las_iop.c	42;"	d	file:
LASNSOL	las_iop.c	40;"	d	file:
LBANDS	niwa_iop.c	33;"	d	file:
LEE1994	raman.c	43;"	d	file:
LEE2013	raman.c	41;"	d	file:
LEVMARQ	giop.h	7;"	d
LEVMARQ	gsm.c	35;"	d	file:
LICENSE	l12_proto.h	67;"	d
LMAX	nrutil.h	27;"	d
LMIN	nrutil.h	31;"	d
LONLAT_ERROR	l12_parms.h	25;"	d
LOOPI	l1_hmodis_hdf.c	519;"	d	file:
LOWLW	l2_flags.h	23;"	d
L_ENTHALPY	met_cvt.h	38;"	d
L_q	l1_struc.h	/^    float  *L_q;$/;"	m	struct:l1_struct
L_q	l2_struc.h	/^    float  *L_q; \/\/ Rayleigh polarization Q-component$/;"	m	struct:l2_struct
L_u	l1_struc.h	/^    float  *L_u;$/;"	m	struct:l1_struct
L_u	l2_struc.h	/^    float  *L_u; \/\/ Rayleigh polarization U-component$/;"	m	struct:l2_struct
La	l2_struc.h	/^    float  *La; \/\/ aerosol radiance$/;"	m	struct:l2_struct
Lambda	l1_generic_write.c	/^static int32_t *Lambda, *Lambda_p;$/;"	v	file:
Lambda	l2_generic.c	/^static int32_t  *Lambda    , *Lambda_p;$/;"	v	file:
Lambda	mscal_struc.h	/^    int32_t   *Lambda;$/;"	m	struct:mscal_struct
Lambda_p	l1_generic_write.c	/^static int32_t *Lambda, *Lambda_p;$/;"	v	file:
Lambda_p	l2_generic.c	/^static int32_t  *Lambda    , *Lambda_p;$/;"	v	file:
LastRecNum	cdom_morel.c	/^static int32_t  LastRecNum = -1;$/;"	v	file:
LastRecNum	giop.c	/^static int32_t  LastRecNum = -1;$/;"	v	file:
LastRecNum	las_iop.c	/^static int LastRecNum = -1;$/;"	v	file:
LeapCheck	l1_octs_hdf.c	/^int LeapCheck(int yr)$/;"	f
LeapChk	l1_mos_hdf.c	/^int LeapChk(int32_t yr)$/;"	f
LengthRestB	misc.h	113;"	d
LengthRestL	misc.h	119;"	d
LengthRestS	misc.h	116;"	d
Lr	l1_struc.h	/^    float  *Lr;$/;"	m	struct:l1_struct
Lr	l2_struc.h	/^    float  *Lr; \/\/ Rayliegh radiance$/;"	m	struct:l2_struct
Lt	calfile_utils.h	/^    float    **Lt; \/\/ Lt[nband][ndets]$/;"	m	struct:cal_struct
Lt	l1_struc.h	/^    float  *Lt;$/;"	m	struct:l1_struct
Lt	l2_struc.h	/^    float  *Lt; \/\/ Top of atmosphere radiance$/;"	m	struct:l2_struct
LtRED_maxmin	sst.c	/^static float *LtRED_maxmin = NULL;$/;"	v	file:
Lt_unc	l1_struc.h	/^    float  *Lt_unc;$/;"	m	struct:l1_struct
Lt_unc	l2_struc.h	/^    float  *Lt_unc;$/;"	m	struct:l2_struct
Ltir	l1_struc.h	/^    float  *Ltir;$/;"	m	struct:l1_struct
Ltir	l2_struc.h	/^    float  *Ltir;$/;"	m	struct:l2_struct
Ltyp_frac	l1a_seawifs.c	/^float   Ltyp_frac   = 0.25;   \/* fraction of B8 for sl threshold  *\/$/;"	v
Lw	l2_struc.h	/^    float  *Lw; \/\/ water-leaving radiance$/;"	m	struct:l2_struct
Lw	target_struc.h	/^    float  *Lw;$/;"	m	struct:target_struct
Lw	vcal_struc.h	/^    float  *Lw;$/;"	m	struct:vcal_struct
LwN	atmcor_soa.f	/^      REAL*8   LwN(/;"	v
MAGNUS_A1	met_cvt.h	40;"	d
MAGNUS_B1	met_cvt.h	41;"	d
MAIN_OPTIM_INOUT_PROC	atmcor_soa.f	/^      SUBROUTINE MAIN_OPTIM_INOUT_PROC(/;"	s
MALLOC	main_l1brsgen.c	44;"	d	file:
MALLOC	main_l1mapgen.c	67;"	d	file:
MASK_HIGHLT1	l1a_seawifs.c	19;"	d	file:
MAX	l12_proto.h	51;"	d
MAX	numerical.c	184;"	d	file:
MAX	numerical.c	247;"	d	file:
MAXAERITER	l2_flags.h	28;"	d
MAXAERMOD	l12_parms.h	45;"	d
MAXAWTAB	water.c	11;"	d	file:
MAXBANDS	l1_viirs_h5.c	16;"	d	file:
MAXBANDS	l1b_viirs_nc.c	162;"	d	file:
MAXCLIENTS	misc.h	50;"	d
MAXCPROD	bin_climatology.c	10;"	d	file:
MAXFORMATS	misc.h	51;"	d
MAXINT	mipolyutil.c	33;"	d	file:
MAXITR	gsm.c	29;"	d	file:
MAXITR	swim.c	36;"	d	file:
MAXLEN	l1_mos_hdf.c	29;"	d	file:
MAXLINE	cdom_morel.c	4;"	d	file:
MAXLINE	globals.h	15;"	d
MAXMODEL	aerosol.c	51;"	d	file:
MAXNVDATA	bin_climatology.c	8;"	d	file:
MAXOCARR	l1_octs_hdf.c	46;"	d	file:
MAXOCLIN	l1_meris_CC.c	14;"	d	file:
MAXOCLIN	l1_octs_hdf.c	44;"	d	file:
MAXOCPIX	l1_octs_hdf.c	45;"	d	file:
MAXOLCI_RADFILES	olci.h	15;"	d
MAXORTHOLOGNUMBER	globals.h	31;"	d
MAXPHI	aerosol.c	54;"	d	file:
MAXPIX	l12_parms.h	14;"	d
MAXPROD	l2prod.h	4;"	d
MAXQUERY	globals.h	14;"	d
MAXQUERYNUMBER	globals.h	29;"	d
MAXSCATT	aerosol.c	55;"	d	file:
MAXSCREENS	misc.h	49;"	d
MAXSENZ	aerosol.c	53;"	d	file:
MAXSENZEN	get_nc_height.c	13;"	d	file:
MAXSEQUENCE	globals.h	16;"	d
MAXSHORT	misc.h	107;"	d
MAXSOLZ	aerosol.c	52;"	d	file:
MAXTARGET	globals.h	13;"	d
MAXTARGETNUMBER	globals.h	28;"	d
MAXVISUALS_PER_SCREEN	misc.h	52;"	d
MAX_ARR	pml_iop_config.h	13;"	d
MAX_ATTERR	l1_hmodis_hdf.c	518;"	d	file:
MAX_BANDS	pml_iop.h	11;"	d
MAX_DIM	l2prod_struc.h	6;"	d
MAX_ENTRY	pml_iop_config.h	11;"	d
MAX_IFILES	l12_parms.h	16;"	d
MAX_LAT	get_height.c	2;"	d	file:
MAX_LINE	pml_iop_config.h	9;"	d
MAX_LINE	pml_iop_tables.c	17;"	d	file:
MAX_LINE	pml_iop_tables.h	8;"	d
MAX_OFILES	l12_parms.h	15;"	d
MAX_PIX_PER_SCENE	b128_msk_get.c	8;"	d	file:
MAX_RUNCAL	rawcal.h	85;"	d
MAX_RUNCAL	runcal.h	79;"	d
MAX_SERIAL_NUM	gc.h	51;"	d
MAX_TAB	pml_iop_config.h	12;"	d
MAX_TOK	pml_iop_config.h	10;"	d
MBAND_NUM_DETECTORS	l1_viirs_nc.c	12;"	d	file:
MEAN	globals.h	21;"	d
MERIS_BANDINFO_FILENAME	l1_meris_N1.c	24;"	d	file:
MERIS_FR_DETECTORS	l1_meris_N1.c	33;"	d	file:
MERIS_L1FLAG_BRIGHT	l1_meris_N1.c	53;"	d	file:
MERIS_L1FLAG_COASTLINE	l1_meris_N1.c	54;"	d	file:
MERIS_L1FLAG_COSMETIC	l1_meris_N1.c	48;"	d	file:
MERIS_L1FLAG_DUPLICATED	l1_meris_N1.c	49;"	d	file:
MERIS_L1FLAG_GLINT	l1_meris_N1.c	50;"	d	file:
MERIS_L1FLAG_INVALID	l1_meris_N1.c	55;"	d	file:
MERIS_L1FLAG_LAND	l1_meris_N1.c	52;"	d	file:
MERIS_L1FLAG_SUSPECT	l1_meris_N1.c	51;"	d	file:
MERIS_L2FLAG_ABSOA_DUST	l1_meris_N1.c	74;"	d	file:
MERIS_L2FLAG_CASE2_ANOM	l1_meris_N1.c	72;"	d	file:
MERIS_L2FLAG_CASE2_S	l1_meris_N1.c	73;"	d	file:
MERIS_L2FLAG_CASE2_Y	l1_meris_N1.c	71;"	d	file:
MERIS_L2FLAG_CLOUD	l1_meris_N1.c	87;"	d	file:
MERIS_L2FLAG_COASTLINE	l1_meris_N1.c	78;"	d	file:
MERIS_L2FLAG_COSMETIC	l1_meris_N1.c	77;"	d	file:
MERIS_L2FLAG_DDV	l1_meris_N1.c	68;"	d	file:
MERIS_L2FLAG_HIGH_GLINT	l1_meris_N1.c	67;"	d	file:
MERIS_L2FLAG_ICE_HAZE	l1_meris_N1.c	70;"	d	file:
MERIS_L2FLAG_LAND	l1_meris_N1.c	88;"	d	file:
MERIS_L2FLAG_MEDIUM_GLINT	l1_meris_N1.c	69;"	d	file:
MERIS_L2FLAG_OOADB	l1_meris_N1.c	75;"	d	file:
MERIS_L2FLAG_PCD_14	l1_meris_N1.c	84;"	d	file:
MERIS_L2FLAG_PCD_15	l1_meris_N1.c	83;"	d	file:
MERIS_L2FLAG_PCD_16	l1_meris_N1.c	82;"	d	file:
MERIS_L2FLAG_PCD_17	l1_meris_N1.c	81;"	d	file:
MERIS_L2FLAG_PCD_18	l1_meris_N1.c	80;"	d	file:
MERIS_L2FLAG_PCD_19	l1_meris_N1.c	79;"	d	file:
MERIS_L2FLAG_PCD_1_13	l1_meris_N1.c	85;"	d	file:
MERIS_L2FLAG_PRESSURE_CONF	l1_meris_N1.c	66;"	d	file:
MERIS_L2FLAG_SUSPECT	l1_meris_N1.c	76;"	d	file:
MERIS_L2FLAG_WATER	l1_meris_N1.c	86;"	d	file:
MERIS_L2FLAG_WHITE_SCATTER	l1_meris_N1.c	65;"	d	file:
MERIS_LINE_MAX	l1_meris_N1.c	38;"	d	file:
MERIS_NBANDS	l1_meris_CC.c	13;"	d	file:
MERIS_NBANDS	l1_meris_N1.c	22;"	d	file:
MERIS_REDUCED_RESOLUTION_MAX	l1_meris_N1.c	31;"	d	file:
MERIS_RR_DETECTORS	l1_meris_N1.c	35;"	d	file:
MERIS_SUN_FLUX_FR_FILENAME	l1_meris_N1.c	27;"	d	file:
MERIS_SUN_FLUX_RR_FILENAME	l1_meris_N1.c	28;"	d	file:
MERIS_WAVELENGTH_FR_FILENAME	l1_meris_N1.c	25;"	d	file:
MERIS_WAVELENGTH_RR_FILENAME	l1_meris_N1.c	26;"	d	file:
MET_UNITS__P_HPA	met_cvt.h	25;"	d
MET_UNITS__P_PA	met_cvt.h	24;"	d
MET_UNITS__Q_G_KG	met_cvt.h	29;"	d
MET_UNITS__Q_KG_KG	met_cvt.h	28;"	d
MET_UNITS__T_C	met_cvt.h	27;"	d
MET_UNITS__T_K	met_cvt.h	26;"	d
MILLI_PER_MIN	misc.h	67;"	d
MILLI_PER_SECOND	misc.h	68;"	d
MIN	l12_proto.h	55;"	d
MINAWTAB	water.c	10;"	d	file:
MINDEGCHANGE	get_atrem_corl1.c	98;"	d	file:
MININT	mipolyutil.c	34;"	d	file:
MINSHORT	misc.h	108;"	d
MINWVDIFF	convert_band.c	8;"	d	file:
MINY	get_zno3.c	12;"	d	file:
MIN_BAD_SI	l1_hmodis_hdf.c	517;"	d	file:
MIRNA_LENGTH_MEAN	globals.h	25;"	d
MIRNA_LENGTH_STDDEV	globals.h	26;"	d
MISCSTRUCT_H	miscstruct.h	26;"	d
MISC_H	misc.h	26;"	d
MISS_FLOAT32_FILL	l1_viirs_h5.h	16;"	d
MISS_UINT16_FILL	l1_viirs_h5.h	17;"	d
MLDXANC	get_mld.c	9;"	d	file:
MLDYANC	get_mld.c	10;"	d	file:
MODCIRRUS	l12_parms.h	123;"	d
MODCLOUD	l12_parms.h	122;"	d
MODEL2IDX	atmcor_soa.f	/^      SUBROUTINE MODEL2IDX(/;"	s
MODELMAX	atrem_corl1.h	20;"	d
MODEL_ADJ	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE MODEL_ADJ$/;"	s
MODEL_ADJ1	atrem_app_refl_plus_gas_removal_l2.f90	1047;"	c	subroutine:INIT_SPECCAL
MODEL_ADJ1	atrem_app_refl_plus_gas_removal_l2.f90	1689;"	c	subroutine:TRAN_TABLE
MODEL_ADJ1	atrem_app_refl_plus_gas_removal_l2.f90	544;"	c	subroutine:MODEL_ADJ
MODEL_ADJ1	atrem_app_refl_plus_gas_removal_l2.f90	817;"	c	subroutine:GEOMETRY
MODEL_ADJ2	atrem_app_refl_plus_gas_removal_l2.f90	547;"	c	subroutine:MODEL_ADJ
MODEL_ADJ3	atrem_app_refl_plus_gas_removal_l2.f90	548;"	c	subroutine:MODEL_ADJ
MODEL_ADJ3	atrem_app_refl_plus_gas_removal_l2.f90	821;"	c	subroutine:GEOMETRY
MODEL_ADJ4	atrem_app_refl_plus_gas_removal_l2.f90	1077;"	c	subroutine:INIT_SPECCAL
MODEL_ADJ4	atrem_app_refl_plus_gas_removal_l2.f90	1690;"	c	subroutine:TRAN_TABLE
MODEL_ADJ4	atrem_app_refl_plus_gas_removal_l2.f90	550;"	c	subroutine:MODEL_ADJ
MODGLINT	l2_flags.h	29;"	d
MODIS_NBANDS	niwa_iop.c	36;"	d	file:
MPH_ADJ	mph_flags.h	15;"	d
MPH_CYANO	mph_flags.h	14;"	d
MPH_FLOAT	mph_flags.h	13;"	d
MSKMODMIR1	l12_parms.h	128;"	d
MSKMODMIR2	l12_parms.h	129;"	d
M_DRY	met_cvt.h	34;"	d
M_PI	pml_iop.h	15;"	d
M_WET	met_cvt.h	35;"	d
MakeVgroups	l2_generic.c	/^int MakeVgroups(filehandle *l2file){$/;"	f
MakeVgroupsL1	l1_generic_write.c	/^int MakeVgroupsL1(filehandle *file) {$/;"	f
MakeVgroupsL1	l1_hdf_generic_write.c	/^int MakeVgroupsL1(filehandle *file){$/;"	f
Maxband	aerosol.c	/^static int32_t Maxband;                    \/* must be >= NBANDS *\/$/;"	v	file:
MiddleOfMonth	sstref.c	/^static int MiddleOfMonth[2][12] = {{15,45,74,105,135,166,196,227,258,288,319,349},$/;"	v	file:
Morel_BRDF	dtran_brdf.f	/^      subroutine Morel_BRDF(/;"	s
N	atmcor_soa.f	/^      INT/;"	v
N443	calcite.c	235;"	d	file:
N550	calcite.c	236;"	d	file:
NAGGPX	l1_viirs_h5.c	20;"	d	file:
NAMING_AUTHORITY	l12_proto.h	68;"	d
NAMING_CONVENTION_REFERENCE	ice_mask.c	29;"	d	file:
NANG	polcor.c	12;"	d	file:
NAVBANDS	l1_aci_hdf.c	13;"	d	file:
NAVFAIL	l2_flags.h	34;"	d
NAVWARN	l2_flags.h	25;"	d
NAV_ANG	l1b_viirs_nc.c	/^    NAV_ANG,   \/*< att_ang     *\/$/;"	e	enum:nav_var	file:
NAV_GRP	l1b_viirs_nc.c	/^static const char* NAV_GRP = "navigation_data";$/;"	v	file:
NAV_POS	l1b_viirs_nc.c	/^    NAV_POS,   \/*< orb_pos_ev  *\/$/;"	e	enum:nav_var	file:
NAV_SOLD	l1b_viirs_nc.c	/^    NAV_SOLD,  \/*< earth_sun_distance [number_of_scans] *\/$/;"	e	enum:nav_var	file:
NAV_SOLJ	l1b_viirs_nc.c	/^    NAV_SOLJ,  \/*< solar_j2000 *\/$/;"	e	enum:nav_var	file:
NAV_SOLV	l1b_viirs_nc.c	/^    NAV_SOLV,  \/*< solar_inst  *\/$/;"	e	enum:nav_var	file:
NAV_VEL	l1b_viirs_nc.c	/^    NAV_VEL,   \/*< orb_vel_ev  *\/$/;"	e	enum:nav_var	file:
NAWTAB	water.c	13;"	d	file:
NA_FLOAT32_FILL	l1_viirs_h5.h	14;"	d
NA_UINT16_FILL	l1_viirs_h5.h	15;"	d
NB	l1_mos_hdf.c	28;"	d	file:
NB	pml_iop.h	8;"	d
NBANDS	atrem_corl1.h	16;"	d
NBANDS	qaa.c	598;"	d	file:
NBANDSIR	l12_parms.h	10;"	d
NBANDS_MOS	l1_mos_hdf.c	33;"	d	file:
NBANDS_OSMI	l1a_osmi.c	14;"	d	file:
NBANDS_VC	virtual_constellation.c	5;"	d	file:
NBINREAD	main_l3gen.cpp	21;"	d	file:
NBND	l1_czcs_hdf.c	165;"	d	file:
NBND	l1_octs_hdf.c	90;"	d	file:
NBND_CZCS	l1_czcs_hdf.c	11;"	d	file:
NBTBANDMAX	brightness.c	17;"	d	file:
NBTDETMAX	brightness.c	16;"	d	file:
NBTDIMS	brightness.c	14;"	d	file:
NBTTABMAX	brightness.c	15;"	d	file:
NC	l1_octs_hdf.c	42;"	d	file:
NCLASSES	owt.c	6;"	d	file:
NCOLS	ice_mask.c	33;"	d	file:
NCVHF	COMMONS_INC.f	/^      INTEGER NCVHF(/;"	v
NCVHF_WAVNO	COMMONS_INC.f	/^      INTEGER NCVHF_WAVNO(/;"	v
NDET	l1_octs_hdf.c	89;"	d	file:
NDET	l1_viirs_h5.c	18;"	d	file:
NDET	polcor.c	11;"	d	file:
NDIFFMAXv6a	sst.c	50;"	d	file:
NDIFFMAXv6mv	sst.c	42;"	d	file:
NDTNX	carder.c	569;"	d	file:
NDTNY	carder.c	570;"	d	file:
NEPOCH	l1_czcs_hdf.c	167;"	d	file:
NEWAERTAB	l12_parms.h	126;"	d
NEWPOLTAB	l12_parms.h	127;"	d
NEWRAYTAB	l12_parms.h	125;"	d
NEWSENSINFO	l12_parms.h	124;"	d
NEWSENSINFO	rdatreminfo.c	26;"	d	file:
NEW_CACHE_NELEMS	l1_olci.c	16;"	d	file:
NEW_CACHE_PREEMPTION	l1_olci.c	17;"	d	file:
NEW_CACHE_SIZE	l1_olci.c	15;"	d	file:
NEXT_SERIAL_NUMBER	gc.h	52;"	d
NElat	lonlat2pixline.h	/^        float NElat; \/**< NE latitude corner of box *\/$/;"	m	struct:lonlat2pixline_struct
NElon	lonlat2pixline.h	/^        float NElon; \/**< NE longitude corner of box *\/$/;"	m	struct:lonlat2pixline_struct
NFLAG	pml_iop.h	5;"	d
NFLAGS	l12_parms.h	17;"	d
NGAIN	l1_czcs_hdf.c	166;"	d	file:
NGAIN	l1_octs_hdf.c	92;"	d	file:
NGASTT	COMMONS_INC.f	/^      INTEGER NGASTT$/;"	v
NGIOPFLAGS	l12_parms.h	19;"	d
NH2O_MAX	COMMONS_INC.f	/^      INTEGER NP_HI, NP_MED, NP_STD, NH2O_MAX$/;"	v
NHABFLAGS	mph_flags.h	17;"	d
NIGHTSCENE	l12_parms.h	137;"	d
NIGHTSCENE	scene_meta.h	7;"	d
NIGHT_MODE	main_l1info.c	56;"	d	file:
NINPRODS	l12_parms.h	20;"	d
NIR_OPTIM_CONSTRAINT	atmcor_soa.f	1150;"	c	subroutine:DRV_TAUVV_ZXMWD
NITEMPTR	b128_msk_get.c	6;"	d	file:
NLAMBDA	atmcor_soa.f	/^      INTEGER  NMI,NMR,NLAMBDA$/;"	v
NLATMAXv6a	sst.c	51;"	d	file:
NLATMAXv6mv	sst.c	43;"	d	file:
NLW412	bin_climatology.c	12;"	d	file:
NMAX	atmcor_soa.f	/^      INTEGER    NMAX$/;"	v
NMI	atmcor_soa.f	/^      INTEGER  NMI,/;"	v
NMIR	polcor.c	10;"	d	file:
NMODEL	par_utils.c	41;"	d	file:
NMODEL	par_utils.h	13;"	d
NMPHFLAGS	mph_flags.h	11;"	d
NMR	atmcor_soa.f	/^      INTEGER  NMI,NMR,/;"	v
NO	l12_parms.h	36;"	d
NO06	l1_aci_hdf.h	5;"	d
NO07	l1_aci_hdf.h	6;"	d
NO08	l1_aci_hdf.h	7;"	d
NO09	l1_aci_hdf.h	8;"	d
NO10	l1_aci_hdf.h	9;"	d
NO11	l1_aci_hdf.h	10;"	d
NO12	l1_aci_hdf.h	11;"	d
NO14	l1_aci_hdf.h	12;"	d
NO15	l1_aci_hdf.h	13;"	d
NO16	l1_aci_hdf.h	14;"	d
NO17	l1_aci_hdf.h	15;"	d
NO18	l1_aci_hdf.h	16;"	d
NO19	l1_aci_hdf.h	17;"	d
NO2CF_INIT1	atrem_app_refl_plus_gas_removal_l2.f90	1072;"	c	subroutine:INIT_SPECCAL
NO2CF_INIT1	atrem_bndprms.f	962;"	c	block data:no2cf_init
NO2_BIT	l12_parms.h	92;"	d
NO3PT	COMMONS_INC.f	/^      INTEGER NO3PT /;"	v
NOBRDF	l12_parms.h	83;"	d
NOCBANDS	l1_octs_hdf.c	47;"	d	file:
NODATA	ice_mask.c	42;"	d	file:
NOMATCH_ERROR	l12_parms.h	111;"	d
NORAMAN	raman.c	40;"	d	file:
NORDER	rayleigh.c	42;"	d	file:
NORTH	main_l1info.c	39;"	d	file:
NOTDONE	l1a_seawifs.c	17;"	d	file:
NO_DATA	niwa_iop.c	/^const float NO_DATA = BAD_FLT;             $/;"	v
NP	l1_mos_hdf.c	26;"	d	file:
NPAR	gsm.c	28;"	d	file:
NPAR	swim.c	35;"	d	file:
NPARETALAS	las_iop.c	406;"	d	file:
NPHASE	par_utils.h	14;"	d
NPIX	l1_xcal_hdf.c	14;"	d	file:
NPRM	anc_acq.c	19;"	d	file:
NPROD	smi_climatology.h	4;"	d
NP_HI	COMMONS_INC.f	/^      INTEGER NP_HI,/;"	v
NP_MED	COMMONS_INC.f	/^      INTEGER NP_HI, NP_MED,/;"	v
NP_STD	COMMONS_INC.f	/^      INTEGER NP_HI, NP_MED, NP_STD,/;"	v
NQMAX	l12_parms.h	12;"	d
NQMIN	l12_parms.h	11;"	d
NQSSTFLAGS	l12_parms.h	21;"	d
NQUALMAXv6a	sst.c	52;"	d	file:
NQUALMAXv6mv	sst.c	44;"	d	file:
NQUARMAXv6a	sst.c	48;"	d	file:
NQUARMAXv6mv	sst.c	40;"	d	file:
NR	l1_octs_hdf.c	41;"	d	file:
NRADTAB	l1_aci_hdf.c	19;"	d	file:
NRANSI	fuzzy_func_v3.c	20;"	d	file:
NRANSI	ludcmp.c	3;"	d	file:
NRANSI	ludcmp.c	58;"	d	file:
NREC_IN_BUF	l12_seawifs.c	7;"	d	file:
NREC_IN_BUF	l1_czcs_hdf.c	10;"	d	file:
NREC_IN_BUF	l1a_osmi.c	13;"	d	file:
NREC_IN_BUF	l1a_seawifs.c	15;"	d	file:
NROWS	ice_mask.c	32;"	d	file:
NRRS	owt.c	7;"	d	file:
NR_END	fuzzy_func_v3.c	31;"	d	file:
NR_END	nrutil.c	4;"	d	file:
NS	l1_mos_hdf.c	27;"	d	file:
NS	par_utils.c	42;"	d	file:
NSEG	l1_octs_hdf.c	91;"	d	file:
NSEN	rayleigh.c	41;"	d	file:
NSENZ	d3940tref.h	3;"	d
NSENZMAXv6a	sst.c	49;"	d	file:
NSENZMAXv6mv	sst.c	41;"	d	file:
NSEW	get_nc_height.c	/^    double NSEW[4];  \/**< ideal boundaries of tile, including border *\/$/;"	m	struct:__anon25	file:
NSOL	rayleigh.c	40;"	d	file:
NSSESDIMv6a	sst.c	53;"	d	file:
NSSESDIMv6mv	sst.c	45;"	d	file:
NSSTFLAGS	l12_parms.h	18;"	d
NSSTMAXv6a	sst.c	47;"	d	file:
NSSTMAXv6mv	sst.c	39;"	d	file:
NT	par_utils.c	43;"	d	file:
NTAB	cdom_morel.c	3;"	d	file:
NTEV2	sstref.c	25;"	d	file:
NTILT	l1_octs_hdf.c	88;"	d	file:
NTIRBANDS	l1_aci_hdf.c	15;"	d	file:
NTWAVE	brdf.c	162;"	d	file:
NTWIND	brdf.c	163;"	d	file:
NULL	misc.h	45;"	d
NUM	l1_mos_hdf.c	32;"	d	file:
NUMERATOR	l1_viirs_h5.c	21;"	d	file:
NUMPTSTOBUFFER	mipoly.h	100;"	d
NUMRADFILES	l1_olci.c	12;"	d	file:
NUM_GEO_DATA	l1_hico_h5.c	11;"	d	file:
NUM_SPACECRAFT_DIRECTION_MODES	main_l1info.c	34;"	d	file:
NUM_SPECTRA	qaa.c	599;"	d	file:
NVARS_GEO	l1b_viirs_nc.c	/^    NVARS_GEO$/;"	e	enum:geo_var	file:
NVARS_L1BSCN	l1b_viirs_nc.c	/^    NVARS_L1BSCN$/;"	e	enum:l1bscn_var	file:
NVARS_NAV	l1b_viirs_nc.c	/^    NVARS_NAV$/;"	e	enum:nav_var	file:
NVARS_SCN	l1b_viirs_nc.c	/^    NVARS_SCN$/;"	e	enum:scn_var	file:
NVIRBANDS	l1_aci_hdf.c	14;"	d	file:
NWIND	rayleigh.c	43;"	d	file:
NWTS	owt.c	8;"	d	file:
NX	carder.c	40;"	d	file:
NX	ice_mask.c	17;"	d	file:
NX	smi_climatology.c	5;"	d	file:
NXANC	setanc.c	12;"	d	file:
NXNO2	setanc.c	10;"	d	file:
NY	ice_mask.c	18;"	d	file:
NY	smi_climatology.c	6;"	d	file:
NYANC	setanc.c	13;"	d	file:
NYNO2	setanc.c	11;"	d	file:
N_A	brdf.c	282;"	d	file:
N_C	brdf.c	280;"	d	file:
N_ITER	carder.c	41;"	d	file:
N_MS	l1_viirs_h5.c	19;"	d	file:
N_N	brdf.c	281;"	d	file:
N_PRM_HEADERS	carder.c	39;"	d	file:
N_S	brdf.c	279;"	d	file:
N_W	brdf.c	278;"	d	file:
Nbands	aerosol.c	/^static int32_t Nbands ;$/;"	v	file:
NullBox	misc.h	66;"	d
O3CF	atrem_bndprms.f	/^      REAL       O3CF(/;"	v	block data:o3cf_init
O3CF_INIT1	atrem_app_refl_plus_gas_removal_l2.f90	1066;"	c	subroutine:INIT_SPECCAL
O3CF_INIT1	atrem_bndprms.f	23;"	c	block data:o3cf_init
O3_BIT	l12_parms.h	90;"	d
OBSERVED	l1_xcal_hdf.c	12;"	d	file:
OC4_CHL4S	atmcor_soa.f	/^      REAL FUNCTION OC4_CHL4S(/;"	f
OFF	l12_parms.h	34;"	d
OI1NX	sstref.c	1206;"	d	file:
OI1NY	sstref.c	1207;"	d	file:
OI4NX	ice_mask.c	54;"	d	file:
OI4NX	sstref.c	369;"	d	file:
OI4NX	sstref.c	45;"	d	file:
OI4NX	sstref.c	519;"	d	file:
OI4NX	sstref.c	783;"	d	file:
OI4NX	sstref.c	976;"	d	file:
OI4NY	ice_mask.c	55;"	d	file:
OI4NY	sstref.c	370;"	d	file:
OI4NY	sstref.c	46;"	d	file:
OI4NY	sstref.c	520;"	d	file:
OI4NY	sstref.c	784;"	d	file:
OI4NY	sstref.c	977;"	d	file:
OINX	sstref.c	241;"	d	file:
OINY	sstref.c	242;"	d	file:
OISSTBIN	sstref.c	20;"	d	file:
OISSTV2D	sstref.c	21;"	d	file:
OLDAERMOD	l12_parms.h	121;"	d
ON	l12_parms.h	35;"	d
ONBOARD_PT_FLOAT32_FILL	l1_viirs_h5.h	18;"	d
ONBOARD_PT_UINT16_FILL	l1_viirs_h5.h	19;"	d
ONGROUND_PT_FLOAT32_FILL	l1_viirs_h5.h	20;"	d
ONGROUND_PT_UINT16_FILL	l1_viirs_h5.h	21;"	d
OPENINFILE	atrem_cubeio.f90	/^      SUBROUTINE OPENINFILE(/;"	s	module:cubeio
OPENOUTFILE	atrem_cubeio.f90	/^      SUBROUTINE OPENOUTFILE(/;"	s	module:cubeio
OPENVAPFILE	atrem_cubeio.f90	/^      SUBROUTINE OPENVAPFILE(/;"	s	module:cubeio
OPTFUNCREAL	atmcor_soa.f	1139;"	c	subroutine:DRV_TAUVV_ZXMWD
OPTFUNCREAL	atmcor_soa.f	2081;"	c	subroutine:MAIN_OPTIM_INOUT_PROC
OPTFUNCREAL	atmcor_soa.f	693;"	c	subroutine:SPEC1GEOFIT
OUTCUBE	atrem_app_refl_plus_gas_removal_l2.f90	407;"	c	subroutine:GET_INPUT
OUTCUBE	atrem_cubeio.f90	28;"	c	subroutine:OPENOUTFILE
OUTH2OVAP	atrem_app_refl_plus_gas_removal_l2.f90	409;"	c	subroutine:GET_INPUT
OUTH2OVAP	atrem_cubeio.f90	43;"	c	subroutine:OPENVAPFILE
OZ_KG_M2_TO_DU	anc_acq.c	21;"	d	file:
PARAM_TYPE_ALL_WAVE	l2prod_struc.h	14;"	d
PARAM_TYPE_BAND	l2prod_struc.h	15;"	d
PARAM_TYPE_INT	l2prod_struc.h	16;"	d
PARAM_TYPE_NONE	l2prod_struc.h	11;"	d
PARAM_TYPE_VIS_WAVE	l2prod_struc.h	12;"	d
PARW1	fluorescence.c	16;"	d	file:
PARW1	ipar.c	10;"	d	file:
PARW2	fluorescence.c	17;"	d	file:
PARW2	ipar.c	11;"	d	file:
PARWN	fluorescence.c	18;"	d	file:
PARWN	ipar.c	12;"	d	file:
PATHCLIM	sstref.c	19;"	d	file:
PI	l12_parms.h	115;"	d
PI	read9km_mask.c	19;"	d	file:
PILAGRANGE	atmcor_soa.f	/^      SUBROUTINE PILAGRANGE(/;"	s
PIXEL	misc.h	/^typedef uint32_t PIXEL;$/;"	t
PMLRecNum	get_pml.c	/^static int PMLRecNum = -1;$/;"	v	file:
PML_FILE_ENDIAN	pml_iop_tables.c	20;"	d	file:
PNG	main_l1brsgen.c	42;"	d	file:
POS_ERR_THRESH	l1_czcs_hdf.c	12;"	d	file:
PPM	main_l1brsgen.c	40;"	d	file:
PRINT_USAGE	main_l1info.c	107;"	d	file:
PRODFAIL	l2_flags.h	39;"	d
PRODSTRLEN	l2prod.h	5;"	d
PRODWARN	l2_flags.h	11;"	d
PROGRAM	l12_parms.h	7;"	d
PROJECT	l12_proto.h	77;"	d
PSD_slope	get_psd_ksm.c	/^float PSD_slope[449] = { 3.04, 3.042, 3.046, 3.05, 3.053, 3.056, 3.059, 3.062,$/;"	v
PSD_slope_sigma	get_psd_ksm.c	/^float PSD_slope_sigma[449] = { 0.209, 0.209, 0.207, 0.206, 0.205, 0.205, 0.204,$/;"	v
PSIZE	l1_mos_hdf.c	30;"	d	file:
PUBLISHER_EMAIL	l12_proto.h	79;"	d
PUBLISHER_NAME	l12_proto.h	78;"	d
PUBLISHER_URL	l12_proto.h	80;"	d
ProbablyClear	cloud_flag.c	6;"	d	file:
ProbablyCloudy	cloud_flag.c	5;"	d	file:
QAA555	l12_parms.h	108;"	d
QAA640	l12_parms.h	109;"	d
QAABLEND	l12_parms.h	107;"	d
QAA_APH_CHECK	qaa.h	/^     QAA_APH_CHECK   = 8$/;"	e	enum:__anon43
QAA_COEFS_PARAM	qaa.h	/^     QAA_COEFS_PARAM = 3,$/;"	e	enum:__anon43
QAA_S_PARAM	qaa.h	/^     QAA_S_PARAM     = 1,$/;"	e	enum:__anon43
QMOREL	l12_parms.h	88;"	d
QUADINTRP	atmcor_soa.f	/^      SUBROUTINE QUADINTRP(/;"	s
QaaRecNum	get_qaa.c	/^static int QaaRecNum = -1;$/;"	v	file:
RADEG	l12_parms.h	117;"	d
RADIUS	l1_octs_hdf.c	39;"	d	file:
RAD_OFFSET	l1_hmodis_hdf.c	/^    RAD_OFFSET,     \/*< radiance_offsets    *\/$/;"	e	enum:L1B_COEFFS	file:
RAD_SCALE	l1_hmodis_hdf.c	/^    RAD_SCALE,      \/*< radiance_scales     *\/$/;"	e	enum:L1B_COEFFS	file:
RAW_CAL	rawcal.h	/^} RAW_CAL;$/;"	t	typeref:struct:__anon44
RD_SLICE	atrem_cubeio.f90	/^      SUBROUTINE RD_SLICE(/;"	s	module:cubeio
RE	ice_mask.c	37;"	d	file:
READ	filehandle.h	17;"	d
READIT	ice_mask.c	168;"	d	file:
READ_GLBL_ATTR	l1_hdf_generic_read.c	13;"	d	file:
READ_GLBL_ATTR	l1_ocm2_hdf.c	14;"	d	file:
READ_MODEL_DATA	atmcor_soa.f	/^      SUBROUTINE READ_MODEL_DATA /;"	s
READ_SDS	l1_hdf_generic_read.c	21;"	d	file:
READ_SDS	l1_ocm2_hdf.c	22;"	d	file:
REFLEC	getglint.f	/^        subroutine REFLEC /;"	s
REFLEC_BOTH	getglint.f	/^        subroutine REFLEC_BOTH /;"	s
REFL_OFFSET	l1_hmodis_hdf.c	/^    REFL_OFFSET,    \/*< reflectance_offsets *\/$/;"	e	enum:L1B_COEFFS	file:
REFL_SCALE	l1_hmodis_hdf.c	/^    REFL_SCALE,     \/*< reflectance_scales  *\/$/;"	e	enum:L1B_COEFFS	file:
REFWVL	bioOptBandShift.c	20;"	d	file:
REFWVL	convert_band.c	9;"	d	file:
REF_NUM_SDS	l1_hmodis_hdf.c	/^    REF_NUM_SDS     \/*< last entry = number of SDSs *\/$/;"	e	enum:REF_SDS	file:
REF_SDS	l1_hmodis_hdf.c	/^enum REF_SDS {$/;"	g	file:
REMM	get_nc_height.c	17;"	d	file:
RFACTOR	l2_generic.c	86;"	d	file:
RLQAMT	COMMONS_INC.f	/^      REAL    RLQAMT /;"	v
RNO2CF	atrem_bndprms.f	/^      REAL       RNO2CF(/;"	v	block data:no2cf_init
ROOT2	main_l1mapgen.c	59;"	d	file:
ROUND	l2_generic.c	43;"	d	file:
RRSFOQ	giop.h	57;"	d
RRSGRD	giop.h	56;"	d
RSB	l1b_viirs_nc.c	/^enum bandtypes { RSB, TEB, CIR };$/;"	e	enum:bandtypes	file:
RSB_1KM	l1_hmodis_hdf.c	/^    RSB_1KM,     \/*< all other reflective bands *\/$/;"	e	enum:L1B_SDS	file:
RSB_250	l1_hmodis_hdf.c	/^    RSB_250,     \/*< Bands 1 & 2         *\/$/;"	e	enum:L1B_SDS	file:
RSB_500	l1_hmodis_hdf.c	/^    RSB_500,     \/*< Bands 3 - 7         *\/$/;"	e	enum:L1B_SDS	file:
RUN_CAL	runcal.h	/^} RUN_CAL;$/;"	t	typeref:struct:__anon45
R_W	met_cvt.h	37;"	d
ReadSDS	l1_mos_hdf.c	/^int ReadSDS(filehandle *l1file)$/;"	f
RemoveWhitespace	l1_mos_hdf.c	/^int RemoveWhitespace(char arr[MAXLEN])$/;"	f
Rrs	get_qaa.c	/^static float *Rrs;           \/* above-water remote sensing reflectance  *\/$/;"	v	file:
Rrs	l2_struc.h	/^    float  *Rrs; \/\/Remote sensing reflectance$/;"	m	struct:l2_struct
Rrs_norm	virtual_constellation.c	/^static float Rrs_norm = 0.025;$/;"	v	file:
Rrs_ram	raman.c	/^static float *Rrs_ram;  \/\/Rrs due to Raman scattering$/;"	v	file:
Rrs_raman	l2_struc.h	/^    float *Rrs_raman;$/;"	m	struct:l2_struct
Rrs_unc	l2_struc.h	/^    float  *Rrs_unc;$/;"	m	struct:l2_struct
Rrs_vc_convert	virtual_constellation.c	/^float Rrs_vc_convert(l2str *l2rec, int ip, int ib) {$/;"	f
Rrs_vc_modisa	virtual_constellation.c	/^float Rrs_vc_modisa(l2str *l2rec, int32_t ip, int32_t ibvc) {$/;"	f
Rrs_vc_modist	virtual_constellation.c	/^float Rrs_vc_modist(l2str *l2rec, int32_t ip, int32_t ibvc) {$/;"	f
Rrs_vc_seawifs	virtual_constellation.c	/^float Rrs_vc_seawifs(l2str *l2rec, int32_t ip, int32_t ibvc) {$/;"	f
Rrs_vc_viirs	virtual_constellation.c	/^float Rrs_vc_viirs(l2str *l2rec, int32_t ip, int32_t ibvc) {$/;"	f
S	qaa.c	/^static double S = 0.015;$/;"	v	file:
SAMPLESIZE	globals.h	23;"	d
SBUF	l1_xcal_hdf.c	15;"	d	file:
SCANFILLINCLUDED	miscanfill.h	3;"	d
SCN_GRP	l1b_viirs_nc.c	/^static const char* SCN_GRP = "scan_line_attributes";$/;"	v	file:
SCN_MODE	l1b_viirs_nc.c	/^    SCN_MODE,  \/*< ubyte  sensor_mode     *\/$/;"	e	enum:scn_var	file:
SCN_MSIDE	l1b_viirs_nc.c	/^    SCN_MSIDE, \/*< ubyte  HAM_side        *\/$/;"	e	enum:scn_var	file:
SCN_QUAL	l1b_viirs_nc.c	/^    SCN_QUAL,  \/*< short  scan_quality    *\/$/;"	e	enum:scn_var	file:
SCN_STIME	l1b_viirs_nc.c	/^    SCN_STIME, \/*< double scan_start_time *\/$/;"	e	enum:scn_var	file:
SCOLS	ice_mask.c	35;"	d	file:
SDNAME	l1_aci_hdf.c	21;"	d	file:
SDSLIST_1KM	l1_hmodis_hdf.c	/^static sdslist SDSLIST_1KM[] = {    \/\/ 1KM file contents$/;"	v	file:
SDSLIST_GEO	l1_hmodis_hdf.c	/^static const sdslist SDSLIST_GEO[] = {$/;"	v	file:
SDSLIST_HKM	l1_hmodis_hdf.c	/^static sdslist SDSLIST_HKM[] = {    \/\/ HKM file contents$/;"	v	file:
SDSLIST_QKM	l1_hmodis_hdf.c	/^static sdslist SDSLIST_QKM[] = {    \/\/ QKM file$/;"	v	file:
SDSLIST_REF	l1_hmodis_hdf.c	/^static const sdslist SDSLIST_REF[] = {$/;"	v	file:
SEAICE	l2_flags.h	33;"	d
SEAWIFS_NBANDS	niwa_iop.c	35;"	d	file:
SECTOR_ROTATION	main_l1info.c	48;"	d	file:
SEC_PER_DAY	viirs_utls.c	47;"	d	file:
SETNAME_3UTR_FLY	globals.h	37;"	d
SETNAME_3UTR_HUMAN	globals.h	39;"	d
SETNAME_3UTR_WORM	globals.h	38;"	d
SHFT	numerical.c	186;"	d	file:
SHFT	numerical.c	249;"	d	file:
SHFT	numerical.c	255;"	d	file:
SHORTNAME	mscal_struc.h	7;"	d
SIGN	nrutil.h	42;"	d
SIGN	numerical.c	185;"	d	file:
SIGN	numerical.c	248;"	d	file:
SIGN	numerical.c	254;"	d	file:
SIGN	numerical.c	325;"	d	file:
SIMPNE	simpsn.f	/^      ENTRY SIMPNE /;"	e	function:SIMPSN
SIMPSN	simpsn.f	/^      FUNCTION SIMPSN /;"	f
SI_val	l1_hmodis_hdf.c	/^    double *SI_val; \/*< radiance level converted to scaled integer *\/$/;"	m	struct:__anon35	file:
SKIP	l1_aviris.c	18;"	d	file:
SKIP	l1_prism.c	19;"	d	file:
SLAT	ice_mask.c	40;"	d	file:
SLLSPERBLOCK	mipoly.h	89;"	d
SLLs	mipoly.h	/^     ScanLineList SLLs[SLLSPERBLOCK];$/;"	m	struct:_ScanLineListBlock
SMA_OUT	soa_sma_utils.f	126;"	c	subroutine:CLEAR_SOA_PROD
SMA_OUT	soa_sma_utils.f	162;"	c	subroutine:CLEAR_SMA_PROD
SMA_OUT	soa_sma_utils.f	77;"	c	subroutine:GET_SMA_PROD
SMM_GENERIC	atmcor_soa.f	692;"	c	subroutine:SPEC1GEOFIT
SOA_OUT	soa_sma_utils.f	124;"	c	subroutine:CLEAR_SOA_PROD
SOA_OUT	soa_sma_utils.f	22;"	c	subroutine:GET_SOA_PROD
SOLZNIGHT	l12_parms.h	134;"	d
SOLZNIGHTA	l12_parms.h	135;"	d
SOUB_FLOAT32_FILL	l1_viirs_h5.h	28;"	d
SOUB_UINT16_FILL	l1_viirs_h5.h	29;"	d
SOUTH	main_l1info.c	40;"	d	file:
SPACE	l1_mos_hdf.c	31;"	d	file:
SPARE1	l2_flags.h	16;"	d
SPARE2	l2_flags.h	22;"	d
SPARE3	l2_flags.h	27;"	d
SPARE4	l2_flags.h	32;"	d
SPARE5	l2_flags.h	36;"	d
SPARE7	l2_flags.h	40;"	d
SPEC1GEOFIT	atmcor_soa.f	/^      SUBROUTINE SPEC1GEOFIT(/;"	s
SPEC_GEOM	atmcor_soa.f	1137;"	c	subroutine:DRV_TAUVV_ZXMWD
SPEC_GEOM	atmcor_soa.f	1680;"	c	function:FCN_TAUVV_DIFFTRAN
SPEC_GEOM	atmcor_soa.f	6667;"	c	subroutine:INBAND
SPEC_GEOM	atmcor_soa.f	685;"	c	subroutine:SPEC1GEOFIT
SPEC_MISC	atmcor_soa.f	2088;"	c	subroutine:MAIN_OPTIM_INOUT_PROC
SPEC_MISC	atmcor_soa.f	699;"	c	subroutine:SPEC1GEOFIT
SQR	nrutil.h	5;"	d
SRC_ATREM_ATREM_H_	atrem_corl1.h	9;"	d
SRC_L2GEN_AVIRIS_H_	aviris.h	9;"	d
SRC_L2GEN_JPLAERIALLIB_H_	jplaeriallib.h	9;"	d
SRC_L2GEN_MPH_FLAGS_H_	mph_flags.h	9;"	d
SRC_L2GEN_OLCI_H_	olci.h	9;"	d
SRC_L2GEN_PRISM_H_	prism.h	9;"	d
SROWS	ice_mask.c	34;"	d	file:
SST	smi_climatology.h	7;"	d
SST3diff1	sst.c	/^static float SST3diff1 = 0.8;$/;"	v	file:
SST3diff2	sst.c	/^static float SST3diff2 = 1.0;$/;"	v	file:
SST4diff1	sst.c	/^static float SST4diff1 = 0.8;$/;"	v	file:
SST4diff2	sst.c	/^static float SST4diff2 = 1.0;$/;"	v	file:
SSTF_ASCEND	flags_sst.h	18;"	d
SSTF_BT4REFDIFF	flags_sst.h	21;"	d
SSTF_BTBAD	flags_sst.h	8;"	d
SSTF_BTDIFF	flags_sst.h	10;"	d
SSTF_BTNONUNIF	flags_sst.h	19;"	d
SSTF_BTRANGE	flags_sst.h	9;"	d
SSTF_BTVNONUNIF	flags_sst.h	20;"	d
SSTF_CLOUD	flags_sst.h	27;"	d
SSTF_GLINT	flags_sst.h	22;"	d
SSTF_HISENZ	flags_sst.h	24;"	d
SSTF_ISMASKED	flags_sst.h	7;"	d
SSTF_REDNONUNIF	flags_sst.h	23;"	d
SSTF_SST3DIFF	flags_sst.h	14;"	d
SSTF_SST3VDIFF	flags_sst.h	17;"	d
SSTF_SST4DIFF	flags_sst.h	13;"	d
SSTF_SST4VDIFF	flags_sst.h	16;"	d
SSTF_SSTRANGE	flags_sst.h	11;"	d
SSTF_SSTREFDIFF	flags_sst.h	12;"	d
SSTF_SSTREFVDIFF	flags_sst.h	26;"	d
SSTF_SUNLIGHT	flags_sst.h	15;"	d
SSTF_VHISENZ	flags_sst.h	25;"	d
SSTMODS	l12_parms.h	130;"	d
SSTdiff	sst.c	/^static float SSTdiff = 3.0;$/;"	v	file:
SSTdiffa	sst.c	/^static float SSTdiffa = 2.0;$/;"	v	file:
SSTmax	sst.c	/^static float SSTmax = 40.0; \/* pre Nov 2012 was 45.0 *\/$/;"	v	file:
SSTmaxa	sst.c	/^static float SSTmaxa = 40.0; \/* pre Nov 2012 was 35.0 *\/$/;"	v	file:
SSTmaxn	sst.c	/^static float SSTmaxn = 37.0; \/* night sst max *\/$/;"	v	file:
SSTmin	sst.c	/^static float SSTmin = -2.0;$/;"	v	file:
SSTvdiff	sst.c	/^static float SSTvdiff = 5.0;$/;"	v	file:
STBUFSIZ	l12_seawifs.c	8;"	d	file:
STBUFSIZ	l1a_seawifs.c	16;"	d	file:
STDDEV	globals.h	22;"	d
STDMAXSCANS	l1_viirs_h5.c	17;"	d	file:
STDNAME_VOCABULARY	l12_proto.h	73;"	d
STDPR	l12_parms.h	118;"	d
STDPROC	l12_parms.h	120;"	d
STRAYLIGHT	l2_flags.h	17;"	d
SUCCESS	l12_parms.h	23;"	d
SVDFIT	giop.h	8;"	d
SVDSIOP	giop.h	9;"	d
SVN_REVISION	version.h	4;"	d
SWA	l12_parms.h	142;"	d
SWBB	l12_parms.h	143;"	d
SWN	l12_parms.h	141;"	d
SWlat	lonlat2pixline.h	/^        float SWlat; \/**< SW latitude corner of box *\/$/;"	m	struct:lonlat2pixline_struct
SWlon	lonlat2pixline.h	/^        float SWlon; \/**< SW longitude corner of box *\/$/;"	m	struct:lonlat2pixline_struct
ScanLineList	mipoly.h	/^} ScanLineList;$/;"	t	typeref:struct:_ScanLineList
ScanLineListBlock	mipoly.h	/^} ScanLineListBlock;$/;"	t	typeref:struct:_ScanLineListBlock
Sdg	raman.c	/^static float Sdg;          \/\/Exponential slope of adg$/;"	v	file:
Setup	bioOptBandShift.c	/^void Setup(l2str *l2rec, ccstr *vccp){$/;"	f
StartOfMonth	sst.c	/^static int StartOfMonth[2][12] = { { 0, 31, 59, 90, 120, 151, 181, 212, 243,$/;"	v	file:
SwapRestL	misc.h	125;"	d
SwapRestS	misc.h	122;"	d
TAUA865	smi_climatology.h	6;"	d
TAUVV	atmcor_soa.f	1146;"	c	subroutine:DRV_TAUVV_ZXMWD
TAUVV	atmcor_soa.f	1682;"	c	function:FCN_TAUVV_DIFFTRAN
TAUVV_MISC	atmcor_soa.f	1683;"	c	function:FCN_TAUVV_DIFFTRAN
TAUVV_MISC	atmcor_soa.f	700;"	c	subroutine:SPEC1GEOFIT
TBLMAX	atrem_corl1.h	17;"	d
TBLMAXM1	atrem_corl1.h	18;"	d
TEB	l1b_viirs_nc.c	/^enum bandtypes { RSB, TEB, CIR };$/;"	e	enum:bandtypes	file:
TEB_1KM	l1_hmodis_hdf.c	/^    TEB_1KM,     \/*< all thermal bands   *\/$/;"	e	enum:L1B_SDS	file:
TEMP_REF	l1_aci_hdf.c	17;"	d	file:
THERM	l1_viirs_h5.c	54;"	d	file:
THETA_INTERCEPT_3UTR_FLY	globals.h	44;"	d
THETA_INTERCEPT_3UTR_HUMAN	globals.h	54;"	d
THETA_INTERCEPT_3UTR_WORM	globals.h	49;"	d
THETA_SLOPE_3UTR_FLY	globals.h	43;"	d
THETA_SLOPE_3UTR_HUMAN	globals.h	53;"	d
THETA_SLOPE_3UTR_WORM	globals.h	48;"	d
TH_NS	niwa_iop.c	39;"	d	file:
TIE_COL_PTS	l1_olci.c	14;"	d	file:
TIE_ROW_PTS	l1_olci.c	13;"	d	file:
TILE_ROWS	get_nc_height.c	11;"	d	file:
TINY	ludcmp.c	57;"	d	file:
TINY	ludcmp.c	5;"	d	file:
TINY	numerical.c	183;"	d	file:
TINY	numerical.c	246;"	d	file:
TITLELEN	l2prod_struc.h	9;"	d
TI_BAD	turbid.c	2;"	d	file:
TLg	l1_struc.h	/^    float  *TLg;$/;"	m	struct:l1_struct
TLg	l2_struc.h	/^    float  *TLg; \/\/ directly transmitted glint radiance$/;"	m	struct:l2_struct
TMP_FILENAME_MAX	main_l1info.c	50;"	d	file:
TPVMR_INIT	atrem_tpvmr_init.f	/^      BLOCK DATA TPVMR_INIT$/;"	b
TPVMR_INIT1	atrem_app_refl_plus_gas_removal_l2.f90	404;"	c	subroutine:GET_INPUT
TPVMR_INIT1	atrem_tpvmr_init.f	33;"	c	block data:TPVMR_INIT
TRANCAL1	atrem_app_refl_plus_gas_removal_l2.f90	1697;"	c	subroutine:TRAN_TABLE
TRANSSPHER	l12_parms.h	132;"	d
TRAN_HI	COMMONS_INC.f	/^      REAL TRAN_HI(/;"	v
TRAN_HI_OTHERS	COMMONS_INC.f	/^      REAL TRAN_HI_OTHERS(/;"	v
TRAN_MED	COMMONS_INC.f	/^      REAL TRAN_MED(/;"	v
TRAN_MED_INDEX	COMMONS_INC.f	/^      REAL    WAVLN_MED_INDEX(NP_MED), TRAN_MED_INDEX(/;"	v
TRAN_SMOOTH	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE TRAN_SMOOTH$/;"	s
TRAN_SMOOTH_OTHERS	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE TRAN_SMOOTH_OTHERS$/;"	s
TRAN_STD	COMMONS_INC.f	/^      REAL TRAN_STD(/;"	v
TRAN_TABLE	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE TRAN_TABLE$/;"	s
TRAN_TABLE1	atrem_app_refl_plus_gas_removal_l2.f90	1696;"	c	subroutine:TRAN_TABLE
TRAN_TABLE1	atrem_app_refl_plus_gas_removal_l2.f90	2247;"	c	subroutine:TRAN_SMOOTH
TRAN_TABLE1	atrem_app_refl_plus_gas_removal_l2.f90	2502;"	c	subroutine:TRAN_SMOOTH_OTHERS
TRAN_TABLE1	atrem_app_refl_plus_gas_removal_l2.f90	2731;"	c	subroutine:CHNLRATIO
TRUE	main_l1info.c	43;"	d	file:
TRUE	main_l1info.c	46;"	d	file:
TRUE	misc.h	61;"	d
TRYMEM	l1_hmodis_hdf.c	21;"	d	file:
TSTAR	dtran_brdf.f	607;"	c	subroutine:read_tstar
TSTAR	dtran_brdf.f	97;"	c	subroutine:diff_tran_corr
TURBIDW	l2_flags.h	20;"	d
T_HIGH	l1_aci_hdf.c	/^static float T_HIGH = 370.; \/* Limit of 375K in etbpsub.f *\/$/;"	v	file:
T_LOW	l1_aci_hdf.c	/^static float T_LOW = 185.; \/* Limit of 180K in etbpsub.f *\/$/;"	v	file:
Tau_r	l1_struc.h	/^    float       *Tau_r ;$/;"	m	struct:l1_struct
Tau_r	l2_struc.h	/^    float  *Tau_r; \/\/Rayleigh optical thickness$/;"	m	struct:l2_struct
TimeToSec	l1_mos_hdf.c	/^int32_t TimeToSec(int32_t yr, int32_t mo, int32_t dm, int32_t hr, int32_t mn, int32_t sec)$/;"	f
ToAboveWater	bioOptBandShift.c	/^float ToAboveWater(float rrsBelow)$/;"	f
ToBelowWater	bioOptBandShift.c	/^float ToBelowWater(float rrsAbove)$/;"	f
UNITLEN	l2prod_struc.h	8;"	d
UNKNOWNNODE	scene_meta.h	13;"	d
UNKNOWNSCENE	l12_parms.h	139;"	d
UNKNOWNSCENE	scene_meta.h	9;"	d
USAGESTR	main_l1info.c	84;"	d	file:
USE_BACKGROUND_PIXEL	misc.h	74;"	d
USE_BORDER_PIXEL	misc.h	75;"	d
USE_PMSL	anc_acq.c	22;"	d	file:
VARLIST_GEO	l1b_viirs_nc.c	/^static const varlist VARLIST_GEO[] = {$/;"	v	file:
VARLIST_L1B	l1b_viirs_nc.c	/^static const varlist VARLIST_L1B[] = {$/;"	v	file:
VARLIST_L1BSCN	l1b_viirs_nc.c	/^static const varlist VARLIST_L1BSCN[] = {$/;"	v	file:
VARLIST_NAV	l1b_viirs_nc.c	/^static const varlist VARLIST_NAV[] = {$/;"	v	file:
VARLIST_SCN	l1b_viirs_nc.c	/^static const varlist VARLIST_SCN[] = {$/;"	v	file:
VBANDS	niwa_iop.c	34;"	d	file:
VDNE_FLOAT32_FILL	l1_viirs_h5.h	26;"	d
VDNE_UINT16_FILL	l1_viirs_h5.h	27;"	d
VEND	COMMONS_INC.f	/^      REAL VSTART, VEND,/;"	v
VERB	niwa_iop.c	50;"	d	file:
VERSION_SPL	main_lonlat2pixline.c	60;"	d	file:
VICARIOUS	l1_xcal_hdf.c	13;"	d	file:
VSTART	COMMONS_INC.f	/^      REAL VSTART,/;"	v
VSWIR	l1_viirs_h5.c	53;"	d	file:
V_ABCD	atmcor_soa.f	1148;"	c	subroutine:DRV_TAUVV_ZXMWD
V_ABCD	atmcor_soa.f	1686;"	c	function:FCN_TAUVV_DIFFTRAN
V_EXTRA	atmcor_soa.f	1007;"	c	function:COMPCANDDATA
V_EXTRA	atmcor_soa.f	1687;"	c	function:FCN_TAUVV_DIFFTRAN
V_EXTRA	atmcor_soa.f	2087;"	c	subroutine:MAIN_OPTIM_INOUT_PROC
V_MISC	atmcor_soa.f	1147;"	c	subroutine:DRV_TAUVV_ZXMWD
V_MISC	atmcor_soa.f	1685;"	c	function:FCN_TAUVV_DIFFTRAN
V_MISC	atmcor_soa.f	702;"	c	subroutine:SPEC1GEOFIT
WATERPAR	atmcor_soa.f	5334;"	c	subroutine:GS97_CASE2
WATERPAR	atmcor_soa.f	5872;"	c	subroutine:INIT_WATER_PAR1
WATERPAR	atmcor_soa.f	6182;"	c	subroutine:INIT_WATER_PAR2
WATERPAR	atmcor_soa.f	716;"	c	subroutine:SPEC1GEOFIT
WAVE_INDEX_MAX	windex.c	5;"	d	file:
WAVE_INDEX_MIN	windex.c	4;"	d	file:
WAVE_INDEX_NUM	windex.c	3;"	d	file:
WAVLN_MED	COMMONS_INC.f	/^      REAL WAVLN_MED(/;"	v
WAVLN_MED_INDEX	COMMONS_INC.f	/^      REAL    WAVLN_MED_INDEX(/;"	v
WAVLN_STD	COMMONS_INC.f	/^      REAL WAVLN_STD(/;"	v
WAVNO_HI	COMMONS_INC.f	/^      REAL WAVNO_HI(/;"	v
WESTBERRY2013	raman.c	42;"	d	file:
WINDSAT3DAY	sstref.c	28;"	d	file:
WINDSAT3DN	sstref.c	30;"	d	file:
WINDSATDAY	sstref.c	29;"	d	file:
WOACLIM	sssref.c	368;"	d	file:
WOASSSNX	sssref.c	19;"	d	file:
WOASSSNY	sssref.c	20;"	d	file:
WRITE	filehandle.h	18;"	d
WT_LINE	atrem_cubeio.f90	/^      SUBROUTINE WT_LINE(/;"	s	module:cubeio
WT_SLICE	atrem_cubeio.f90	/^      SUBROUTINE WT_SLICE(/;"	s	module:cubeio
XCALPOL	l12_parms.h	67;"	d
XCALRVS	l12_parms.h	66;"	d
XI_INTERCEPT_3UTR_FLY	globals.h	42;"	d
XI_INTERCEPT_3UTR_HUMAN	globals.h	52;"	d
XI_INTERCEPT_3UTR_WORM	globals.h	47;"	d
XI_SLOPE_3UTR_FLY	globals.h	41;"	d
XI_SLOPE_3UTR_HUMAN	globals.h	51;"	d
XI_SLOPE_3UTR_WORM	globals.h	46;"	d
XM12	xcal.h	9;"	d
XM13	xcal.h	10;"	d
XML_algorithm	get_l2prod_index.c	/^void XML_algorithm(FILE* fout, l2prodstr* product) {$/;"	f
XML_file_footer	get_l2prod_index.c	/^void XML_file_footer(FILE* fout) {$/;"	f
XML_file_header	get_l2prod_index.c	/^void XML_file_header(FILE* fout) {$/;"	f
XML_product_footer	get_l2prod_index.c	/^void XML_product_footer(FILE* fout) {$/;"	f
XML_product_header	get_l2prod_index.c	/^void XML_product_header(FILE* fout, l2prodstr* product) {$/;"	f
XRVS	xcal.h	8;"	d
XTNDET	xcal.h	5;"	d
XTNMSIDE	xcal.h	6;"	d
XTNORDER	xcal.h	7;"	d
XTNTIME	xcal.h	4;"	d
X_NOT_POSIX	Xosdefs.h	39;"	d
X_NOT_POSIX	Xosdefs.h	45;"	d
X_NOT_POSIX	Xosdefs.h	50;"	d
X_NOT_POSIX	Xosdefs.h	55;"	d
X_NOT_POSIX	Xosdefs.h	60;"	d
X_NOT_POSIX	Xosdefs.h	66;"	d
X_NOT_POSIX	Xosdefs.h	71;"	d
X_NOT_POSIX	Xosdefs.h	77;"	d
X_NOT_POSIX	Xosdefs.h	84;"	d
X_NOT_STDC_ENV	Xosdefs.h	40;"	d
X_NOT_STDC_ENV	Xosdefs.h	51;"	d
X_NOT_STDC_ENV	Xosdefs.h	61;"	d
X_NOT_STDC_ENV	Xosdefs.h	67;"	d
X_NOT_STDC_ENV	Xosdefs.h	72;"	d
X_NOT_STDC_ENV	Xosdefs.h	78;"	d
X_NOT_STDC_ENV	Xosdefs.h	85;"	d
X_NOT_STDC_ENV	Xosdefs.h	91;"	d
YES	l12_parms.h	37;"	d
Ybbp	raman.c	/^static float Ybbp;          \/\/Power exponent of bbp$/;"	v	file:
ZEPS	numerical.c	253;"	d	file:
ZEPS	numerical.c	324;"	d	file:
ZSRCH	atmcor_soa.f	/^      SUBROUTINE ZSRCH /;"	s
ZXANC	get_zno3.c	10;"	d	file:
ZXMJN	atmcor_soa.f	/^      SUBROUTINE ZXMJN(/;"	s
ZXMWD	atmcor_soa.f	/^      SUBROUTINE ZXMWD /;"	s
ZXMWD_STIX	atmcor_soa.f	7080;"	c	subroutine:ZXMWD
ZXMWD_STIX	atmcor_soa.f	7423;"	c	subroutine:ZXMWE
ZXMWE	atmcor_soa.f	/^      SUBROUTINE ZXMWE /;"	s
ZXMWH_END	atmcor_soa.f	/^      SUBROUTINE ZXMWH_END /;"	s
ZXMWH_INI	atmcor_soa.f	/^      SUBROUTINE ZXMWH_INI /;"	s
ZXMWH_WRITE	atmcor_soa.f	/^      SUBROUTINE ZXMWH_WRITE /;"	s
ZYANC	get_zno3.c	11;"	d	file:
Z_CHL_MAX	photic_depth.c	14;"	d	file:
Zeu_morel	photic_depth.c	/^void Zeu_morel(l2str *l2rec, l2prodstr *p, float *Zeu)$/;"	f
Zhl_morel	get_Kd.c	/^void Zhl_morel(l2str *l2rec, float *Zhl)$/;"	f
Zphotic_lee	photic_depth.c	/^void Zphotic_lee(l2str *l2rec, l2prodstr *p, float Zp[])$/;"	f
Zsd_gbr	photic_depth.c	/^void Zsd_gbr(l2str *l2rec, l2prodstr *p, float *Zsd)$/;"	f
Zsd_morel	photic_depth.c	/^void Zsd_morel(l2str *l2rec, l2prodstr *p, float *Zsd)$/;"	f
_AER_STRUC_H	aer_struc.h	2;"	d
_ARITHCODE_DECLARE_T_	nr.h	13;"	d
_Box	miscstruct.h	/^typedef struct _Box {$/;"	s
_CHL_H	chl.h	2;"	d
_DDXPoint	miscstruct.h	/^typedef struct _DDXPoint {$/;"	s
_DevUnion	miscstruct.h	/^typedef union _DevUnion {$/;"	u
_EdgeTableEntry	mipoly.h	/^typedef struct _EdgeTableEntry {$/;"	s
_FCOMPLEX_DECLARE_T_	nr.h	6;"	d
_FILEHANDLE_H	filehandle.h	2;"	d
_FILEHDR_STRUC_H	filehdr_struc.h	2;"	d
_FILTER_H	filter.h	2;"	d
_FLAGS_IOP_H	flags_iop.h	2;"	d
_GIOP_H	giop.h	2;"	d
_HUFFCODE_DECLARE_T_	nr.h	20;"	d
_INPUT_STR_H	input_struc.h	2;"	d
_L12_PARMS_H	l12_parms.h	3;"	d
_L12_PROTO_H	l12_proto.h	2;"	d
_L1B_VIIRS_NC_H	l1b_viirs_nc.h	2;"	d
_L1Q_STRUC	l1q_struc.h	2;"	d
_L1_ACI_HDF_H	l1_aci_hdf.h	2;"	d
_L1_AVIRIS_H	l1_aviris.h	2;"	d
_L1_HDF_GENERIC_READ_H	l1_hdf_generic_read.h	2;"	d
_L1_HMODIS_HDF_H	l1_hmodis_hdf.h	2;"	d
_L1_MERIS_CC_H	l1_meris_CC.h	2;"	d
_L1_MERIS_N1_H	l1_meris_N1.h	2;"	d
_L1_MOS_HDF_H	l1_mos_hdf.h	2;"	d
_L1_NC_GENERIC_READ_H	l1_nc_generic_read.h	2;"	d
_L1_OCM2_HDF_H	l1_ocm2_hdf.h	2;"	d
_L1_OCMDB_HDF_H	l1_ocmdb_hdf.h	2;"	d
_L1_OCM_HDF_H	l1_ocm_hdf.h	2;"	d
_L1_OCTS_HDF_H	l1_octs_hdf.h	2;"	d
_L1_ORCA_H	l1_orca.h	2;"	d
_L1_OSMI_HDF_H	l1_osmi_hdf.h	2;"	d
_L1_PRISM_H	l1_prism.h	2;"	d
_L1_STRUC_H	l1_struc.h	2;"	d
_L1_VIIRS_H5_H	l1_viirs_h5.h	2;"	d
_L1_VIIRS_NC_H	l1_viirs_nc.h	2;"	d
_L1_XCAL_HDF_H	l1_xcal_hdf.h	2;"	d
_L2PROD_H	l2prod.h	2;"	d
_L2PROD_STRUC_H	l2prod_struc.h	2;"	d
_L2_FLAGS_H	l2_flags.h	2;"	d
_L2_HDF_GENERIC_H	l2_generic.h	2;"	d
_L2_HDF_GENERIC_H	l2_hdf_generic.h	2;"	d
_L2_STRUC_H	l2_struc.h	2;"	d
_LONLAT2PIXLINE_H	lonlat2pixline.h	9;"	d
_NR_H_	nr.h	2;"	d
_NR_UTILS_H_	nrutil.h	2;"	d
_PARUTILS_H	par_utils.h	2;"	d
_PML_H	pml.h	11;"	d
_QAA_H	qaa.h	9;"	d
_RAWCAL_H_	rawcal.h	78;"	d
_READ_L3BIN_H	read_l3bin.h	2;"	d
_RUNCAL_H_	runcal.h	75;"	d
_SCENE_META_H	scene_meta.h	2;"	d
_SMI_CLIMATOLOGY_H	smi_climatology.h	2;"	d
_SST_FLAGS_H	flags_sst.h	2;"	d
_ScanLineList	mipoly.h	/^typedef struct _ScanLineList{$/;"	s
_ScanLineListBlock	mipoly.h	/^typedef struct _ScanLineListBlock {$/;"	s
_TARGET_STRUC_H	target_struc.h	2;"	d
_VCAL_STRUC_H	vcal_struc.h	2;"	d
_XCAL_H	xcal.h	2;"	d
_XFUNCS_H_	Xfuncs.h	19;"	d
_XNEEDBCOPYFUNC	Xfuncs.h	41;"	d
_XOPEN_SOURCE	l1_hmodis_hdf.c	11;"	d	file:
_XOPEN_SOURCE	l1_hmodis_hdf.c	18;"	d	file:
_XOPEN_SOURCE_EXTENDED	l1_hmodis_hdf.c	12;"	d	file:
_XOPEN_SOURCE_EXTENDED	l1_hmodis_hdf.c	17;"	d	file:
_XOSDEFS_H_	Xosdefs.h	27;"	d
__NIWA_IOP_H__	niwa_iop.h	12;"	d
_context	bioOptBandShift.c	/^typedef struct _context{$/;"	s	file:
_context	convert_band.c	/^typedef struct _context{$/;"	s	file:
_rawCalEnt	rawcal.h	/^    struct _rawCalEnt {$/;"	s	struct:__anon44
_runCalEnt	runcal.h	/^    struct _runCalEnt {$/;"	s	struct:__anon45
a	giop.c	/^static float  *a;$/;"	v	file:
a	l2_struc.h	/^    float  *a; \/\/absoprtion coefficient$/;"	m	struct:l2_struct
a	las_iop.c	/^static float *a;             \/\/ total absorption coefficient per band and pixel           $/;"	v	file:
a	niwa_iop.c	/^    float a[VBANDS];$/;"	m	struct:abs_res_	file:
a0	carder.c	/^static double a0[6], a1[6], a2[6], a3[6]; \/* aph model prms                  *\/$/;"	v	file:
a1	carder.c	/^static double a0[6], a1[6], a2[6], a3[6]; \/* aph model prms                  *\/$/;"	v	file:
a2	carder.c	/^static double a0[6], a1[6], a2[6], a3[6]; \/* aph model prms                  *\/$/;"	v	file:
a3	carder.c	/^static double a0[6], a1[6], a2[6], a3[6]; \/* aph model prms                  *\/$/;"	v	file:
aBric_i	convert_band.c	/^    float *aw_i,*bbw_i,*aBric_i,*bBric_i;$/;"	m	struct:_context	file:
aBric_o	convert_band.c	/^    float *aw_o,*bbw_o,*aBric_o,*bBric_o;$/;"	m	struct:_context	file:
a_hi	flags_iop.h	/^    float32 *a_hi  ;$/;"	m	struct:iopflagctl_struc
a_ind	niwa_iop.c	/^static float a_ind[AP_NS], b_ind[BP_NS];$/;"	v	file:
a_lo	flags_iop.h	/^    float32 *a_lo  ;$/;"	m	struct:iopflagctl_struc
a_on	flags_iop.h	/^    float32 *a_on  ;$/;"	m	struct:iopflagctl_struc
a_qaa	get_qaa.c	/^static float *a_qaa;         \/* total absorption coefficient            *\/$/;"	v	file:
a_w	pml_iop_tables.c	/^float *lambda,lc[MAX_BANDS],*a_w,*b_w;$/;"	v
above_to_below	get_rhown_nir.c	/^float above_to_below(float Rrs)$/;"	f
abs	misc.h	90;"	d
absCoef	atmcor_soa.f	/^      REAL     absCoef(/;"	v
absCoefNw	atmcor_soa.f	/^      REAL*8   absCoefNw(/;"	v
abs_res_	niwa_iop.c	/^typedef struct abs_res_ {$/;"	s	file:
abs_res_t	niwa_iop.c	/^} abs_res_t;$/;"	t	typeref:struct:abs_res_	file:
absaer	input_struc.h	/^  float  absaer;                 \/* threshold for abs aerosol index  *\/$/;"	m	struct:input_struct
absaer	l1_struc.h	/^    char   *absaer;$/;"	m	struct:l1_struct
absaer_opt	input_struc.h	/^  int32_t   absaer_opt;     \/* absorbing aerosol test option            *\/$/;"	m	struct:input_struct
absen	niwa_iop.c	/^static float *absen;                            \/* the pointer for absen *\/$/;"	v	file:
absind	niwa_iop.c	/^static int absind;$/;"	v	file:
abst	niwa_iop.c	/^static float abst[AP_NS][BP_NS][LBANDS];$/;"	v	file:
ac	pml_iop_tables.c	/^float *ch_lev, *ac[MAX_BANDS], *bc[MAX_BANDS];$/;"	v
acal	l1_mos_hdf.c	/^static float acal[NB];$/;"	v	file:
access_cnt	b128_msk_get.c	/^static int access_cnt[2]   = {  0,  0 };$/;"	v	file:
acdm	atmcor_soa.f	/^      REAL*8   xmi,ymr(1),C,acdm,/;"	v
acdom	giop.c	/^static float  *acdom;$/;"	v	file:
acdom1	giop.c	/^static float  *acdom1;$/;"	v	file:
acdom_nvec	giop.h	/^  int     acdom_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
acdom_opt	giop.h	/^  int acdom_opt;       \/* acdom function type    *\/$/;"	m	struct:giop_ctl_str
acdom_tab_file	giop.h	/^  char    acdom_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
acdom_tab_nw	giop.h	/^  int     acdom_tab_nw;   \/* elements in acdom tab *\/$/;"	m	struct:giop_ctl_str
acdom_tab_s	giop.h	/^  float **acdom_tab_s;    \/* acdom tab values      *\/$/;"	m	struct:giop_ctl_str
acdom_tab_w	giop.h	/^  float  *acdom_tab_w;    \/* acdom tab wavelengths *\/$/;"	m	struct:giop_ctl_str
acoefs	qaa.c	/^static double acoefs[3];$/;"	v	file:
acost	aerosol.c	/^    float  *acost;$/;"	m	struct:aermod_struct	file:
active	atmcor_soa.f	/^      subroutine active(/;"	s
add_noise_sigma	input_struc.h	/^  float add_noise_sigma; \/* uncertainties, 0=none, !=0 => std dev for gaussian noise *\/$/;"	m	struct:input_struct
adg	carder.c	/^static double *adg, *adgm;$/;"	v	file:
adg	get_pml.c	/^static float *adg;$/;"	v	file:
adg	get_qaa.c	/^static float *adg;           \/* detrital absorption coefficient         *\/$/;"	v	file:
adg	giop.c	/^static float  *adg;$/;"	v	file:
adg	gsm.c	/^static double *adg;$/;"	v	file:
adg	swim.c	/^static float *adg;               \/\/ adg value for the scan line adg[pix, band]$/;"	v	file:
adg1	giop.c	/^static float  *adg1;$/;"	v	file:
adg443	raman.c	/^static float adg443;        \/\/QAA-derived Absorption of CDOM and colored detrital matter at 443 nm$/;"	v	file:
adgRef	convert_band.c	/^    float *aphRef,*adgRef,*bbpRef;$/;"	m	struct:_context	file:
adg_hi	flags_iop.h	/^    float32 *adg_hi;$/;"	m	struct:iopflagctl_struc
adg_lo	flags_iop.h	/^    float32 *adg_lo;$/;"	m	struct:iopflagctl_struc
adg_morel	cdom_morel.c	/^float adg_morel(float chl, float idx, float wave)$/;"	f
adg_nvec	giop.h	/^  int     adg_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
adg_on	flags_iop.h	/^    float32 *adg_on;$/;"	m	struct:iopflagctl_struc
adg_opt	giop.h	/^  int adg_opt;         \/* adg function type    *\/$/;"	m	struct:giop_ctl_str
adg_qaa	get_qaa.c	/^static float *adg_qaa;       \/* detrital absorption coefficient         *\/$/;"	v	file:
adg_ref	bioOptBandShift.c	/^static float *sh_prod_arr,*adg_ref,*bbp_ref;$/;"	v	file:
adg_s	cdom_morel.c	/^static float adg_s = 0.018;$/;"	v	file:
adg_s	giop.c	/^static float  *adg_s;$/;"	v	file:
adg_s	giop.h	/^  float adg_s;         \/* ADGS spectral param  *\/$/;"	m	struct:giop_ctl_str
adg_s_max	giop.c	/^static float adg_s_max = 0.025;$/;"	v	file:
adg_s_min	giop.c	/^static float adg_s_min = 0.01;$/;"	v	file:
adg_tab_file	giop.h	/^  char    adg_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
adg_tab_nw	giop.h	/^  int     adg_tab_nw;   \/* elements in adg tab *\/$/;"	m	struct:giop_ctl_str
adg_tab_s	giop.h	/^  float **adg_tab_s;    \/* adg tab values      *\/$/;"	m	struct:giop_ctl_str
adg_tab_w	giop.h	/^  float  *adg_tab_w;    \/* adg tab wavelengths *\/$/;"	m	struct:giop_ctl_str
adg_w	giop.h	/^  float adg_w;         \/* ADGS reference wave  *\/$/;"	m	struct:giop_ctl_str
adgm	carder.c	/^static double *adg, *adgm;$/;"	v	file:
adgstar	gsm.c	/^static float  *adgstar;$/;"	v	file:
adgstar	swim.c	/^static float *adgstar;   \/\/spectral shape of detritus + cdom abs (adgstar[band])$/;"	v	file:
aer_angstrom	input_struc.h	/^  float     aer_angstrom;   \/* angstrom for aerosol model selection     *\/$/;"	m	struct:input_struct
aer_iter_max	input_struc.h	/^  int32_t   aer_iter_max;   \/* aerosol_iteration_limit                  *\/$/;"	m	struct:input_struct
aer_opt	aerosol.c	/^static int32_t  aer_opt = 0;$/;"	v	file:
aer_opt	input_struc.h	/^  int32_t   aer_opt;        \/* aerosol model option                     *\/$/;"	m	struct:input_struct
aer_rrs_long	input_struc.h	/^  float     aer_rrs_long;   \/* Rrs at longest aerosol wavelength        *\/$/;"	m	struct:input_struct
aer_rrs_short	input_struc.h	/^  float     aer_rrs_short;  \/* Rrs at shortest aerosol wavelength       *\/$/;"	m	struct:input_struct
aer_struct	aer_struc.h	/^typedef struct aer_struct {$/;"	s
aer_swir_long	input_struc.h	/^  int32_t   aer_swir_long;  \/* longest wavelength for swir to nir corr  *\/$/;"	m	struct:input_struct
aer_swir_short	input_struc.h	/^  int32_t   aer_swir_short; \/* shortest wavelength foe swir to nir corr *\/$/;"	m	struct:input_struct
aer_wave_long	input_struc.h	/^  int32_t   aer_wave_long;  \/* longest wavelength for model selection   *\/$/;"	m	struct:input_struct
aer_wave_short	input_struc.h	/^  int32_t   aer_wave_short; \/* shortest wavelength for model selection  *\/$/;"	m	struct:input_struct
aerbinfile	input_struc.h	/^  char   aerbinfile[FILENAME_MAX];  \/* Bin file for aerosol inputs   *\/$/;"	m	struct:input_struct
aerfile	input_struc.h	/^  char   aerfile[FILENAME_MAX];         \/* input aerosol spec file   *\/$/;"	m	struct:input_struct
aerindex	l1_struc.h	/^    float  *aerindex;$/;"	m	struct:l1_struct
aerindex	l2_struc.h	/^    float  *aerindex;$/;"	m	struct:l2_struct
aerindex	setflags.c	/^float aerindex(l2str *l2rec, int32_t ip)$/;"	f
aermod_struct	aerosol.c	/^typedef struct aermod_struct {$/;"	s	file:
aermodels	input_struc.h	/^  char      aermodels [MAXAERMOD][32];$/;"	m	struct:input_struct
aermodfile	input_struc.h	/^  char      aermodfile [FILENAME_MAX];$/;"	m	struct:input_struct
aermodmax	input_struc.h	/^  int32_t   aermodmax;$/;"	m	struct:input_struct
aermodmax	l2_struc.h	/^    int32_t   *aermodmax;$/;"	m	struct:l2_struct
aermodmax2	l2_struc.h	/^    int32_t   *aermodmax2;$/;"	m	struct:l2_struct
aermodmin	input_struc.h	/^  int32_t   aermodmin;$/;"	m	struct:input_struct
aermodmin	l2_struc.h	/^    int32_t   *aermodmin;$/;"	m	struct:l2_struct
aermodmin2	l2_struc.h	/^    int32_t   *aermodmin2;$/;"	m	struct:l2_struct
aermodrat	input_struc.h	/^  float     aermodrat;$/;"	m	struct:input_struct
aermodstr	aerosol.c	/^} aermodstr;$/;"	t	typeref:struct:aermod_struct	file:
aermodtab_struct	aerosol.c	/^typedef struct aermodtab_struct {$/;"	s	file:
aermodtabstr	aerosol.c	/^} aermodtabstr;$/;"	t	typeref:struct:aermodtab_struct	file:
aeroob	aerosol.c	/^float aeroob(int32_t sensorID, int32_t iw, float cf, float wv)$/;"	f
aeroob_cf	aerosol.c	/^float aeroob_cf(int modnum,float solz, float senz, float phi)$/;"	f
aerosol	aerosol.c	/^int aerosol(l2str *l2rec, int32_t aer_opt_in, aestr *aerec, int32_t ip,$/;"	f
aerosol_free	aerosol.c	/^void aerosol_free( void )$/;"	f
aerratio	l2_struc.h	/^    float  *aerratio;$/;"	m	struct:l2_struct
aerratio2	l2_struc.h	/^    float  *aerratio2;$/;"	m	struct:l2_struct
aertab	aerosol.c	/^static aermodtabstr *aertab = NULL;$/;"	v	file:
aerwatRho	atmcor_soa.f	/^      REAL     aerwatRho(/;"	v
aestr	aer_struc.h	/^} aestr;$/;"	t	typeref:struct:aer_struct
ag_fact	viirs_pxcvt.c	/^static int ag_fact[] = { 1, 2, 3, 2, 1, -1 };$/;"	v	file:
ag_px_st	viirs_pxcvt.c	/^static int ag_px_st[] = { 0, 640, 1008, 2192, 2560, 3200 };$/;"	v	file:
ahmad_atm_corr	aerosol.c	/^int ahmad_atm_corr(int32_t sensorID, float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l,$/;"	f
ahmadaer	aerosol.c	/^int ahmadaer(int32_t sensorID, float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l,$/;"	f
airmass	aerosol.c	/^static float airmass;$/;"	v	file:
airmass_plp	aerosol.c	/^static float airmass_plp;$/;"	v	file:
airmass_sph	aerosol.c	/^static float airmass_sph;$/;"	v	file:
albedo	aerosol.c	/^    float  *albedo;$/;"	m	struct:aermod_struct	file:
albedo	input_struc.h	/^  float  albedo;                 \/* cloud reflectance threshold      *\/$/;"	m	struct:input_struct
algorithm_id	l2prod_struc.h	/^    char    algorithm_id[UNITLEN];$/;"	m	struct:l2prod_index_struct
allbands	l1_hmodis_hdf.c	/^    float *allbands;  \/*< Scaled Integers for all bands *\/$/;"	m	struct:__anon34	file:
alloc_Vector	KDtree.c	/^void alloc_Vector ( vector *v, float da, float db, float dc, int32_t dd )$/;"	f
alloc_aer	alloc_aer.c	/^int alloc_aer( int32_t npix, int32_t nbands, aestr *rec )$/;"	f
alloc_aermodstr	aerosol.c	/^aermodstr* alloc_aermodstr( int nbands, int nscatt, int nphi, int nsolz, int nsenz, int ntheta )$/;"	f
alloc_bandsd	get_pml.c	/^static double* alloc_bandsd( int32_t nbands,double *nbarray) {$/;"	f	file:
alloc_bandsf	get_pml.c	/^static float* alloc_bandsf( int32_t nbands, float *nbarray) {$/;"	f	file:
alloc_bindx	get_par.c	/^static int* alloc_bindx( int nbands,  int* bindx) {$/;"	f	file:
alloc_calrec	calfile_utils.c	/^calstr* alloc_calrec(int ydim, int nbands, int nprods, int nvar1d) {$/;"	f
alloc_calstr	mscal_struc.c	/^int32_t alloc_calstr(int32_t nfiles, int32_t npixs, mscalstr *calstr)$/;"	f
alloc_carder	carder.c	/^void alloc_carder(int32_t npix, int32_t nbands)$/;"	f
alloc_l1	alloc_l1.c	/^int32_t alloc_l1( int32_t npix, int32_t nbands, int32_t nbandsir, int32_t n_inprods, l1str *l1rec )$/;"	f
alloc_l1q	getl1rec.c	/^int32_t alloc_l1q( int32_t npix, int32_t nq, int32_t n_inprods, int32_t nbands, l1qstr *l1que )$/;"	f
alloc_l2	alloc_l2.c	/^int alloc_l2( int32_t npix, int32_t nbands, l2str *l2rec )$/;"	f
alloc_las	las_iop.c	/^void alloc_las(int npix, int nbands)$/;"	f
alloc_niwa	get_niwa_iop.c	/^static void alloc_niwa(int32_t npix, int32_t nbands)$/;"	f	file:
alloc_pml	get_pml.c	/^void alloc_pml(int32_t npix, int32_t nbands)$/;"	f
alloc_scan	l1_hmodis_hdf.c	/^int alloc_scan(const int32_t nvals) {$/;"	f
alloc_target	alloc_target.c	/^int alloc_target( int32_t npix, int32_t nbands, tgstr *rec )$/;"	f
alloc_vcal	alloc_vcal.c	/^int alloc_vcal( int32_t npix, int32_t nbands, vcstr *rec )$/;"	f
allocatePrivateData	l1_hico_h5.c	/^static hico_private_t* allocatePrivateData() {$/;"	f	file:
alpha	l1_struc.h	/^    float  *alpha;$/;"	m	struct:l1_struct
alpha	l2_struc.h	/^    float  *alpha; \/\/aerosol angstrom coefficient$/;"	m	struct:l2_struct
alpha	raman.c	/^static float alpha[6] = {0.003, 0.004, 0.011, 0.015, 0.017, 0.018};$/;"	v	file:
alphaCor	raman.c	/^static float *alphaCor;$/;"	v	file:
alphaT_struct	aerosol.c	/^typedef struct alphaT_struct { $/;"	s	file:
alphaTstr	aerosol.c	/^} alphaTstr;$/;"	t	typeref:struct:alphaT_struct	file:
alpha_func	las_iop.c	/^float alpha_func(float solz, float eta)$/;"	f
alphafile	input_struc.h	/^  char   alphafile[FILENAME_MAX];\/* angstrom climatology file        *\/$/;"	m	struct:input_struct
alt	l1_struc.h	/^    float  alt;     \/\/altitude of sensor$/;"	m	struct:l1_struct
alt	l2_struc.h	/^    float  alt; \/\/altitude of sensor$/;"	m	struct:l2_struct
alt	prism.h	/^    float alt;$/;"	m	struct:prism_struct
amoeba	amoeba.c	/^short amoeba(double *pnts, FITSTRUCT * auxdata, $/;"	f
ams_all	aerosol.c	/^    float  *ams_all;$/;"	m	struct:aermod_struct	file:
anap	giop.c	/^static float  *anap;$/;"	v	file:
anap1	giop.c	/^static float  *anap1;$/;"	v	file:
anap_nvec	giop.h	/^  int     anap_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
anap_opt	giop.h	/^  int anap_opt;        \/* anap function type    *\/$/;"	m	struct:giop_ctl_str
anap_tab_file	giop.h	/^  char    anap_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
anap_tab_nw	giop.h	/^  int     anap_tab_nw;   \/* elements in anap tab *\/$/;"	m	struct:giop_ctl_str
anap_tab_s	giop.h	/^  float **anap_tab_s;    \/* anap tab values      *\/$/;"	m	struct:giop_ctl_str
anap_tab_w	giop.h	/^  float  *anap_tab_w;    \/* anap tab wavelengths *\/$/;"	m	struct:giop_ctl_str
anc_acq_ck	anc_acq.c	/^int32_t anc_acq_ck( char **files, char **prm_nm, int n_prm, int32_t sto_ix )$/;"	f
anc_acq_init	anc_acq.c	/^int anc_acq_init( instr *input, int32_t *anc_id )$/;"	f
anc_acq_lin	anc_acq.c	/^int anc_acq_lin( int32_t anc_class, l1str *l1rec )$/;"	f
anc_cor_file	input_struc.h	/^  char   anc_cor_file[FILENAME_MAX];  \/* ancillary correction file   *\/$/;"	m	struct:input_struct
anc_f_stat	anc_acq.c	/^  int anc_f_stat;  \/* status of the met data *\/$/;"	m	struct:met_sto_str_d	file:
ancqc	l1_struc.h	/^    short  *ancqc;$/;"	m	struct:l1_struct
angles	l1_hmodis_hdf.c	/^    double angles[3]; \/*< attitude_angles *\/$/;"	m	struct:__anon34	file:
angstEst	raman.c	/^static float angstEst;      \/\/Estimate Angstrom exponent (Taua power law slope)$/;"	v	file:
angstrom	aerosol.c	/^    float  *angstrom;$/;"	m	struct:aermod_struct	file:
angstrom	aerosol.c	/^    float  angstrom;$/;"	m	struct:alphaT_struct	file:
angular_distance	l1_olci.c	/^double angular_distance(double lat1, double lon1, double lat2, double lon2) {$/;"	f
aots	main_l1det2det.c	/^float  ***aots, ***nlws; \/\/arrays to contain the values needed to avg over for inversion$/;"	v
aots	main_l2binmatch.cpp	/^float ***aots, ***nlws; \/\/arrays to contain the values needed to avg over for inversion$/;"	v
aots	main_vcalmerge.c	/^float ***aots, ***nlws; \/\/arrays to contain the values needed to avg over for inversion$/;"	v
aotthreshold	input_struc.h	/^  float   aotthreshold;$/;"	m	struct:input_struct
ap_lev	niwa_iop.c	/^static float band_lev[LBANDS], ap_lev[AP_NS], bp_lev[BP_NS];$/;"	v	file:
ap_lev	pml_iop_tables.c	/^float *ap_lev, *bp_lev;$/;"	v
ap_n	niwa_iop.c	/^static int ap_n, bp_n;$/;"	v	file:
ap_n	pml_iop_tables.c	/^int32_t ap_n, bp_n;$/;"	v
aph	carder.c	/^static double *aph, *aphm;$/;"	v	file:
aph	get_pml.c	/^static float *aph;$/;"	v	file:
aph	get_qaa.c	/^static float *aph;           \/* phytoplankton absorption coefficient    *\/$/;"	v	file:
aph	giop.c	/^static float  *aph;$/;"	v	file:
aph	swim.c	/^static float *aph;               \/\/ aph value for the scan line aph[pix, band]$/;"	v	file:
aph1	giop.c	/^static float  *aph1;$/;"	v	file:
aph1Ram	raman.c	/^static float *aph1Ram;      \/\/Bricaud aph0 coefficient at Raman bands$/;"	v	file:
aph1Sen	raman.c	/^static float *aph1Sen;      \/\/Bricaud aph0 coefficient at sensor bands$/;"	v	file:
aph1rMeris	raman.c	/^static float aph1rMeris[9] = {0.0240515, 0.0240515, 0.0327317, 0.0369255, 0.0305037, 0.0152557, 0.00807796, 0.00699219, 0.00506565};$/;"	v	file:
aph1rModisa	raman.c	/^static float aph1rModisa[10] = {0.0240515, 0.0240515, 0.02622, 0.0322894, 0.0349146, 0.0324558, 0.0312886, 0.010714, 0.00787535, 0.00679344};$/;"	v	file:
aph1rModist	raman.c	/^static float aph1rModist[10] = {0.0240515, 0.0240515, 0.02622, 0.0322894, 0.0349146, 0.0324558, 0.0312886, 0.010714, 0.00787535, 0.00679344};$/;"	v	file:
aph1rOcts	raman.c	/^static float aph1rOcts[6] = {0.0240515, 0.0240515, 0.032657, 0.0369742, 0.0295482, 0.0078806};$/;"	v	file:
aph1rSeawifs	raman.c	/^static float aph1rSeawifs[6] = {0.0240515, 0.0240515, 0.032657, 0.0366945, 0.0312886, 0.00757892};$/;"	v	file:
aph1rViirs	raman.c	/^static float aph1rViirs[5] = {0.0240515, 0.0240515, 0.0316523, 0.0318884, 0.00747974};$/;"	v	file:
aph1sMeris	raman.c	/^static float aph1sMeris[9] = {0.0300823, 0.0369807, 0.0252367, 0.0162079, 0.00567835, 0.00607524, 0.0141711, 0.0165369, 0.00248126};$/;"	v	file:
aph1sModisa	raman.c	/^static float aph1sModisa[10] = {0.0295025, 0.0369429, 0.0309154, 0.0258717, 0.0100736, 0.00745871, 0.0063315, 0.00869972, 0.015449, 0.0168516};$/;"	v	file:
aph1sModist	raman.c	/^static float aph1sModist[10] = {0.0295025, 0.0369429, 0.0309154, 0.0258717, 0.0100736, 0.00745871, 0.0063315, 0.00869972, 0.015449, 0.0168516};$/;"	v	file:
aph1sOcts	raman.c	/^static float aph1sOcts[6] = {0.0294295, 0.0365123, 0.0250145, 0.0140675, 0.00534767, 0.0149739};$/;"	v	file:
aph1sSeawifs	raman.c	/^static float aph1sSeawifs[6] = {0.0294295, 0.0365123, 0.0250145, 0.0163627, 0.0063315, 0.0159914};$/;"	v	file:
aph1sViirs	raman.c	/^static float aph1sViirs[5] = {0.0285606, 0.0367067, 0.0263224, 0.00687363, 0.0163194};$/;"	v	file:
aph2Ram	raman.c	/^static float *aph2Ram;      \/\/Bricaud aph1 coefficient at Raman bands$/;"	v	file:
aph2Sen	raman.c	/^static float *aph2Sen;      \/\/Bricaud aph1 coefficient at sensor bands$/;"	v	file:
aph2rMeris	raman.c	/^static float aph2rMeris[9] = {0.687735, 0.687735, 0.663118, 0.634894, 0.593951, 0.738445, 0.909239, 0.929477, 0.916651};$/;"	v	file:
aph2rModisa	raman.c	/^static float aph2rModisa[10] = {0.687735, 0.687735, 0.686359, 0.666775, 0.598609, 0.595061, 0.594785, 0.842376, 0.913724, 0.93314};$/;"	v	file:
aph2rModist	raman.c	/^static float aph2rModist[10] = {0.687735, 0.687735, 0.686359, 0.666775, 0.598609, 0.595061, 0.594785, 0.842376, 0.913724, 0.93314};$/;"	v	file:
aph2rOcts	raman.c	/^static float aph2rOcts[6] = {0.687735, 0.687735, 0.662961, 0.624106, 0.591819, 0.913026};$/;"	v	file:
aph2rSeawifs	raman.c	/^static float aph2rSeawifs[6] = {0.687735, 0.687735 , 0.662961, 0.634319, 0.594785, 0.919196};$/;"	v	file:
aph2rViirs	raman.c	/^static float aph2rViirs[5] ={0.687735, 0.687735, 0.669358, 0.595098, 0.921085};$/;"	v	file:
aph2sMeris	raman.c	/^static float aph2sMeris[9] = {0.678686, 0.614817, 0.606839, 0.720099, 0.938248, 0.868983, 0.820075, 0.824245, 1.02861};$/;"	v	file:
aph2sModisa	raman.c	/^static float aph2sModisa[10] = {0.679344, 0.614661, 0.5945, 0.600516, 0.856872, 0.922909, 0.935931, 0.839471, 0.81726, 0.823776};$/;"	v	file:
aph2sModist	raman.c	/^static float aph2sModist[10] = {0.679344, 0.614661, 0.5945, 0.600516, 0.856872,	0.922909, 0.935931, 0.839471, 0.81726, 0.823776};$/;"	v	file:
aph2sOcts	raman.c	/^static float aph2sOcts[6] = {0.678582, 0.614834, 0.610021, 0.763068, 0.930908, 0.817941};$/;"	v	file:
aph2sSeawifs	raman.c	/^static float aph2sSeawifs[6] = {0.678582, 0.614834, 0.610021, 0.720765, 0.935931, 0.817991};$/;"	v	file:
aph2sViirs	raman.c	/^static float aph2sViirs[5] = {0.681128, 0.61443, 0.599506, 0.931034, 0.817851};$/;"	v	file:
aph443	raman.c	/^static float aph443;        \/\/QAA-derived phytoplankton absorption at 443 nm      $/;"	v	file:
aphRef	convert_band.c	/^    float *aphRef,*adgRef,*bbpRef;$/;"	m	struct:_context	file:
aphStar	raman.c	/^static float *aphStar;      \/\/Normalised phytoplankton absorption spectral shape at sensor bands$/;"	v	file:
aphStar443	raman.c	/^static float aphStar443;    \/\/Phytoplankton absorption at 443 nm$/;"	v	file:
aphStarR	raman.c	/^static float *aphStarR;     \/\/Normalised phytoplankton absorption spectral shape at Raman bands$/;"	v	file:
aph_bricaud	aph.c	/^float aph_bricaud(float wave, float chl) $/;"	f
aph_bricaud_1995	aph.c	/^float aph_bricaud_1995(float wave, float chl) $/;"	f
aph_bricaud_1998	aph.c	/^float aph_bricaud_1998(float wave, float chl) $/;"	f
aph_check	qaa.c	/^static int aph_check = 1;$/;"	v	file:
aph_ciotti	aph.c	/^float aph_ciotti(float wave, float sf) $/;"	f
aph_hi	carder.c	/^static double aph_hi, aph_lo;          \/* boundaries of aph675 array         *\/$/;"	v	file:
aph_hi	flags_iop.h	/^    float32 *aph_hi;$/;"	m	struct:iopflagctl_struc
aph_lo	carder.c	/^static double aph_hi, aph_lo;          \/* boundaries of aph675 array         *\/$/;"	v	file:
aph_lo	flags_iop.h	/^    float32 *aph_lo;$/;"	m	struct:iopflagctl_struc
aph_nvec	giop.h	/^  int     aph_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
aph_on	flags_iop.h	/^    float32 *aph_on;$/;"	m	struct:iopflagctl_struc
aph_opt	giop.h	/^  int aph_opt;         \/* aph function type    *\/$/;"	m	struct:giop_ctl_str
aph_qaa	get_qaa.c	/^static float *aph_qaa;       \/* phytoplankton absorption coefficient    *\/$/;"	v	file:
aph_s	giop.c	/^static float  *aph_s;$/;"	v	file:
aph_s	giop.h	/^  float aph_s;         \/* APHS spectral param  *\/$/;"	m	struct:giop_ctl_str
aph_tab_file	giop.h	/^  char    aph_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
aph_tab_nw	giop.h	/^  int     aph_tab_nw;   \/* elements in aph tab *\/$/;"	m	struct:giop_ctl_str
aph_tab_s	giop.h	/^  float **aph_tab_s;    \/* aph tab values      *\/$/;"	m	struct:giop_ctl_str
aph_tab_w	giop.h	/^  float  *aph_tab_w;    \/* aph tab wavelengths *\/$/;"	m	struct:giop_ctl_str
aph_w	giop.h	/^  float aph_w;         \/* APHS referance wave  *\/$/;"	m	struct:giop_ctl_str
aphb1	carder.c	/^static double aphb1,aphb2,aphb3,aphb4,fmid;$/;"	v	file:
aphb2	carder.c	/^static double aphb1,aphb2,aphb3,aphb4,fmid;$/;"	v	file:
aphb3	carder.c	/^static double aphb1,aphb2,aphb3,aphb4,fmid;$/;"	v	file:
aphb4	carder.c	/^static double aphb1,aphb2,aphb3,aphb4,fmid;$/;"	v	file:
aphm	carder.c	/^static double *aph, *aphm;$/;"	v	file:
aphstar	gsm.c	/^static float  *aphstar;$/;"	v	file:
aphstar	swim.c	/^static float *aphstar;   \/\/spectral shape of phyto abs (aphstar[band])$/;"	v	file:
applyMultiplier	prodgen.c	/^void applyMultiplier(float* in, float* out, int count, float multiplier) {$/;"	f
arithcode	nr.h	/^} arithcode;$/;"	t	typeref:struct:__anon41
arr0	carder.c	/^static double arr0, arr1;$/;"	v	file:
arr1	carder.c	/^static double arr0, arr1;$/;"	v	file:
array_data	l1_mos_hdf.c	/^static uint16 array_data[NP*14][NS]; \/* full image data array *\/$/;"	v	file:
as	pml_iop_tables.c	/^float *sp_lev, *as[MAX_BANDS], *bs[MAX_BANDS];$/;"	v
ascdsc	scene_meta.c	/^static int   ascdsc       = UNKNOWNNODE;$/;"	v	file:
atmocor	input_struc.h	/^  int32_t   atmocor;        \/* 1=perform atmospheric correction         *\/$/;"	m	struct:input_struct
atmocor1	atmocor1.c	/^void atmocor1(l1str *l1rec, int32_t ip)$/;"	f
atmocor1_land	atmocor1_land.c	/^int atmocor1_land(instr *input, l1str *l1rec, int32_t ip)$/;"	f
atmocor2	atmocor2.c	/^int atmocor2(l2str *l2rec, aestr *aerec, int32_t ip)$/;"	f
atot	carder.c	/^static double *atot;$/;"	v	file:
atot	get_pml.c	/^static float *atot;$/;"	v	file:
atot	get_qaa.c	/^static float *atot;          \/* total absorption coefficient            *\/$/;"	v	file:
atot	raman.c	/^static float *atot;        \/\/total absorption modelled at sensor bands$/;"	v	file:
atot	swim.c	/^static float *atot;              \/\/ atot value for the scan line atot[pix, band]$/;"	v	file:
atotR	raman.c	/^static float *atotR;       \/\/total absorption coefficient at Raman excitation bands$/;"	v	file:
atrem_full	input_struc.h	/^  int32_t   atrem_full;     \/* 1=do full, explicit atrem calc, 0=off    *\/$/;"	m	struct:input_struct
atrem_geom	input_struc.h	/^  int32_t   atrem_geom;     \/* 1=do atrem geometry every pixel,$/;"	m	struct:input_struct
atrem_model	input_struc.h	/^  int32_t   atrem_model;    \/* 0=determine model from latitude and date$/;"	m	struct:input_struct
atrem_opt	input_struc.h	/^  int32_t   atrem_opt;      \/* 1=ozone, 2=co2, 4=no2, 8=co, 16=ch4,$/;"	m	struct:input_struct
att	l1_viirs_h5.c	/^static float *pos, *vel, *att; \/* position, velocity, sensor attitude *\/$/;"	v	file:
att_ang	l1_czcs_hdf.c	/^float32 *tilt, *att_ang, *slope, *intercept;$/;"	v
austinPetzold_1986	get_opp.c	/^double austinPetzold_1986 ( double lambda,$/;"	f
av_fp	aviris.h	/^    FILE   *av_fp;$/;"	m	struct:aviris_struct
av_fp	prism.h	/^    FILE   *av_fp;$/;"	m	struct:prism_struct
avconsh	avhrrsub5h.f	/^       entry avconsh /;"	e	function:avhrrsub5h
avg	sst.c	/^    float avg;$/;"	m	struct:stat_struct	file:
avhrr_ascend	sst.c	/^int32_t avhrr_ascend(int32_t ny) {$/;"	f
avhrr_sst_flag_lname	flags_sst.h	/^static const char *avhrr_sst_flag_lname[NSSTFLAGS] = {"ISMASKED",$/;"	v
avhrrsub5h	avhrrsub5h.f	/^       function avhrrsub5h /;"	f
aviris_l1b_t	aviris.h	/^typedef struct aviris_l1b_t {$/;"	s
aviris_l1b_t	aviris.h	/^} aviris_l1b_t;$/;"	t	typeref:struct:aviris_l1b_t
aviris_proj4_convert	l1_aviris.c	/^void aviris_proj4_convert(aviris_t * data, int numPoints, double *x, double *y)$/;"	f
aviris_struct	aviris.h	/^typedef struct aviris_struct {$/;"	s
aviris_t	aviris.h	/^} aviris_t;$/;"	t	typeref:struct:aviris_struct
avlooph	avhrrsub5h.f	/^      entry avlooph /;"	e	function:avhrrsub5h
aw	carder.c	/^static double aw[6];                   \/* water absorption coefs             *\/$/;"	v	file:
aw	get_pml.c	/^static float  *aw ;$/;"	v	file:
aw	get_qaa.c	/^static float *aw;            \/* pure-water total absorption             *\/$/;"	v	file:
aw	giop.c	/^static float  *aw;$/;"	v	file:
aw	giop.h	/^  float *aw     ; \/* aw per fit wave  [NBANDS]    *\/$/;"	m	struct:giop_ctl_str
aw	gsm.c	/^static float  *aw     ;$/;"	v	file:
aw	l1_struc.h	/^    float       *aw    ;$/;"	m	struct:l1_struct
aw	l2_struc.h	/^    float  *aw;$/;"	m	struct:l2_struct
aw	las_iop.c	/^static float *aw;            \/\/ pure-water total absorption  per band           $/;"	v	file:
aw	niwa_iop.c	/^static float aw[VBANDS], bbw[VBANDS], lambda[VBANDS];$/;"	v	file:
aw	pml.c	/^static float *aw;$/;"	v	file:
aw	raman.c	/^static float *aw;           \/\/water absorption coefficient at sensor bands$/;"	v	file:
aw	seawater_get.c	/^static float *aw  = NULL;$/;"	v	file:
aw	swim.c	/^static float *aw;        \/\/pure water abs spectra (aw[band])$/;"	v	file:
awR	raman.c	/^static float *awR;          \/\/water absorption coeficient at Raman excitation bands$/;"	v	file:
aw_i	bioOptBandShift.c	/^    float *aw_i,*bbw_i;$/;"	m	struct:_context	file:
aw_i	convert_band.c	/^    float *aw_i,*bbw_i,*aBric_i,*bBric_i;$/;"	m	struct:_context	file:
aw_o	bioOptBandShift.c	/^    float *aw_o,*bbw_o;$/;"	m	struct:_context	file:
aw_o	convert_band.c	/^    float *aw_o,*bbw_o,*aBric_o,*bBric_o;$/;"	m	struct:_context	file:
aw_ref	bioOptBandShift.c	/^    float aw_ref,bbw_ref,wvl_ref;$/;"	m	struct:_context	file:
aw_spectra	water.c	/^float aw_spectra(int32_t wl, int32_t width)$/;"	f
awtab	water.c	/^static double awtab [NAWTAB];$/;"	v	file:
b	l1_octs_hdf.c	/^static float32 m[NOCBANDS], b[NOCBANDS];$/;"	v	file:
b	las_iop.c	/^static float *b;             \/\/ total scattering coefficient  per band and pixel              $/;"	v	file:
b128_box_num	b128_box_num.c	/^int b128_box_num( float lat, float lon, float *lat_off, float *lon_off )$/;"	f
b128_msk_get	b128_msk_get.c	/^int b128_msk_get( float lat, float lon, int msknum )$/;"	f
b128_msk_get_	b128_msk_get.c	/^int b128_msk_get_( float *flat, float *flon, int *msknum )$/;"	f
b128_msk_init	b128_msk_get.c	/^int b128_msk_init( char *landfile, int msknum )$/;"	f
b128_msk_init_	b128_msk_get.c	/^int b128_msk_init_( char *flandfile, int *msknum, int len )$/;"	f
b128_wd_bit	b128_wd_bit.c	/^int b128_wd_bit( float lat_off, float lon_off, int *box_wd, int *box_bit )$/;"	f
bBric_i	convert_band.c	/^    float *aw_i,*bbw_i,*aBric_i,*bBric_i;$/;"	m	struct:_context	file:
bBric_o	convert_band.c	/^    float *aw_o,*bbw_o,*aBric_o,*bBric_o;$/;"	m	struct:_context	file:
bRMeris	raman.c	/^static  float bRMeris[9] = {0.0013089, 0.00094603, 0.000596231, 0.000497341, 0.00032686, 0.000208477, 0.000153671, 0.000143223, 0.000116661};$/;"	v	file:
bRModisa	raman.c	/^static  float bRModisa[10] = {0.00132503, 0.00094603, 0.000728578, 0.000607423, 0.000414652, 0.00036299, 0.000340519, 0.00017642, 0.000151688, 0.000141347};$/;"	v	file:
bRModist	raman.c	/^static float bRModist[10] = {0.00132503, 0.00094603, 0.000728578, 0.000607423, 0.000414652, 0.00036299, 0.000340519, 0.00017642, 0.000151688, 0.000141347};$/;"	v	file:
bROcts	raman.c	/^static float bROcts[6] = {0.0013024, 0.0009397, 0.000594344, 0.000473406, 0.000307963, 0.000149884}; $/;"	v	file:
bRSeawifs	raman.c	/^static float bRSeawifs[6] = {0.0013262, 0.000947525, 0.00059698, 0.000497912, 0.000340519, 0.000148867}; $/;"	v	file:
bRViirs	raman.c	/^static float bRViirs[5] = {0.0013566, 0.000946792, 0.000619673, 0.0003517, 0.000147911};$/;"	v	file:
bRex	raman.c	/^static float *bRex;      \/\/Raman scattering coefficient$/;"	v	file:
b_high_init	pml_iop_tables.c	/^double b_low_init,b_high_init,b_init,delta_b_init,min_db,max_db;$/;"	v
b_ind	niwa_iop.c	/^static float a_ind[AP_NS], b_ind[BP_NS];$/;"	v	file:
b_init	pml_iop_tables.c	/^double b_low_init,b_high_init,b_init,delta_b_init,min_db,max_db;$/;"	v
b_low_init	pml_iop_tables.c	/^double b_low_init,b_high_init,b_init,delta_b_init,min_db,max_db;$/;"	v
b_tilde_p	pml_iop_tables.c	/^float b_tilde_w, b_tilde_p, init_chl, eps_a_init, eps_a_init_modis, eps_bb_init;$/;"	v
b_tilde_w	pml_iop_tables.c	/^float b_tilde_w, b_tilde_p, init_chl, eps_a_init, eps_a_init_modis, eps_bb_init;$/;"	v
b_w	pml_iop_tables.c	/^float *lambda,lc[MAX_BANDS],*a_w,*b_w;$/;"	v
back	mipoly.h	/^     struct _EdgeTableEntry *back;       \/* for insertion sort   *\/$/;"	m	struct:_EdgeTableEntry	typeref:struct:_EdgeTableEntry::_EdgeTableEntry
badData	l2prod_struc.h	/^    float   badData;$/;"	m	struct:l2prod_index_struct
badData	las_iop.c	/^static float badData  = BAD_FLT;$/;"	v	file:
bad_float	l2_generic.c	/^static float bad_float  = BAD_FLT;$/;"	v	file:
badval	cdom_mannino.c	/^static float badval =  BAD_FLT;$/;"	v	file:
badval	cdom_morel.c	/^static float badval = BAD_FLT;$/;"	v	file:
badval	convert_band.c	/^static float badval = BAD_FLT;$/;"	v	file:
badval	filter.c	/^static float badval = BAD_FLT;$/;"	v	file:
badval	get_pml.c	/^static float badval  = BAD_FLT;$/;"	v	file:
badval	get_poc.c	/^static float badval =  BAD_FLT;$/;"	v	file:
badval	giop.c	/^static float badval = BAD_FLT;$/;"	v	file:
badval	gsm.c	/^static float badval = BAD_FLT;$/;"	v	file:
badval	mgiop.c	/^static float badval = BAD_FLT;$/;"	v	file:
badval	vcal.c	/^static float    badval = -1;$/;"	v	file:
badval	virtual_constellation.c	/^static float badval = BAD_FLT;$/;"	v	file:
band	filter.h	/^    int32_t   band;$/;"	m	struct:filter_struct
band1	carder.c	/^static int   band1,band2,band3,band4;  \/* band indices to make Rrs ratios    *\/$/;"	v	file:
band2	carder.c	/^static int   band1,band2,band3,band4;  \/* band indices to make Rrs ratios    *\/$/;"	v	file:
band3	carder.c	/^static int   band1,band2,band3,band4;  \/* band indices to make Rrs ratios    *\/$/;"	v	file:
band4	carder.c	/^static int   band1,band2,band3,band4;  \/* band indices to make Rrs ratios    *\/$/;"	v	file:
band_index	windex.c	/^static int band_index[WAVE_INDEX_NUM+1];$/;"	v	file:
band_lev	niwa_iop.c	/^static float band_lev[LBANDS], ap_lev[AP_NS], bp_lev[BP_NS];$/;"	v	file:
band_map	niwa_iop.c	/^static const int *band_map;$/;"	v	file:
band_shift_opt	input_struc.h	/^  int32_t band_shift_opt; \/* band fill, 0=lin.interp. 1=bio.opt.band shift *\/$/;"	m	struct:input_struct
bandindex	l1_hmodis_hdf.c	/^    int16_t bandindex;  \/*< index of band within SDS *\/$/;"	m	struct:__anon33	file:
bandinfo	l1_hmodis_hdf.c	/^} bandinfo;$/;"	t	typeref:struct:__anon33	file:
bandname	l1_hmodis_hdf.c	/^    char *bandname;     \/*< for clarity *\/$/;"	m	struct:__anon33	file:
bands	l1_mos_hdf.c	/^static int   bands[NBANDS_MOS] = {0,1,2,3,4,7,8,10};$/;"	v	file:
bandtypes	l1b_viirs_nc.c	/^enum bandtypes { RSB, TEB, CIR };$/;"	g	file:
base_msec	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
basebin	bin_climatology.c	/^static int32	*basebin;$/;"	v	file:
basebin	read_l3bin.h	/^    int32_t   *basebin;$/;"	m	struct:l3bin_struct
basebin_9km	read9km_mask.c	/^static int32_t  *numbin_xkm, *basebin_xkm, *numbin_9km, *basebin_9km;$/;"	v	file:
basebin_xkm	read9km_mask.c	/^static int32_t  *numbin_xkm, *basebin_xkm, *numbin_9km, *basebin_9km;$/;"	v	file:
bathMaskOn	l1_struc.h	/^    int32_t   bathMaskOn;$/;"	m	struct:l1_struct
bath_mask	read_mask.c	/^int bath_mask( float lat, float lon ) {$/;"	f
bath_mask_init	read_mask.c	/^int bath_mask_init(char *file) {$/;"	f
bathindex	read_mask.c	/^static int bathindex = 1;$/;"	v	file:
bathmask	input_struc.h	/^  int32_t   bathmask;               \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
bb	carder.c	/^static double *bbp, *bb;$/;"	v	file:
bb	get_pml.c	/^static float *bb;$/;"	v	file:
bb	get_qaa.c	/^static float *bb;            \/* backscatter coefficient                 *\/$/;"	v	file:
bb	giop.c	/^static float  *bb;$/;"	v	file:
bb	l2_struc.h	/^    float  *bb; \/\/backscattering coefficient$/;"	m	struct:l2_struct
bb	las_iop.c	/^static float *bb;            \/\/ backscatter coefficient per band and pixel                  $/;"	v	file:
bb	niwa_iop.c	/^    float bb[VBANDS];$/;"	m	struct:abs_res_	file:
bb_denom	carder.c	/^static int   bb_denom;                 \/* toggle bb into denom of Rrs eqn    *\/$/;"	v	file:
bb_hi	flags_iop.h	/^    float32 *bb_hi ;$/;"	m	struct:iopflagctl_struc
bb_lo	flags_iop.h	/^    float32 *bb_lo ;$/;"	m	struct:iopflagctl_struc
bb_on	flags_iop.h	/^    float32 *bb_on ;$/;"	m	struct:iopflagctl_struc
bb_qaa	get_qaa.c	/^static float *bb_qaa;        \/* backscatter coefficient                 *\/$/;"	v	file:
bbnap	giop.c	/^static float  *bbnap;$/;"	v	file:
bbnap1	giop.c	/^static float  *bbnap1;$/;"	v	file:
bbnap_nvec	giop.h	/^  int     bbnap_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
bbnap_opt	giop.h	/^  int bbnap_opt;       \/* bbnap function type    *\/$/;"	m	struct:giop_ctl_str
bbnap_tab_file	giop.h	/^  char    bbnap_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
bbnap_tab_nw	giop.h	/^  int     bbnap_tab_nw;   \/* elements in bbnap tab *\/$/;"	m	struct:giop_ctl_str
bbnap_tab_s	giop.h	/^  float **bbnap_tab_s;    \/* bbnap tab values      *\/$/;"	m	struct:giop_ctl_str
bbnap_tab_w	giop.h	/^  float  *bbnap_tab_w;    \/* bbnap tab wavelengths *\/$/;"	m	struct:giop_ctl_str
bbp	atmcor_soa.f	/^      REAL*8   xmi,ymr(1),C,acdm,bbp,/;"	v
bbp	carder.c	/^static double *bbp, *bb;$/;"	v	file:
bbp	get_pml.c	/^static float *bbp;$/;"	v	file:
bbp	giop.c	/^static float  *bbp;$/;"	v	file:
bbp	gsm.c	/^static double *bbp;$/;"	v	file:
bbp	las_iop.c	/^static float *bbp;           \/\/ particulate backscatter coefficient per band and pixel$/;"	v	file:
bbp	swim.c	/^static float *bbp;               \/\/ bbp value for the scan line bbp[pix, band]$/;"	v	file:
bbp1	giop.c	/^static float  *bbp1;$/;"	v	file:
bbp443	raman.c	/^static float bbp443;        \/\/QAA-derived backscattering coefficient at 443 nm$/;"	v	file:
bbpRef	convert_band.c	/^    float *aphRef,*adgRef,*bbpRef;$/;"	m	struct:_context	file:
bbp_hi	flags_iop.h	/^    float32 *bbp_hi;$/;"	m	struct:iopflagctl_struc
bbp_lo	flags_iop.h	/^    float32 *bbp_lo;$/;"	m	struct:iopflagctl_struc
bbp_nvec	giop.h	/^  int     bbp_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
bbp_on	flags_iop.h	/^    float32 *bbp_on;$/;"	m	struct:iopflagctl_struc
bbp_opt	giop.h	/^  int bbp_opt;         \/* bbp function type    *\/$/;"	m	struct:giop_ctl_str
bbp_qaa	get_qaa.c	/^static float *bbp_qaa;       \/* backscatter coefficient                 *\/$/;"	v	file:
bbp_ref	bioOptBandShift.c	/^static float *sh_prod_arr,*adg_ref,*bbp_ref;$/;"	v	file:
bbp_s	giop.c	/^static float  *bbp_s;$/;"	v	file:
bbp_s	giop.h	/^  float bbp_s;         \/* BBPS spectral param  *\/$/;"	m	struct:giop_ctl_str
bbp_s_max	giop.c	/^static float bbp_s_max = 5.0;$/;"	v	file:
bbp_s_min	giop.c	/^static float bbp_s_min = 0.0;$/;"	v	file:
bbp_slope	get_psd_ksm.c	/^float bbp_slope[449] = { -1.5, -1.49, -1.48, -1.47, -1.46, -1.45, -1.44, -1.43,$/;"	v
bbp_tab_file	giop.h	/^  char    bbp_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
bbp_tab_nw	giop.h	/^  int     bbp_tab_nw;   \/* elements in bbp tab *\/$/;"	m	struct:giop_ctl_str
bbp_tab_s	giop.h	/^  float **bbp_tab_s;    \/* bbp tab values      *\/$/;"	m	struct:giop_ctl_str
bbp_tab_w	giop.h	/^  float  *bbp_tab_w;    \/* bbp tab wavelengths *\/$/;"	m	struct:giop_ctl_str
bbp_w	giop.h	/^  float bbp_w;         \/* BBPS reference wave  *\/$/;"	m	struct:giop_ctl_str
bbph	giop.c	/^static float  *bbph;$/;"	v	file:
bbph1	giop.c	/^static float  *bbph1;$/;"	v	file:
bbph_nvec	giop.h	/^  int     bbph_nvec;     \/* number of eigenvect *\/$/;"	m	struct:giop_ctl_str
bbph_opt	giop.h	/^  int bbph_opt;        \/* bbph function type    *\/$/;"	m	struct:giop_ctl_str
bbph_tab_file	giop.h	/^  char    bbph_tab_file[FILENAME_MAX];$/;"	m	struct:giop_ctl_str
bbph_tab_nw	giop.h	/^  int     bbph_tab_nw;   \/* elements in bbph tab *\/$/;"	m	struct:giop_ctl_str
bbph_tab_s	giop.h	/^  float **bbph_tab_s;    \/* bbph tab values      *\/$/;"	m	struct:giop_ctl_str
bbph_tab_w	giop.h	/^  float  *bbph_tab_w;    \/* bbph tab wavelengths *\/$/;"	m	struct:giop_ctl_str
bbpstar	gsm.c	/^static float  *bbpstar;$/;"	v	file:
bbpstar	swim.c	/^static float *bbpstar;   \/\/spectral shape of particle backscat (bbpstar[band])$/;"	v	file:
bbstr	calcite.c	/^static float bbstr     = 1.628;$/;"	v	file:
bbtot	raman.c	/^static float *bbtot;       \/\/total backscattering modelled at sensor bands$/;"	v	file:
bbtot	swim.c	/^static float *bbtot;             \/\/ bbtot value for the scan line bbtot[pix, band]$/;"	v	file:
bbtotR	raman.c	/^static float *bbtotR;      \/\/total backscattering coefficient at Raman excitation bands$/;"	v	file:
bbw	carder.c	/^static double bbw[6];                  \/* water backscattering coefs.        *\/$/;"	v	file:
bbw	get_pml.c	/^static float  *bbw;$/;"	v	file:
bbw	get_qaa.c	/^static float *bbw;           \/* pure-water backscattering               *\/$/;"	v	file:
bbw	giop.c	/^static float  *bbw;$/;"	v	file:
bbw	giop.h	/^  float *bbw    ; \/* bbw per fit wave  [NBANDS]   *\/$/;"	m	struct:giop_ctl_str
bbw	gsm.c	/^static float  *bbw    ;$/;"	v	file:
bbw	l1_struc.h	/^    float       *bbw   ;$/;"	m	struct:l1_struct
bbw	l2_struc.h	/^    float  *bbw;$/;"	m	struct:l2_struct
bbw	las_iop.c	/^static float *bbw;           \/\/ pure-water backscattering per band              $/;"	v	file:
bbw	niwa_iop.c	/^static float aw[VBANDS], bbw[VBANDS], lambda[VBANDS];$/;"	v	file:
bbw	pml.c	/^static float *bbw;$/;"	v	file:
bbw	raman.c	/^static float *bbw;          \/\/water backscattering coefficient at sensor bands$/;"	v	file:
bbw	seawater_get.c	/^static float *bbw = NULL;$/;"	v	file:
bbw	swim.c	/^static float *bbw;       \/\/pure water backscat spectra (bbw[band])$/;"	v	file:
bbwR	raman.c	/^static float *bbwR;         \/\/water backscattering coefficient at Raman excitation bandss$/;"	v	file:
bbw_i	bioOptBandShift.c	/^    float *aw_i,*bbw_i;$/;"	m	struct:_context	file:
bbw_i	convert_band.c	/^    float *aw_i,*bbw_i,*aBric_i,*bBric_i;$/;"	m	struct:_context	file:
bbw_o	bioOptBandShift.c	/^    float *aw_o,*bbw_o;$/;"	m	struct:_context	file:
bbw_o	convert_band.c	/^    float *aw_o,*bbw_o,*aBric_o,*bBric_o;$/;"	m	struct:_context	file:
bbw_ref	bioOptBandShift.c	/^    float aw_ref,bbw_ref,wvl_ref;$/;"	m	struct:_context	file:
bbw_spectra	water.c	/^float bbw_spectra(int32_t wl, int32_t width)$/;"	f
bbwtab	water.c	/^static double bbwtab[NAWTAB];$/;"	v	file:
bc	pml_iop_tables.c	/^float *ch_lev, *ac[MAX_BANDS], *bc[MAX_BANDS];$/;"	v
bckscn	rawcal.h	/^	FLOAT64	bckscn[5][30];$/;"	m	struct:__anon44::_rawCalEnt
bcmp	Xfuncs.h	32;"	d
bcmp	Xfuncs.h	45;"	d
bcopy	Xfuncs.h	30;"	d
bcopy	Xfuncs.h	40;"	d
bcost	aerosol.c	/^    float  *bcost;$/;"	m	struct:aermod_struct	file:
begdm	l1_mos_hdf.c	/^static int32_t  begdm;$/;"	v	file:
begmo	l1_mos_hdf.c	/^static int32_t  begmo;$/;"	v	file:
begyr	l1_mos_hdf.c	/^static int32_t  begyr;$/;"	v	file:
below_to_above	get_rhown_nir.c	/^float below_to_above(float Rrs)$/;"	f
benthicProportionId	swim.c	/^static int benthicProportionId; \/\/ netCDF variable id for benthicProportion$/;"	v	file:
benthicRFileExist	swim.c	/^static int benthicRFileExist;   \/\/ binary flag, benthic reflectance file supplied to l2gen or not.$/;"	v	file:
benthicROutOfBounds	swim.c	/^static int benthicROutOfBounds; \/\/ binary flag, pixel not within supplied benthic reflectance lat\/lon grid$/;"	v	file:
benthicRefl	swim.c	/^static double* benthicRefl; \/\/ bottom percent for this pixel (benthicRefl[band])$/;"	v	file:
beta0	raman.c	/^static float beta0[6] = {0.014, 0.015, 0.010, 0.010, 0.010, 0.010};$/;"	v	file:
beta1	raman.c	/^static float beta1[6] = {-0.022, -0.023, -0.051, -0.070, -0.080, -0.081};$/;"	v	file:
betaCor0	raman.c	/^static float *betaCor0;$/;"	v	file:
betaCor1	raman.c	/^static float *betaCor1;$/;"	v	file:
bias	owt.c	/^    float  bias;$/;"	m	struct:error_struc	file:
bias	sst.c	/^    float bias[NQUALMAXv6a][NLATMAXv6a][NDIFFMAXv6a][NSENZMAXv6a][NQUARMAXv6a][NSSTMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
bias	sst.c	/^    float bias[NQUALMAXv6mv][NLATMAXv6mv][NDIFFMAXv6mv][NSENZMAXv6mv][NQUARMAXv6mv][NSSTMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
bias_counts_sst	sst.c	/^static int16 *bias_counts_sst = NULL;$/;"	v	file:
bias_counts_sst3	sst.c	/^static int16 *bias_counts_sst3 = NULL;$/;"	v	file:
bias_counts_sst4	sst.c	/^static int16 *bias_counts_sst4 = NULL;$/;"	v	file:
bias_mean	sst.c	/^    float bias_mean[NQUALMAXv6a][NLATMAXv6a][NDIFFMAXv6a][NSENZMAXv6a][NQUARMAXv6a][NSSTMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
bias_mean	sst.c	/^    float bias_mean[NQUALMAXv6mv][NLATMAXv6mv][NDIFFMAXv6mv][NSENZMAXv6mv][NQUARMAXv6mv][NSSTMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
bias_mean_sst	sst.c	/^static float *bias_mean_sst = NULL;$/;"	v	file:
bias_mean_sst3	sst.c	/^static float *bias_mean_sst3 = NULL;$/;"	v	file:
bias_mean_sst4	sst.c	/^static float *bias_mean_sst4 = NULL;$/;"	v	file:
bias_sst	sst.c	/^static float *bias_sst = NULL;$/;"	v	file:
bias_sst3	sst.c	/^static float *bias_sst3 = NULL;$/;"	v	file:
bias_sst4	sst.c	/^static float *bias_sst4 = NULL;$/;"	v	file:
bilin	get_dem_height.c	/^float bilin(float *x, float *y, int32 *isize, int16 *tile, int32 *status)$/;"	f
bilin_interp	anc_acq.c	/^float bilin_interp( float *data, int xbox_st, int nx, int ybox_st, $/;"	f
bilinear	l1_mos_hdf.c	/^int bilinear(float p[PSIZE][PSIZE],float x[NS][NP],$/;"	f
bin_climatology	bin_climatology.c	/^float bin_climatology(char *l3file, int32_t day, float lon, float lat, char *prodname)$/;"	f
bin_match	target_io.c	/^int32_t bin_match(int32_t nbins, int32_t *bins, int32_t bin_num)$/;"	f
bindex_get	windex.c	/^int bindex_get(int32_t wave)$/;"	f
bindex_get_555	windex.c	/^int bindex_get_555(void)$/;"	f
bindex_set	windex.c	/^void bindex_set(int32_t wave[], int nwave, int dwave_vswir)$/;"	f
bindx	filehandle.h	/^    int32_t   *bindx;              \/* index to closest seawifs band          *\/$/;"	m	struct:filehandle_struct
bindx	giop.h	/^  int   *bindx  ; \/* index to sensor wave [NBANDS]*\/$/;"	m	struct:giop_ctl_str
bindx	l1_struc.h	/^    int32_t  *bindx;$/;"	m	struct:l1_struct
bindx	l2_struc.h	/^    int32_t  *bindx;$/;"	m	struct:l2_struct
bins	bin_climatology.c	/^static int32_t  *bins;$/;"	v	file:
bins	read_l3bin.h	/^    int32_t   *bins;$/;"	m	struct:l3bin_struct
binsoverlain	main_l1mapgen.c	/^static int *binsoverlain = NULL;$/;"	v	file:
binsperpixel	main_l1mapgen.c	/^static int binsperpixel = 0;$/;"	v	file:
bioBandShift	convert_band.c	/^float bioBandShift(float wvl[],float rrs[],int nw,float tarWvl)$/;"	f
bioOptBandShift	bioOptBandShift.c	/^void bioOptBandShift(l2str *l2rec,l2prodstr *p, float prod[]){$/;"	f
biogeochem_iter	pml_iop_calculate.c	/^int biogeochem_iter(float al, float au, float *adyu, float *adyl, float *aphl)$/;"	f
biogeochem_mod	pml_iop_calculate.c	/^int biogeochem_mod(float au, float adyu, float *al_m, float *adyl_m, float *aphl_m)$/;"	f
blstr	main_l3gen.cpp	/^typedef Hdf::binListStruct blstr;$/;"	t	file:
bms_all	aerosol.c	/^    float  *bms_all;$/;"	m	struct:aermod_struct	file:
bmv	atmcor_soa.f	/^      subroutine bmv(/;"	s
bnd_dat_id	l1_viirs_h5.c	/^static h5io_str geo_dat_id[7], bnd_dat_id[2][MAXBANDS];$/;"	v	file:
boundaries	atmcor_soa.f	2113;"	c	subroutine:MAIN_OPTIM_INOUT_PROC
box_failed	lonlat2pixline.h	/^        int box_failed; \/**< 1 if the box was not fully extracted *\/$/;"	m	struct:lonlat2pixline_struct
box_info	b128_msk_get.c	/^  } box_info[2][BOX_MAX];$/;"	v	typeref:struct:box_info_str	file:
box_info_str	b128_msk_get.c	/^static struct box_info_str$/;"	s	file:
box_num	b128_msk_get.c	/^  int box_num;  \/* box number stored in this slot *\/$/;"	m	struct:box_info_str	file:
box_ptr	b128_msk_get.c	/^  unsigned short *box_ptr; \/* pointer to the box's data *\/$/;"	m	struct:box_info_str	file:
box_t	main_l1info.c	/^} box_t;$/;"	t	typeref:struct:__anon37	file:
boxes_active	b128_msk_get.c	/^static int boxes_active[2] = {  0,  0 };$/;"	v	file:
bp	pml_iop_tables.c	/^int bp[2], maxit;$/;"	v
bp_1	pml_iop_tables.c	/^int bp_base,bp_1,bp_2,max_iter,n_bands;$/;"	v
bp_2	pml_iop_tables.c	/^int bp_base,bp_1,bp_2,max_iter,n_bands;$/;"	v
bp_base	pml_iop_tables.c	/^int bp_base,bp_1,bp_2,max_iter,n_bands;$/;"	v
bp_lev	niwa_iop.c	/^static float band_lev[LBANDS], ap_lev[AP_NS], bp_lev[BP_NS];$/;"	v	file:
bp_lev	pml_iop_tables.c	/^float *ap_lev, *bp_lev;$/;"	v
bp_n	niwa_iop.c	/^static int ap_n, bp_n;$/;"	v	file:
bp_n	pml_iop_tables.c	/^int32_t ap_n, bp_n;$/;"	v
brdf	l2_struc.h	/^    float  *brdf; \/\/bi-direction reflectance function$/;"	m	struct:l2_struct
brdf_opt	input_struc.h	/^  int32_t   brdf_opt;       \/* 1=Fresnel, 2=Rgoth, 3=f\/Q*Rgoth          *\/$/;"	m	struct:input_struct
brdfsat	vcal_struc.h	/^    float  *brdfsat;$/;"	m	struct:vcal_struct
brdftgt	vcal_struc.h	/^    float  *brdftgt;$/;"	m	struct:vcal_struct
breflectfile	input_struc.h	/^  char   breflectfile[FILENAME_MAX]; \/* bottom reflectance input file*\/$/;"	m	struct:input_struct
brent	numerical.c	/^float brent(float ax, float bx, float cx, float (*f)(float), float tol, float *xmin)$/;"	f
bres	mipoly.h	/^     BRESINFO bres;        \/* Bresenham info to run the edge     *\/$/;"	m	struct:_EdgeTableEntry
bs	pml_iop_tables.c	/^float *sp_lev, *as[MAX_BANDS], *bs[MAX_BANDS];$/;"	v
btavg	sst.c	/^int32_t btavg(int32_t ip, int ib, int nbands, statstr *statrec) {$/;"	f
btbox	sst.c	/^static int btbox = 3;$/;"	v	file:
btboxstats	sst.c	/^int32_t btboxstats(int32_t ip, int ib, int nbands, int32_t nx, int32_t ny,$/;"	f
btboxv	sst.c	/^static int   btboxv     =    5;$/;"	v	file:
btfile	input_struc.h	/^  char      btfile  [FILENAME_MAX];$/;"	m	struct:input_struct
btrefdiffv6	sst.c	/^float btrefdiffv6(int32_t ip, float BT39, float BT40, l2str *l2rec) {$/;"	f
btype	l1_viirs_h5.c	/^static int32_t btype[] = { 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 1 };$/;"	v	file:
buf	l1_goci.c	/^static uint32_t *buf;$/;"	v	file:
buf	l1_oli.c	/^    uint16_t* buf; \/\/ buffer used to read one scan line from TIFF file$/;"	m	struct:oli_struct	file:
bzero	Xfuncs.h	31;"	d
bzero	Xfuncs.h	44;"	d
c	las_iop.c	/^static float *c;             \/\/ beam attenuation coefficient per band and pixel               $/;"	v	file:
c0	carder.c	/^static double c0, c1, c2, c3;          \/* coefs for 490:555 chl alg          *\/$/;"	v	file:
c1	carder.c	/^static double c0, c1, c2, c3;          \/* coefs for 490:555 chl alg          *\/$/;"	v	file:
c2	carder.c	/^static double c0, c1, c2, c3;          \/* coefs for 490:555 chl alg          *\/$/;"	v	file:
c3	carder.c	/^static double c0, c1, c2, c3;          \/* coefs for 490:555 chl alg          *\/$/;"	v	file:
caco3_msk	calcite.c	/^static int32_t  caco3_msk = LAND | HIGLINT | CLOUD;$/;"	v	file:
caco3hi	calcite.c	/^static float caco3hi   = 0.003;$/;"	v	file:
caco3min	calcite.c	/^static float caco3min  = 1.18e-5;$/;"	v	file:
cal_day	l1a_osmi.c	/^static int16    cal_day;$/;"	v	file:
cal_msec	l1a_osmi.c	/^static int32    cal_msec;$/;"	v	file:
cal_offs	l1a_seawifs.c	/^float64         cal_offs[BANDS_DIMS_1A];$/;"	v
cal_path_tab	l1a_osmi.c	/^static char            cal_path_tab[128];$/;"	v	file:
cal_path_tab	l1a_osmi.c	/^static char    cal_path_tab[128];$/;"	v	file:
cal_path_tab	l1a_seawifs.c	/^char            cal_path_tab[128];$/;"	v
cal_struct	calfile_utils.h	/^typedef struct cal_struct {$/;"	s
cal_year	l1a_osmi.c	/^static int16    cal_year;$/;"	v	file:
calcQAA443	convert_band.c	/^void calcQAA443(float ab_surf_rrs[],float wvl[],int nwvl,ccstr *ctxt)$/;"	f
calc_diatoms_hirata	get_pft_hirata.c	/^float calc_diatoms_hirata(float chl) {$/;"	f
calc_dinoflagellates_hirata	get_pft_hirata.c	/^float calc_dinoflagellates_hirata(float chl) {$/;"	f
calc_greenalgae_hirata	get_pft_hirata.c	/^float calc_greenalgae_hirata(float chl) {$/;"	f
calc_microplankton_hirata	get_pft_hirata.c	/^float calc_microplankton_hirata(float chl) {$/;"	f
calc_nanoplankton_hirata	get_pft_hirata.c	/^float calc_nanoplankton_hirata(float chl) {$/;"	f
calc_par	calc_par.c	/^float calc_par(l2str *l2rec, int ip, int nbands, float *Lt, float taua,$/;"	f
calc_pft_uitz	get_pft_uitz.c	/^void calc_pft_uitz(float mld,float lat, float chl, float *fm, float *fn, float *fp){$/;"	f
calc_picoeukaryotes_hirata	get_pft_hirata.c	/^float calc_picoeukaryotes_hirata(float chl) {$/;"	f
calc_picoplankton_hirata	get_pft_hirata.c	/^float calc_picoplankton_hirata(float chl) {$/;"	f
calc_prochlorococcus_hirata	get_pft_hirata.c	/^float calc_prochlorococcus_hirata(float chl) {$/;"	f
calc_prokaryotes_hirata	get_pft_hirata.c	/^float calc_prokaryotes_hirata(float chl) {$/;"	f
calc_prymnesiophytes_hirata	get_pft_hirata.c	/^float calc_prymnesiophytes_hirata(float chl) {$/;"	f
calc_psd_ksm	get_psd_ksm.c	/^void calc_psd_ksm(float eta, float bbp_443, int ip, float *abundance_micro_ksm,$/;"	f
calc_smile_delta	l1_meris_N1.c	/^void calc_smile_delta(int   *shouldCorrect, $/;"	f
calcite	calcite.c	/^void calcite(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
calcite_2b	calcite.c	/^float calcite_2b(l2str *l2rec, int32_t ip)$/;"	f
calcite_3b	calcite.c	/^float calcite_3b(l2str *l2rec, int32_t ip)$/;"	f
calcite_c	calcite.c	/^float calcite_c(l2str *l2rec, int32_t ip) {$/;"	f
calfile	filehandle.h	/^    char      *calfile;$/;"	m	struct:filehandle_struct
calfile	input_struc.h	/^  char      calfile [FILENAME_MAX];$/;"	m	struct:input_struct
calfile_close	calfile_utils.c	/^int calfile_close(idDS ds_id) {$/;"	f
calfile_create	calfile_utils.c	/^int calfile_create(char *ofile, idDS *ds_id, instr* input, int ydim, int xdim,$/;"	f
calfile_open	calfile_utils.c	/^idDS calfile_open(char *ofile, instr* input, int ydim, int xdim, int nprods,$/;"	f
calfile_write	calfile_utils.c	/^int calfile_write(idDS ds_id, calstr *calrec, int recnum, int ydim, int xdim,$/;"	f
calinput_struct	mscal_struc.h	/^typedef struct calinput_struct {$/;"	s
calloc_nbandsf	msl12_input.c	/^ float* calloc_nbandsf( int32_t nbands, float *nbarray, float init_val) {$/;"	f
calloc_nbandsi	msl12_input.c	/^ int* calloc_nbandsi( int32_t nbands, int *nbarray, int init_val) {$/;"	f
calloc_nbandsi32t	msl12_input.c	/^ int32_t* calloc_nbandsi32t( int32_t nbands, int32_t *nbarray, int32_t init_val) {$/;"	f
calstr	calfile_utils.h	/^} calstr;$/;"	t	typeref:struct:cal_struct
caltype	calfile_utils.h	/^typedef enum {DET2DET, CROSSCAL, BINMATCH} caltype;$/;"	t	typeref:enum:__anon23
carder	carder.c	/^void carder(l2str *l2rec )$/;"	f
carder_empirical	carder.c	/^int carder_empirical( float *rrs, float sst, float ndt, float *chlPtr)$/;"	f
carder_model	carder.c	/^int carder_model(int32_t nbands, double *rrs, double *rrswl, float sst, float ndt,$/;"	f
carder_ran	carder.c	/^int carder_ran(int recnum)$/;"	f
cat_ix	l2prod_struc.h	/^    int     cat_ix;$/;"	m	struct:l2prod_index_struct
cauchy	atmcor_soa.f	/^      subroutine cauchy(/;"	s
ccost	aerosol.c	/^    float  *ccost;$/;"	m	struct:aermod_struct	file:
ccstr	bioOptBandShift.c	/^    } ccstr;$/;"	t	typeref:struct:_context	file:
ccstr	convert_band.c	/^} ccstr;$/;"	t	typeref:struct:_context	file:
cdom_mannino	cdom_mannino.c	/^void cdom_mannino(l2str *l2rec, int prodnum, float prod[])$/;"	f
cdom_morel_ran	cdom_morel.c	/^int cdom_morel_ran(int recnum)$/;"	f
cen	sst.c	/^    float cen;$/;"	m	struct:stat_struct	file:
cenlin	runcal.h	/^	FLOAT32	cenlin;$/;"	m	struct:__anon45::_runCalEnt
center_time	scene_meta.h	/^  char  center_time[32];$/;"	m	struct:scene_meta_str
centerfound	scene_meta.c	/^static int   centerfound  = 0;$/;"	v	file:
cfg_tab	pml_iop_config.c	/^struct tab_atom cfg_tab[MAX_TAB];$/;"	v	typeref:struct:tab_atom
ch22detcor	input_struc.h	/^  float  ch22detcor[10];	 \/* channel 22 detector corrections  *\/$/;"	m	struct:input_struct
ch23detcor	input_struc.h	/^  float  ch23detcor[10];	 \/* channel 23 detector corrections  *\/$/;"	m	struct:input_struct
ch4	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
ch_lev	pml_iop_tables.c	/^float *ch_lev, *ac[MAX_BANDS], *bc[MAX_BANDS];$/;"	v
ch_n	pml_iop_tables.c	/^int32_t nband, ch_n, sp_n, od_n;$/;"	v
chand	atmocor1_land.c	/^void chand(float xphi, float xmuv, float xmus, float *xtau, float *rhoray, double *trup, double *trdown, int nbands)$/;"	f
checkTagLine	jplaeriallib.c	/^char* checkTagLine(char *linein, char* tag) {$/;"	f
check_if_in_box	main_l1info.c	/^check_if_in_box(float32 lat, float32 lon, float32 northern_boundary, float32 southern_boundary,$/;"	f
check_if_in_west_east_boundaries	main_l1info.c	/^check_if_in_west_east_boundaries(float32 lon, float32 western_boundary, float32 eastern_boundary) {$/;"	f
checknspTagLine	jplaeriallib.c	/^char* checknspTagLine(char *linein, char* tag) {$/;"	f
chisqr	giop.c	/^static float  *chisqr;$/;"	v	file:
chk_aviris	getformat.c	/^int32_t chk_aviris(char *fname, filehandle *file) {$/;"	f
chk_goci	getformat.c	/^int32_t chk_goci(char *fname, filehandle *file) {$/;"	f
chk_hico	getformat.c	/^int32_t chk_hico(char *fname, filehandle *file) {$/;"	f
chk_olci_xml	getformat.c	/^int32_t chk_olci_xml(char *fname, filehandle *file) {$/;"	f
chk_oli	getformat.c	/^int32_t chk_oli(char *fname, filehandle *file) {$/;"	f
chk_oli_geo	getformat.c	/^int32_t chk_oli_geo(char *fname) {$/;"	f
chk_prism	getformat.c	/^int32_t chk_prism(char *fname, filehandle *file) {$/;"	f
chk_viirs	getformat.c	/^int32_t chk_viirs(char *fname, filehandle *file)$/;"	f
chl	carder.c	/^static double *chl;$/;"	v	file:
chl	cdom_morel.c	/^static float *chl;$/;"	v	file:
chl	giop.c	/^static float  *chl;$/;"	v	file:
chl	giop.h	/^  float chl;           \/* Input chlorophyll    *\/$/;"	m	struct:giop_ctl_str
chl	gsm.c	/^static double *chl;$/;"	v	file:
chl	l2_struc.h	/^    float  *chl;$/;"	m	struct:l2_struct
chl	read_l3bin.h	/^    float     *chl;$/;"	m	struct:l3bin_struct
chl_abi	get_chl.c	/^float chl_abi(l2str *l2rec, float nLw[])$/;"	f
chl_carder_empirical	carder.c	/^void chl_carder_empirical(l2str *l2rec, float prod[])$/;"	f
chl_cdomcorr_morel	cdom_morel.c	/^float chl_cdomcorr_morel(float chl, float idx)$/;"	f
chl_cdr	get_chl.c	/^float chl_cdr(l2str *l2rec, float Rrs[])$/;"	f
chl_error	owt.c	/^float chl_error(char *fname, float wts[], int nwts, int dclass)$/;"	f
chl_hu	get_chl.c	/^float chl_hu(l2str *l2rec, float Rrs[])$/;"	f
chl_hu2	get_chl.c	/^float chl_hu2(l2str *l2rec, float Rrs[])$/;"	f
chl_inconsistent_thresh	carder.c	/^static double low_412_thresh, low_555_thresh, chl_inconsistent_thresh;$/;"	v	file:
chl_max	giop.c	/^static float chl_max   = 10.0;$/;"	v	file:
chl_min	giop.c	/^static float chl_min   = 0.03;$/;"	v	file:
chl_oc2	get_chl.c	/^float chl_oc2(l2str *l2rec, float Rrs[])$/;"	f
chl_oc3	get_chl.c	/^float chl_oc3(l2str *l2rec, float Rrs[])$/;"	f
chl_oc3c	get_chl.c	/^float chl_oc3c(l2str *l2rec, float Rrs[])$/;"	f
chl_oc4	get_chl.c	/^float chl_oc4(l2str *l2rec, float Rrs[])$/;"	f
chl_oci	get_chl.c	/^float chl_oci(l2str *l2rec, float Rrs[])$/;"	f
chl_oci2	get_chl.c	/^float chl_oci2(l2str *l2rec, float Rrs[])$/;"	f
chl_ref	pml_iop_tables.c	/^float chl_ref(float chl, int band)$/;"	f
chl_vc	virtual_constellation.c	/^float chl_vc(l2str *l2rec, int32_t ip) {$/;"	f
chla	swim.c	/^static float *chla;   \/\/chla value for scan line chla[pix,band] - chlorophyll concentration$/;"	v	file:
chlbad	chl.h	/^static float chlbad = BAD_FLT;$/;"	v
chlmax	chl.h	/^static float chlmax = 1000.0;$/;"	v
chlmin	chl.h	/^static float chlmin = 0.001;$/;"	v
chloc2c	input_struc.h	/^  float   chloc2c[5];$/;"	m	struct:input_struct
chloc2w	input_struc.h	/^  int32_t chloc2w[2];$/;"	m	struct:input_struct
chloc3c	input_struc.h	/^  float   chloc3c[5];$/;"	m	struct:input_struct
chloc3w	input_struc.h	/^  int32_t chloc3w[3];$/;"	m	struct:input_struct
chloc4c	input_struc.h	/^  float   chloc4c[5];$/;"	m	struct:input_struct
chloc4w	input_struc.h	/^  int32_t chloc4w[4];$/;"	m	struct:input_struct
chlthreshold	input_struc.h	/^  float   chlthreshold;$/;"	m	struct:input_struct
cirrus	l1_struc.h	/^    char   *cirrus;$/;"	m	struct:l1_struct
cirrus_opt	input_struc.h	/^  int32_t   cirrus_opt;     \/* 1=apply cirrus cloud filtering           *\/$/;"	m	struct:input_struct
cirrus_thresh	input_struc.h	/^  float  cirrus_thresh[2];       \/* cirrus reflectance thresholds    *\/$/;"	m	struct:input_struct
class_34k_w	get_owmc.c	/^static float *class_34k_w;$/;"	v	file:
class_k	get_owmc.c	/^static float *class_k;$/;"	v	file:
class_ward	get_owmc.c	/^static float *class_ward;$/;"	v	file:
cldbox	sst.c	/^static int cldbox = 3;$/;"	v	file:
cldboxv	sst.c	/^static int   cldboxv    =    5;$/;"	v	file:
cldfile	input_struc.h	/^  char      cldfile [FILENAME_MAX];  $/;"	m	struct:input_struct
cldthresh	sst.c	/^static float cldthresh = 0.01; \/* modis *\/$/;"	v	file:
cldthreshv	sst.c	/^static float cldthreshv = 0.04; \/* viirs *\/$/;"	v	file:
clim_spm	pml_iop_tables.c	/^double n_min,n_max,iter_scale,clim_spm;$/;"	v
close_aer	aer_io.c	/^void close_aer(void)$/;"	f
close_l3b	bin_climatology.c	/^int32 close_l3b()$/;"	f
close_target	target_io.c	/^void close_target(void)$/;"	f
closebin	bin_climatology.c	/^void closebin(void){$/;"	f
closel1	l1_io.c	/^void closel1(filehandle *l1file)$/;"	f
closel1_aci_hdf	l1_aci_hdf.c	/^int closel1_aci_hdf(filehandle *file) {$/;"	f
closel1_aviris	l1_aviris.c	/^int closel1_aviris(filehandle *file) {$/;"	f
closel1_czcs	l1_czcs_hdf.c	/^int closel1_czcs(filehandle *file)$/;"	f
closel1_generic	l1_generic_write.c	/^void closel1_generic(filehandle *l1file) {$/;"	f
closel1_goci	l1_goci.c	/^closel1_goci( filehandle *file )$/;"	f
closel1_hdf	l1_hdf_generic_write.c	/^void closel1_hdf(filehandle *l1file)$/;"	f
closel1_hdf_g	l1_hdf_generic_read.c	/^int closel1_hdf_g(filehandle *file)$/;"	f
closel1_hico_h5	l1_hico_h5.c	/^int closel1_hico_h5(filehandle *file) {$/;"	f
closel1_hmodis_hdf	l1_hmodis_hdf.c	/^int closel1_hmodis_hdf() {$/;"	f
closel1_meris_CC	l1_meris_CC.c	/^closel1_meris_CC(filehandle *file)$/;"	f
closel1_meris_N1	l1_meris_N1.c	/^closel1_meris_N1(filehandle *file)$/;"	f
closel1_mos_hdf	l1_mos_hdf.c	/^int closel1_mos_hdf(filehandle *l1file)     $/;"	f
closel1_nc_generic	l1_nc_generic_read.c	/^int closel1_nc_generic(filehandle *file) {$/;"	f
closel1_ocm2_hdf	l1_ocm2_hdf.c	/^int closel1_ocm2_hdf(filehandle *file)$/;"	f
closel1_ocm_hdf	l1_ocm_hdf.c	/^int closel1_ocm_hdf(filehandle *file)$/;"	f
closel1_ocmdb_hdf	l1_ocmdb_hdf.c	/^int closel1_ocmdb_hdf(filehandle *file)$/;"	f
closel1_octs_hdf	l1_octs_hdf.c	/^int closel1_octs_hdf(filehandle *l1file)$/;"	f
closel1_olci	l1_olci.c	/^int closel1_olci(filehandle *file) {$/;"	f
closel1_oli	l1_oli.c	/^int closel1_oli(filehandle *file) {$/;"	f
closel1_orca	l1_orca.c	/^int closel1_orca(filehandle *file) {$/;"	f
closel1_prism	l1_prism.c	/^int closel1_prism(filehandle *file) {$/;"	f
closel1_viirs_h5	l1_viirs_h5.c	/^int closel1_viirs_h5(filehandle * file)$/;"	f
closel1_viirs_nc	l1_viirs_nc.c	/^int closel1_viirs_nc(filehandle *file) {$/;"	f
closel1_viirs_nc	l1_viirs_nc_stub.c	/^int closel1_viirs_nc(filehandle *file) {$/;"	f
closel1_xcal_hdf	l1_xcal_hdf.c	/^int closel1_xcal_hdf(filehandle *file)$/;"	f
closel1a_osmi	l1a_osmi.c	/^int closel1a_osmi(filehandle *file)$/;"	f
closel1a_seawifs	l1a_seawifs.c	/^int closel1a_seawifs(filehandle *file)$/;"	f
closel1b_viirs_nc	l1b_viirs_nc.c	/^int closel1b_viirs_nc() {$/;"	f
closel2	l2_generic.c	/^int closel2(filehandle *l2file)$/;"	f
cloud	l1_struc.h	/^    char   *cloud;$/;"	m	struct:l1_struct
cloudMaskOn	l1_struc.h	/^    int32_t   cloudMaskOn;$/;"	m	struct:l1_struct
cloud_albedo	l1_struc.h	/^    float  *cloud_albedo;$/;"	m	struct:l1_struct
cloud_albedo	l2_struc.h	/^    float  *cloud_albedo;$/;"	m	struct:l2_struct
cloud_eps	input_struc.h	/^  float  cloud_eps;              \/* cloud reflectance ratio          *\/$/;"	m	struct:input_struct
cloud_wave	input_struc.h	/^  float  cloud_wave;             \/* cloud test wavelength            *\/$/;"	m	struct:input_struct
cloudmask	input_struc.h	/^  int32_t   cloudmask;              \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
cmprlb	atmcor_soa.f	/^      subroutine cmprlb(/;"	s
cms_all	aerosol.c	/^    float  *cms_all;$/;"	m	struct:aermod_struct	file:
cnt	sst.c	/^    int cnt;$/;"	m	struct:stat_struct	file:
co	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
co2	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
co2_transmittance	gas_trans.c	/^void co2_transmittance(int32_t sensorID, int32_t evalmask, int32_t nwave,$/;"	f
coccolith	input_struc.h	/^  float  coccolith[8];           \/* coccolithophore algorithm coefs. *\/$/;"	m	struct:input_struct
coefset	gsm.c	/^static int32_t coefset = GSMDEFAULT;$/;"	v	file:
collect_bins	main_l1mapgen.c	/^int collect_bins(int number_of_initial_points,$/;"	f
comp_epsilonT	aerosol.c	/^int comp_epsilonT(epsilonTstr *x, epsilonTstr *y) {return(x->eps_obs < y->eps_obs ? -1 : 1);}$/;"	f
comp_rhoaT	aerosol.c	/^int comp_rhoaT(rhoaTstr *x, rhoaTstr *y) {return(x->rhoa < y->rhoa ? -1 : 1);}$/;"	f
comp_rhoa_ms_eps	aerosol.c	/^int comp_rhoa_ms_eps( int32_t nwave, float wave[], float solz, float senz, float phi,$/;"	f
comp_sses_sstv6a	sst.c	/^void comp_sses_sstv6a(ssestabstrv6a *sses, float diff, float sst, float solz,$/;"	f
comp_sses_sstv6mv	sst.c	/^void comp_sses_sstv6mv(ssestabstrv6mv *sses, float diff, float sst, float solz,$/;"	f
comp_sst	sst.c	/^void comp_sst(l2str *l2rec) {$/;"	f
comp_sst3	sst.c	/^void comp_sst3(l2str *l2rec) {$/;"	f
comp_sst4	sst.c	/^void comp_sst4(l2str *l2rec) {$/;"	f
compalphaT	aerosol.c	/^int compalphaT(alphaTstr *x, alphaTstr *y) {return(x->angstrom < y->angstrom ? -1 : 1);}$/;"	f
compare_floats	numerical.c	/^int compare_floats (const void *a, const void *b)$/;"	f
compfloat	filter.c	/^int compfloat(float *x, float *y)$/;"	f
compfnode	filter.c	/^int compfnode(fnode *x, fnode *y)$/;"	f
comphase	dtran_brdf.f	514;"	c	subroutine:read_partial_phase_integrations
comphase	dtran_brdf.f	96;"	c	subroutine:diff_tran_corr
comrtelut	atmcor_soa.f	3811;"	c	subroutine:FUNCT_A_B_C_D_FOURIER_INTERPOLATE
constrain_lat	bin_climatology.c	/^double constrain_lat(double lat){$/;"	f
constrain_lon	bin_climatology.c	/^double constrain_lon(double lon){$/;"	f
conv_rrs_to_555	convert_band.c	/^float conv_rrs_to_555(float Rrs, float wave)$/;"	f
convertDataType	get_l2prod_index.c	/^int convertDataType(char* str) {$/;"	f
convertParamType	get_l2prod_index.c	/^int convertParamType(char* str) {$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(float *a, long nrl, long nrh, long ncl, long nch)$/;"	f
convl12	convl12.c	/^int convl12( l1str *l1rec, l2str *l2rec, int32_t spix, int32_t epix, $/;"	f
convl21	convl21.c	/^int convl21( l2str *l2rec, tgstr *tgrec, int32_t spix, int32_t epix, instr *input, $/;"	f
coordFileID	l1_olci.c	/^static int32_t olci_sd[MAXOLCI_RADFILES],geoFileID,coordFileID,tcoordFileID,instrumentFileID;$/;"	v	file:
corr	l1_hmodis_hdf.c	/^    double *corr;   \/*< subframe correction factors *\/$/;"	m	struct:__anon35	file:
correct_terrain	get_height.c	/^static int (*correct_terrain)(char  *demfile,$/;"	v	file:
counts	l1_czcs_hdf.c	/^uint8 *counts, cz_band_present;$/;"	v
counts	l1a_seawifs.c	/^float32         counts[BANDS_DIMS_1A][GAINS_DIMS_1A][KNEES_DIMS_1A];$/;"	v
counts	sst.c	/^    int16 counts[NQUALMAXv6a][NLATMAXv6a][NDIFFMAXv6a][NSENZMAXv6a][NQUARMAXv6a][NSSTMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
counts	sst.c	/^    int16 counts[NQUALMAXv6mv][NLATMAXv6mv][NDIFFMAXv6mv][NSENZMAXv6mv][NQUARMAXv6mv][NSSTMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
covariance_inversion	covariance_inversion.c	/^void covariance_inversion (float *rrs_cov, int nclasses, int df, float ***y3inv)$/;"	f
cpix	l1_generic_write.c	/^static int32_t cpix;$/;"	v	file:
cpix	l1_hdf_generic_write.c	/^static int32 cpix; $/;"	v	file:
cpix	l2_generic.c	/^static int32 cpix; $/;"	v	file:
cpl1l2	convl12.c	/^void cpl1l2(l1str *l1rec, l2str* l2rec) {$/;"	f
cpl1rec	cpl1rec.c	/^void cpl1rec(l1str *new, l1str *old)$/;"	f
cpswapl	misc.h	142;"	d
cpswaps	misc.h	149;"	d
createNewProduct	get_l2prod_index.c	/^l2prodstr* createNewProduct() {$/;"	f
createPrivateData	l1_oli.c	/^oli_t* createPrivateData(int numBands) {$/;"	f
createPrivateData_av	l1_aviris.c	/^aviris_t* createPrivateData_av (int numBands) {$/;"	f
createPrivateData_olci	l1_olci.c	/^olci_t* createPrivateData_olci (int numBands) {$/;"	f
createPrivateData_pr	l1_prism.c	/^prism_t* createPrivateData_pr (int numBands, int32_t nscan, int32_t npix) {$/;"	f
cross_prod	l1_czcs_hdf.c	/^void cross_prod( double *v1, double *v2, double *vout )$/;"	f
crosscal_append	mscal_struc.c	/^int crosscal_append(char *xcalfile, mscalstr calstr)$/;"	f
crosscal_create	mscal_struc.c	/^int crosscal_create(char *xcalfile, idDS *ds_id, mscalstr calstr, int32_t npixs)$/;"	f
crosscal_readblocks	mscal_struc.c	/^int crosscal_readblocks(char *xcalfile, idDS *ds_id, int32_t *spix, int32_t *totalpixs, mscalstr *calstr)$/;"	f
crosscal_writeblocks	mscal_struc.c	/^int crosscal_writeblocks(char *xcalfile, idDS ds_id, int32_t *spix, mscalstr calstr, int32_t nfiles)$/;"	f
csalbr	get_rhos.c	/^float csalbr(float xtau)$/;"	f
cscan	l1_generic_write.c	/^static int32_t cscan;$/;"	v	file:
cscan	l1_hdf_generic_write.c	/^static int32 cscan; $/;"	v	file:
cscan	l1q_struc.h	/^    int32_t cscan;$/;"	m	struct:l1q_struct
cscan	l2_generic.c	/^static int32 cscan; $/;"	v	file:
csenz	l1_struc.h	/^    float  *csenz;$/;"	m	struct:l1_struct
csenz	l2_struc.h	/^    float  *csenz; \/\/cosine sensor zenith$/;"	m	struct:l2_struct
csolz	l1_struc.h	/^    float  *csolz;$/;"	m	struct:l1_struct
csolz	l2_struc.h	/^    float  *csolz; \/\/cosine solar zenith$/;"	m	struct:l2_struct
cst1	atrem_corl1.h	/^    float cst1,cst2,cst3,cst4,cst5,cst6;$/;"	m	struct:__anon22
cst2	atrem_corl1.h	/^    float cst1,cst2,cst3,cst4,cst5,cst6;$/;"	m	struct:__anon22
cst3	atrem_corl1.h	/^    float cst1,cst2,cst3,cst4,cst5,cst6;$/;"	m	struct:__anon22
cst4	atrem_corl1.h	/^    float cst1,cst2,cst3,cst4,cst5,cst6;$/;"	m	struct:__anon22
cst5	atrem_corl1.h	/^    float cst1,cst2,cst3,cst4,cst5,cst6;$/;"	m	struct:__anon22
cst6	atrem_corl1.h	/^    float cst1,cst2,cst3,cst4,cst5,cst6;$/;"	m	struct:__anon22
ctl_pt_cols	l1_czcs_hdf.c	/^int32 nctl_pt, *ctl_pt_cols;$/;"	v
ctl_pt_incr	filehandle.h	/^    int32_t   ctl_pt_incr;$/;"	m	struct:filehandle_struct
ctl_pt_incr	input_struc.h	/^  int32_t   ctl_pt_incr;    \/* control-point reduction factor           *\/$/;"	m	struct:input_struct
ctl_pt_lat	l1_czcs_hdf.c	/^float32 *ctl_pt_lat, *ctl_pt_lon, *pos, *pos_err;$/;"	v
ctl_pt_lon	l1_czcs_hdf.c	/^float32 *ctl_pt_lat, *ctl_pt_lon, *pos, *pos_err;$/;"	v
ctl_pt_vx	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
ctl_pt_vy	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
ctl_pt_vz	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
ctl_pt_x	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
cubeio	atrem_cubeio.f90	/^module cubeio$/;"	m
current_file	aer_io.c	/^static char current_file[FILENAME_MAX];$/;"	v	file:
current_file	target_io.c	/^static char current_file[FILENAME_MAX];$/;"	v	file:
current_iscan	bioOptBandShift.c	/^static int current_iscan = -1;$/;"	v	file:
current_iscan	get_owmc.c	/^static int32_t current_iscan = -1;$/;"	v	file:
current_npix	bioOptBandShift.c	/^static int current_npix = -1;$/;"	v	file:
cvector	nrutil.c	/^unsigned char *cvector(long nl, long nh)$/;"	f
cz_band_present	l1_czcs_hdf.c	/^uint8 *counts, cz_band_present;$/;"	v
cz_posll_2_satang	l1_czcs_hdf.c	/^int cz_posll_2_satang( float *pos, int npix, float *lat, float *lon,$/;"	f
czcs_ring	l1_czcs_hdf.c	/^int czcs_ring( int gain, float *lt750, char *ring_sat, l1str *l1rec  )$/;"	f
d	miscanfill.h	/^    int d;           \/* decision variable *\/$/;"	m	struct:__anon40
d1	carder.c	/^static double d1, d2, d3;              \/* filter table parameters            *\/$/;"	v	file:
d2	carder.c	/^static double d1, d2, d3;              \/* filter table parameters            *\/$/;"	v	file:
d2phase	aerosol.c	/^    float  **d2phase;$/;"	m	struct:aermod_struct	file:
d3	carder.c	/^static double d1, d2, d3;              \/* filter table parameters            *\/$/;"	v	file:
d3940ref	sst.c	/^static float *d3940ref = NULL;$/;"	v	file:
dBt4max	sst.c	/^static float dBt4max = 8.0;$/;"	v	file:
dBt4min	sst.c	/^static float dBt4min = 0.0;$/;"	v	file:
dBtmax	sst.c	/^static float dBtmax = 3.6;$/;"	v	file:
dBtmin	sst.c	/^static float dBtmin = 0.0;$/;"	v	file:
dBtrefmax	sst.c	/^static float dBtrefmax = 10.0;$/;"	v	file:
dBtrefmin	sst.c	/^static float dBtrefmin = -1.1;$/;"	v	file:
dFdx	gsm.c	/^static double *dFdx;$/;"	v	file:
dark_mean	l1a_seawifs.c	/^float   dark_mean[8];	   \/* Mean of dark restore counts      *\/$/;"	v
dark_rest	l1a_seawifs.c	/^int16   *dark_rest;$/;"	v
dark_std	l1a_seawifs.c	/^float   dark_std[8];	   \/* Std dev  of dark restore counts  *\/$/;"	v
darkpix	l1_struc.h	/^    char   *darkpix;$/;"	m	struct:l1_struct
dat_id	h5io.h	/^   hid_t dat_id;   \/* set with type H5IO_TYP_DAT_ID *\/$/;"	m	struct:h5io_str_d
dat_rw_mode	h5io.h	/^   int dat_rw_mode;  \/* data read \/ write mode: either all or in slices, *\/$/;"	m	struct:h5io_str_d
data	aer_struc.h	/^    char   *data;$/;"	m	struct:aer_struct
data	anc_acq.c	/^  float *data[3];  \/*  storage for MET1, 2, 3 *\/$/;"	m	struct:met_sto_str_d	file:
data	bin_climatology.c	/^static float *data  [MAXCPROD];$/;"	v	file:
data	calfile_utils.h	/^    float    **data; \/\/data[nproducts][ndets]$/;"	m	struct:cal_struct
data	gsm.c	/^} data;$/;"	v	typeref:struct:datastruct
data	l1_hdf_generic_read.c	/^static float *data   = NULL;$/;"	v	file:
data	l1_ocm2_hdf.c	/^static float   *data  = NULL;$/;"	v	file:
data	l1_struc.h	/^    char   *data;       \/* points to start of variable-length data block *\/$/;"	m	struct:l1_struct
data	l2_struc.h	/^    char   *data;$/;"	m	struct:l2_struct
data	mscal_struc.h	/^    unsigned char   *data;$/;"	m	struct:mscal_struct
data	read_l3bin.h	/^    float     **data; \/\/ This is to contain nLw or Rrs$/;"	m	struct:l3bin_struct
data	target_struc.h	/^    char   *data;$/;"	m	struct:target_struct
data	vcal_struc.h	/^    char   *data;$/;"	m	struct:vcal_struct
data_time	anc_acq.c	/^  double data_time[3];  \/* time (in Julian days and fraction)$/;"	m	struct:met_sto_str_d	file:
datamax	input_struc.h	/^  float   datamax;$/;"	m	struct:input_struct
datamin	input_struc.h	/^  float   datamin;$/;"	m	struct:input_struct
datastruct	gsm.c	/^struct datastruct {$/;"	s	file:
datatype	l2prod_struc.h	/^    int32   datatype;$/;"	m	struct:l2prod_index_struct
daxpy	atmcor_soa.f	/^      subroutine daxpy(/;"	s
day	aviris.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:aviris_struct
day	calfile_utils.h	/^    int32_t  day;$/;"	m	struct:cal_struct
day	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
day	l1_meris_CC.c	/^static int         year, day, msec;$/;"	v	file:
day	l1_meris_N1.c	/^static int         year, day, msec;$/;"	v	file:
day	l1_ocmdb_hdf.c	/^static int32_t year, day, msec;$/;"	v	file:
day	l1_octs_hdf.c	/^static int16 year, day, nline, npix, sline, spix;$/;"	v	file:
day	l1_struc.h	/^    int32_t   *day;$/;"	m	struct:l1_struct
day	l2_struc.h	/^    int32_t   *day;$/;"	m	struct:l2_struct
day	mscal_struc.h	/^    int16  *day;$/;"	m	struct:mscal_struct
day	olci.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:olci_struct
day	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
day	target_struc.h	/^    int32_t   *day;$/;"	m	struct:target_struct
day	viirs_utls.c	/^  int16_t *day;  \/* runs 1 = 31 *\/$/;"	m	struct:leap_str_def	file:
day_node	main_l1info.c	/^    int day_node;$/;"	m	struct:__anon38	file:
day_node_t	main_l1info.c	/^} day_node_t;$/;"	t	typeref:struct:__anon38	file:
dayarr	l1_mos_hdf.c	/^static int32_t  dayarr  [NS];$/;"	v	file:
daynight	scene_meta.c	/^static int   daynight     = UNKNOWNSCENE;$/;"	v	file:
daynight	scene_meta.h	/^  char  daynight[32];$/;"	m	struct:scene_meta_str
daynightflag	main_l1info.c	/^    unsigned char daynightflag;$/;"	m	struct:__anon37	file:
daynightstr	scene_meta.c	/^static char *daynightstr[4] = {"Day","Night","Mixed","Unknown"};$/;"	v	file:
dc	l1a_osmi.c	/^static float32			dc[BANDS_DIMS_1A * 96];  $/;"	v	file:
dcandRho	atmcor_soa.f	/^      REAL*8   dcandRho(/;"	v
dcc865	atmcor_soa.f	/^     &         ddiffB0_ri(NMR,NMI,NLAMBDA),pdB0(3,NMR,NMI,NLAMBDA),$/;"	v
dcopy	atmcor_soa.f	/^      subroutine dcopy(/;"	s
dcsrch	atmcor_soa.f	/^      subroutine dcsrch(/;"	s
dcstep	atmcor_soa.f	/^      subroutine dcstep(/;"	s
ddata	mscal_struc.h	/^    float32 *ddata;$/;"	m	struct:mscal_struct
ddiffA0_ri	atmcor_soa.f	/^     &         ddiffB_ri(NMR,NMI,NLAMBDA) ,pdB(3,NMR,NMI,NLAMBDA) ,$/;"	v
ddiffA_ri	atmcor_soa.f	/^      REAL*8   dcandRho(NMI,NMR,NLAMBDA),pdCandRho(3,NMR,NMI,NLAMBDA),$/;"	v
ddiffB0_ri	atmcor_soa.f	/^     &         ddiffA0_ri(NMR,NMI,NLAMBDA),pdA0(3,NMR,NMI,NLAMBDA),$/;"	v
ddiffB_ri	atmcor_soa.f	/^     &         ddiffA_ri(NMR,NMI,NLAMBDA) ,pdA(3,NMR,NMI,NLAMBDA) ,$/;"	v
ddot	atmcor_soa.f	/^      double precision function ddot(/;"	f
deMalloc	convert_band.c	/^void deMalloc(ccstr* ctxt){$/;"	f
debug_atrem	atrem_corl1.h	/^} debug_atrem;$/;"	v	typeref:struct:__anon22
def_l2prod	filehandle.h	/^    char      def_l2prod[PRODSTRLEN];  \/* list of default L2 products      *\/$/;"	m	struct:filehandle_struct
def_l2prod	input_struc.h	/^  char      def_l2prod[MAX_OFILES][PRODSTRLEN];$/;"	m	struct:input_struct
defaermodels	msl12_input.c	/^char defaermodels[][32] = {"r30f95v01", "r30f80v01", "r30f50v01", "r30f30v01", "r30f20v01", "r30f10v01", "r30f05v01", "r30f02v01", "r30f01v01", "r30f00v01",$/;"	v
default_flaguse	l2binmatch_input.cpp	/^static char default_flaguse[1024];$/;"	v	file:
default_flaguse	msl12_input.c	/^static char default_flaguse[1024];$/;"	v	file:
default_l2prod	l2binmatch_input.cpp	/^static char default_l2prod[PRODSTRLEN];$/;"	v	file:
default_l2prod	msl12_input.c	/^static char default_l2prod[MAX_OFILES][PRODSTRLEN];$/;"	v	file:
define_tile_geometry	get_nc_height.c	/^void define_tile_geometry() {$/;"	f
deflate	filehandle.h	/^    int32_t   deflate;$/;"	m	struct:filehandle_struct
deflate	input_struc.h	/^  int32_t  deflate;$/;"	m	struct:input_struct
defn	l1_oli.c	/^    GTIFDefn* defn; \/\/ geotiff definition structure for first file$/;"	m	struct:oli_struct	file:
defnaermodels	msl12_input.c	/^int defnaermodels = 80;$/;"	v
deg2rad	l1_olci.c	/^double deg2rad(double deg) {$/;"	f
degrees	niwa_iop.c	30;"	d	file:
degrees	pml_iop.h	18;"	d
del_wl	water.c	/^static int    del_wl = INTAWTAB;$/;"	v	file:
delphi	l1_struc.h	/^    float  *delphi;$/;"	m	struct:l1_struct
delphi	l2_struc.h	/^    float  *delphi; \/\/Relative azimuth$/;"	m	struct:l2_struct
delta	atrem_corl1.h	/^    double delta,delta2;$/;"	m	struct:param_table
delta	carder.c	/^static double delta;$/;"	v	file:
delta2	atrem_corl1.h	/^    double delta,delta2;$/;"	m	struct:param_table
deltaLat	get_nc_height.c	/^    double deltaLat;$/;"	m	struct:__anon25	file:
deltaLat	swim.c	/^static double deltaLat;         \/\/ latitude grid spacing$/;"	v	file:
deltaLon	get_nc_height.c	/^    double deltaLon;$/;"	m	struct:__anon25	file:
deltaLon	swim.c	/^static double deltaLon;         \/\/ longitude grid spacing$/;"	v	file:
delta_b_init	pml_iop_tables.c	/^double b_low_init,b_high_init,b_init,delta_b_init,min_db,max_db;$/;"	v
delta_func	las_iop.c	/^float delta_func(float eta)$/;"	f
dem	get_dem_height.c	/^} dem;$/;"	v	typeref:struct:__anon24
dem	get_nc_height.c	/^} dem;$/;"	v	typeref:struct:__anon26	file:
demfile	input_struc.h	/^  char   demfile[FILENAME_MAX];  \/* Digital elevation map file       *\/$/;"	m	struct:input_struct
depth	swim.c	/^static double depth;                 \/\/ depth at this pixel$/;"	v	file:
desc_buffer	l1_mos_hdf.c	/^static char *desc_buffer = NULL;    \/* buffer for the file description *\/$/;"	v	file:
detfac	xcal.c	/^static int detfac = 1;$/;"	v	file:
detnum	calfile_utils.h	/^    uint8_t  detnum;$/;"	m	struct:cal_struct
detnum	l1_struc.h	/^    int32_t   detnum;$/;"	m	struct:l1_struct
detnum	l2_struc.h	/^    int32_t   detnum;$/;"	m	struct:l2_struct
detnum	mscal_struc.h	/^    uint8  *detnum;$/;"	m	struct:mscal_struct
dformat	l1_hdf_generic_read.c	/^static int32 dformat = INTERLACED;$/;"	v	file:
dfr8_addimage	main_l1brsgen.c	/^void dfr8_addimage (char *fname,$/;"	f
diff	sst.c	/^    float diff[NDIFFMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
diff	sst.c	/^    float diff[NDIFFMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
diff_tran	aerosol.c	/^void diff_tran(int32_t sensorID,float wave[], int32_t nwave, int32_t iwnir_l, float solz, float senz, float phi, $/;"	f
diff_tran_corr	dtran_brdf.f	/^      subroutine $/;"	s
dim	l2prod_struc.h	/^    int32   dim[MAX_DIM];$/;"	m	struct:l2prod_index_struct
dimname	l2prod_struc.h	/^    char    dimname[MAX_DIM][DIMNAMELEN];$/;"	m	struct:l2prod_index_struct
dline	input_struc.h	/^  int32_t   dline;          \/* line subsampling increment               *\/$/;"	m	struct:input_struct
dline	mscal_struc.h	/^    int32_t   dline;            \/* line subsampling increment               *\/$/;"	m	struct:calinput_struct
dln	atrem_corl1.h	/^    int32_t dln;$/;"	m	struct:__anon3
dlt	atrem_corl1.h	/^    float hsurf,dlt,dlt2;$/;"	m	struct:__anon6
dlt2	atrem_corl1.h	/^    float hsurf,dlt,dlt2;$/;"	m	struct:__anon6
dmatrix	nrutil.c	/^double **dmatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
dmaxarg1	nrutil.h	/^static double dmaxarg1,dmaxarg2;$/;"	v
dmaxarg2	nrutil.h	/^static double dmaxarg1,dmaxarg2;$/;"	v
dmi_4	atmcor_soa.f	/^      REAL*8   dmi_4(/;"	v
dminarg1	nrutil.h	/^static double dminarg1,dminarg2;$/;"	v
dminarg2	nrutil.h	/^static double dminarg1,dminarg2;$/;"	v
dmr	atmcor_soa.f	/^      REAL*8   dmi_4(NMI),dmr(/;"	v
dms_all	aerosol.c	/^    float  *dms_all;$/;"	m	struct:aermod_struct	file:
dname	l1_hdf_generic_read.c	/^static char **dname;$/;"	v	file:
dname	l1_ocm2_hdf.c	/^static char  dname[8][6]={"L_412","L_443","L_490","L_510",$/;"	v	file:
do_decomp	get_qaa.c	/^static int do_decomp = 1;$/;"	v	file:
do_st	l1a_seawifs.c	/^int32 do_st = 1;$/;"	v
dogeom	atrem_corl1.h	/^    int32_t dogeom;$/;"	m	struct:param_table
doy	aviris.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:aviris_struct
doy	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
doy	l1_oli.c	/^    int32_t year, doy, msec;$/;"	m	struct:oli_struct	file:
doy	olci.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:olci_struct
doy	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
dphi_ind	niwa_iop.c	/^static float th_s_ind[TH_NS], th_v_ind[TH_NS], dphi_ind[DPHI_NS];$/;"	v	file:
dphi_lev	niwa_iop.c	/^static float th_s_lev[TH_NS], th_v_lev[TH_NS], dphi_lev[DPHI_NS];$/;"	v	file:
dphi_lev	pml_iop_tables.c	/^float *th_s_lev, *th_v_lev, *dphi_lev;$/;"	v
dphi_n	niwa_iop.c	/^static int th_s_n, th_v_n, dphi_n;$/;"	v	file:
dphi_n	pml_iop_tables.c	/^int32_t th_s_n, th_v_n, dphi_n;$/;"	v
dpix	filehandle.h	/^    int32_t   dpix;                \/* pixel sub-sampling increment           *\/$/;"	m	struct:filehandle_struct
dpix	l1_czcs_hdf.c	/^int32   dpix;              \/* LAC pixel increment              *\/$/;"	v
dpix	l1_generic_write.c	/^static int32_t dpix;$/;"	v	file:
dpix	l1_hdf_generic_write.c	/^static int32 dpix;$/;"	v	file:
dpix	l1_struc.h	/^    int32_t   dpix;$/;"	m	struct:l1_struct
dpix	l1a_seawifs.c	/^int32   dpix;              \/* LAC pixel increment              *\/$/;"	v
dpixl	input_struc.h	/^  int32_t   dpixl;          \/* pixel subsampling increment              *\/$/;"	m	struct:input_struct
dpixl	mscal_struc.h	/^    int32_t   dpixl;            \/* pixel subsampling increment              *\/$/;"	m	struct:calinput_struct
dpmeps	atmcor_soa.f	/^      double precision function dpmeps(/;"	f
dpofa	atmcor_soa.f	/^      subroutine dpofa(/;"	s
dpol	l1_struc.h	/^    float  *dpol;$/;"	m	struct:l1_struct
dpol	l2_struc.h	/^    float  *dpol; \/\/ degree of polarization$/;"	m	struct:l2_struct
ds_id	l1_hico_h5.c	/^    h5io_str* ds_id;$/;"	m	struct:hico_private_struct	file:
dscal	atmcor_soa.f	/^      subroutine  dscal(/;"	s
dscan	l1_struc.h	/^    int32_t   dscan;$/;"	m	struct:l1_struct
dsqrarg	nrutil.h	/^static double dsqrarg;$/;"	v
dtau865	atmcor_soa.f	/^     &         dcc865(NMI,NMR,NLAMBDA) ,pdcc865(3,NMI,NMR,NLAMBDA),$/;"	v
dtran_a	aerosol.c	/^    float  **dtran_a;$/;"	m	struct:aermod_struct	file:
dtran_airmass	aerosol.c	/^    float  *dtran_airmass;$/;"	m	struct:aermodtab_struct	file:
dtran_b	aerosol.c	/^    float  **dtran_b;$/;"	m	struct:aermod_struct	file:
dtran_brdf	brdf.c	/^void dtran_brdf(l2str *l2rec,int32_t ip,float wave[],int32_t nwave,float Fo[],float nLw[],float chl,$/;"	f
dtran_ntheta	aerosol.c	/^    int32_t   dtran_ntheta;$/;"	m	struct:aermodtab_struct	file:
dtran_nwave	aerosol.c	/^    int32_t   dtran_nwave;$/;"	m	struct:aermodtab_struct	file:
dtran_theta	aerosol.c	/^    float  *dtran_theta;$/;"	m	struct:aermodtab_struct	file:
dtran_wave	aerosol.c	/^    float  *dtran_wave;$/;"	m	struct:aermodtab_struct	file:
dtrans	atmcor_soa.f	/^      REAL*8   dtrans(/;"	v
dtrans0	atmcor_soa.f	/^      REAL*8   dtrans(NLAMBDA),dtrans0(/;"	v
dtrsl	atmcor_soa.f	/^      subroutine dtrsl(/;"	s
dtype	l1_czcs_hdf.c	/^char            dtype[8];$/;"	v
dtype	l1a_osmi.c	/^static char    dtype[8];$/;"	v	file:
dtype	l1a_seawifs.c	/^char            dtype[8];$/;"	v
dumpProductStructure	get_l2prod_index.c	/^void dumpProductStructure(l2prodstr **list, char* filename) {$/;"	f
dvector	nrutil.c	/^double *dvector(long nl, long nh)$/;"	f
dvir	atmcor_soa.f	/^     &         dtau865(NMI,NMR)        ,pdTau865(3,NMI,NMR),$/;"	v
dw0nu	atmcor_soa.f	/^     &         dvir(NMI,NMR)           ,pdVir(3,NMI,NMR),$/;"	v
dxda	gsm.c	/^static double *dxda;$/;"	v	file:
dxdb	gsm.c	/^static double *dxdb;$/;"	v	file:
eDRam	raman.c	/^static float *eDRam;        \/\/Down-welling irradiance at Raman excitation bands$/;"	v	file:
eDSen	raman.c	/^static float *eDSen;        \/\/Down-welling irradiance at sensor bands$/;"	v	file:
e_init	pml_iop_tables.c	/^double lc1,lc2,log_lc1,e_init;$/;"	v
e_lat	anc_acq.c	/^  float e_lat;   \/* end latitude for a grid *\/$/;"	m	struct:met_sto_str_d	file:
e_lon	anc_acq.c	/^  float e_lon;   \/* end longitude for a grid *\/$/;"	m	struct:met_sto_str_d	file:
earth_sun_dist_corr	scene_meta.h	/^  float earth_sun_dist_corr;$/;"	m	struct:scene_meta_str
east	input_struc.h	/^  float   east;$/;"	m	struct:input_struct
east_lon	main_l1info.c	/^    float32 east_lon;$/;"	m	struct:__anon37	file:
eastbyscan	aviris.h	/^    int    interleave, eastbyscan;$/;"	m	struct:aviris_struct
eastbyscan	prism.h	/^    int    interleave, eastbyscan;$/;"	m	struct:prism_struct
eastern_lon	scene_meta.c	/^static float eastern_lon  = -180.0;$/;"	v	file:
eastern_lon	scene_meta.h	/^  float eastern_lon;$/;"	m	struct:scene_meta_str
easternmost	scene_meta.c	/^float32 easternmost( float32 lon1, float32 lon2 )$/;"	f
easting	aviris.h	/^    double easting,northing;$/;"	m	struct:aviris_struct
easting	prism.h	/^    double easting,northing;$/;"	m	struct:prism_struct
ecdf_	numerical.c	/^void ecdf_(float *xcdf, float *ycdf, int32_t *bin_number, float *xs, int32_t *sample_size)$/;"	f
eday	l1_czcs_hdf.c	/^int16   eyear, eday;       \/* data end date                    *\/$/;"	v
eday	l1a_osmi.c	/^static int16   eyear, eday;       \/* data end date                    *\/$/;"	v	file:
eday	l1a_seawifs.c	/^int16   eyear, eday;       \/* data end date                    *\/$/;"	v
edgelist	mipoly.h	/^     EdgeTableEntry *edgelist;  \/* header node              *\/$/;"	m	struct:_ScanLineList
edoy	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
egain	l1a_osmi.c	/^static float32			egain[8], temps[8], mirror[8];$/;"	v	file:
elev	aviris.h	/^    double *elev,lat0,lon0;$/;"	m	struct:aviris_struct
elev	l1_struc.h	/^    float  *elev;$/;"	m	struct:l1_struct
elev	l2_struc.h	/^    float *elev;$/;"	m	struct:l2_struct
elev	olci.h	/^    double *lat, *lon, *elev;$/;"	m	struct:olci_struct
elevGrid	get_nc_height.c	/^static grid_info_t* elevGrid = {0};$/;"	v	file:
elevNames	elev.c	/^static const char* elevNames[] = { "height", "z", "depth", NULL };$/;"	v	file:
elevNames	get_nc_height.c	/^static const char* elevNames[] =$/;"	v	file:
elev_aux_depthmode	elev.c	/^static int elev_aux_depthmode = -1;$/;"	v	file:
elev_aux_gridinfo	elev.c	/^static grid_info_t* elev_aux_gridinfo = {0};$/;"	v	file:
elev_auxfile	input_struc.h	/^  char   elev_auxfile[FILENAME_MAX];  \/* Auxiliary elevation file    *\/$/;"	m	struct:input_struct
elev_global_depthmode	elev.c	/^static int elev_global_depthmode = -1;$/;"	v	file:
elev_global_gridinfo	elev.c	/^static grid_info_t* elev_global_gridinfo = {0};$/;"	v	file:
elev_init	elev.c	/^void elev_init(char* elevGlobalFilename, char* elevAuxFilename) {$/;"	f
elev_initialized	elev.c	/^static int elev_initialized = 0;$/;"	v	file:
elevfile	input_struc.h	/^  char   elevfile[FILENAME_MAX]; \/* Elevation file                   *\/$/;"	m	struct:input_struct
eline	input_struc.h	/^  int32_t   eline;          \/* ending line no. of the input (1-rel)     *\/$/;"	m	struct:input_struct
eline	lonlat2pixline.h	/^        int32_t eline; \/**< end line *\/$/;"	m	struct:lonlat2pixline_struct
eline	mscal_struc.h	/^    int32_t   eline;            \/* ending line no. of the input (1-rel)     *\/$/;"	m	struct:calinput_struct
ems_all	aerosol.c	/^    float  *ems_all;$/;"	m	struct:aermod_struct	file:
emsec	l1_czcs_hdf.c	/^int32   emsec;             \/* data end time                    *\/$/;"	v
emsec	l1a_osmi.c	/^static int32   emsec;             \/* data end time                    *\/$/;"	v	file:
emsec	l1a_seawifs.c	/^int32   emsec;             \/* data end time                    *\/$/;"	v
emsec	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
enableFileDecending	l2binmatch_input.cpp	/^static int enableFileDecending = 1;$/;"	v	file:
enableFileDecending	msl12_input.c	/^static int enableFileDecending = 1;$/;"	v	file:
end2	atrem_corl1.h	/^    int32_t end2;$/;"	m	struct:param_table
endLat	get_nc_height.c	/^    double endLat;$/;"	m	struct:__anon25	file:
endLon	get_nc_height.c	/^    double endLon;$/;"	m	struct:__anon25	file:
end_1p14	atrem_corl1.h	/^    int32_t end_1p14;$/;"	m	struct:param_table
end_center_lat	scene_meta.h	/^  float end_center_lat;$/;"	m	struct:scene_meta_str
end_center_lon	scene_meta.h	/^  float end_center_lon;$/;"	m	struct:scene_meta_str
end_day	scene_meta.h	/^  int   end_day;$/;"	m	struct:scene_meta_str
end_msec	scene_meta.h	/^  int   end_msec;$/;"	m	struct:scene_meta_str
end_ndx	atrem_corl1.h	/^    int32_t end_ndx[4];   \/\/ied1,ied2,ied3,ied4$/;"	m	struct:param_table
end_node	scene_meta.c	/^static int   end_node     = UNKNOWNNODE;$/;"	v	file:
end_node	scene_meta.h	/^  char  end_node[32];$/;"	m	struct:scene_meta_str
end_p94	atrem_corl1.h	/^    int32_t end_p94;$/;"	m	struct:param_table
end_time	l1b_viirs_nc.c	/^    char end_time[25];$/;"	m	struct:__anon29	file:
end_time	scene_meta.h	/^  char  end_time[32];$/;"	m	struct:scene_meta_str
end_year	scene_meta.h	/^  int   end_year;$/;"	m	struct:scene_meta_str
enddm	l1_mos_hdf.c	/^static int32_t  enddm;$/;"	v	file:
endmo	l1_mos_hdf.c	/^static int32_t  endmo;$/;"	v	file:
endyr	l1_mos_hdf.c	/^static int32_t  endyr;$/;"	v	file:
entry	pml_iop_config.h	/^     char entry[MAX_ENTRY];$/;"	m	struct:tab_atom
entry_day	l1a_seawifs.c	/^int16           entry_day;$/;"	v
entry_year	l1a_seawifs.c	/^int16           entry_year;$/;"	v
eoffset	l1a_osmi.c	/^static float32			eoffset;$/;"	v	file:
epix	filehandle.h	/^    int32_t   epix;                \/* end pixel (0-based)                    *\/$/;"	m	struct:filehandle_struct
epix	l1_czcs_hdf.c	/^int32   epix;$/;"	v
epix	l1_generic_write.c	/^static int32_t epix;$/;"	v	file:
epix	l1_hdf_generic_write.c	/^static int32 epix;$/;"	v	file:
epix	l1_struc.h	/^    int32_t   epix;$/;"	m	struct:l1_struct
epix	l2_generic.c	/^static int32 epix;$/;"	v	file:
epixl	input_struc.h	/^  int32_t   epixl;          \/* ending pixel no. of the input (1-rel)    *\/$/;"	m	struct:input_struct
epixl	lonlat2pixline.h	/^        int32_t epixl; \/**< end pixel *\/$/;"	m	struct:lonlat2pixline_struct
epixl	mscal_struc.h	/^    int32_t   epixl;            \/* ending pixel no. of the input (1-rel)    *\/$/;"	m	struct:calinput_struct
eps	aerosol.c	/^    float  eps;$/;"	m	struct:rhoaT_struct	file:
eps	l2_struc.h	/^    float  *eps; \/\/ NIR aerosol reflectance ratio (single scattering)$/;"	m	struct:l2_struct
eps_a_init	pml_iop_tables.c	/^float b_tilde_w, b_tilde_p, init_chl, eps_a_init, eps_a_init_modis, eps_bb_init;$/;"	v
eps_a_init_modis	pml_iop_tables.c	/^float b_tilde_w, b_tilde_p, init_chl, eps_a_init, eps_a_init_modis, eps_bb_init;$/;"	v
eps_bb_init	pml_iop_tables.c	/^float b_tilde_w, b_tilde_p, init_chl, eps_a_init, eps_a_init_modis, eps_bb_init;$/;"	v
eps_obs	aerosol.c	/^    float  eps_obs;$/;"	m	struct:epsilonT_struct	file:
eps_p_412_443	pml_iop_tables.c	/^float eps_y_412_443, eps_p_412_443; $/;"	v
eps_y_412_443	pml_iop_tables.c	/^float eps_y_412_443, eps_p_412_443; $/;"	v
epsilonT_struct	aerosol.c	/^typedef struct epsilonT_struct {$/;"	s	file:
epsilonTstr	aerosol.c	/^} epsilonTstr;$/;"	t	typeref:struct:epsilonT_struct	file:
epsmax	input_struc.h	/^  float  epsmax;                 \/* max epsilon for atm corr failure *\/$/;"	m	struct:input_struct
epsmin	input_struc.h	/^  float  epsmin;                 \/* min epsilon for atm corr failure *\/$/;"	m	struct:input_struct
equatorialEast	sst.c	/^static float equatorialEast = 105.0;$/;"	v	file:
equatorialNorth	sst.c	/^static float equatorialNorth = 30.0;$/;"	v	file:
equatorialSouth	sst.c	/^static float equatorialSouth = -10.0;$/;"	v	file:
equatorialWest	sst.c	/^static float equatorialWest = -105.0;$/;"	v	file:
errclb	atmcor_soa.f	/^      subroutine errclb(/;"	s
error_struc	owt.c	/^typedef struct error_struc {$/;"	s	file:
errstr	owt.c	/^} errstr;$/;"	t	typeref:struct:error_struc	file:
es_coef	met_cvt.h	/^static double es_coef[] = { 6.107799961, 4.436518521e-1, 1.428945805e-2, $/;"	v
escan	l1_struc.h	/^    int32_t   escan;$/;"	m	struct:l1_struct
esdistId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
estimate_evd_parameters	numerical.c	/^void estimate_evd_parameters(int *used_sample_size, float *xi, float *theta, float *normalised_energies, int sample_size)$/;"	f
eta_func	las_iop.c	/^float eta_func(float bbw, float bb)$/;"	f
etgetrsp	etbpsub.f	/^        subroutine etgetrsp(/;"	s
etgetvis	etbpsub.f	/^        subroutine etgetvis(/;"	s
etintegrate	etbpsub.f	/^        function etintegrate(/;"	f
etinvert	etbpsub.f	/^        function etinvert(/;"	f
etloadresp	etbpsub.f	/^        subroutine etloadresp(/;"	s
evalmask	aerosol.c	/^static int32_t  evalmask = 0;$/;"	v	file:
evalmask	get_pml.c	/^static int32_t evalmask = 0;$/;"	v	file:
evalmask	input_struc.h	/^  int32_t   evalmask;$/;"	m	struct:input_struct
evalmask	l1_generic_write.c	/^static int32_t evalmask;$/;"	v	file:
evalmask	l1_hdf_generic_write.c	/^static int32_t  evalmask;$/;"	v	file:
evalmask	l1a_seawifs.c	/^static int evalmask;$/;"	v	file:
evalmask	sst.c	/^static int32 evalmask = 0;$/;"	v	file:
extc	aerosol.c	/^    float  *extc;$/;"	m	struct:aermod_struct	file:
extr_line_offset	l1_octs_hdf.c	/^static int16 extr_line_offset = 0;$/;"	v	file:
extract_band	prodgen.c	/^VOIDP extract_band(float *fbuf, l2prodstr *p, int32 nbands)$/;"	f
extract_pixel_start	l1_viirs_nc.c	/^static int extract_pixel_start = 0;$/;"	v	file:
extract_pixel_start	l1b_viirs_nc.c	/^static int extract_pixel_start = 0;$/;"	v	file:
extract_pixel_stop	l1_viirs_nc.c	/^static int extract_pixel_stop = 0;$/;"	v	file:
extract_pixel_stop	l1b_viirs_nc.c	/^static int extract_pixel_stop = 0;$/;"	v	file:
eyear	l1_czcs_hdf.c	/^int16   eyear, eday;       \/* data end date                    *\/$/;"	v
eyear	l1a_osmi.c	/^static int16   eyear, eday;       \/* data end date                    *\/$/;"	v	file:
eyear	l1a_seawifs.c	/^int16   eyear, eday;       \/* data end date                    *\/$/;"	v
eyear	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
f	filter.h	/^    filstr f[FILTMAX];$/;"	m	struct:filter_ctl_struct
f	l1_czcs_hdf.c	731;"	d	file:
f0BarRam	raman.c	/^static float *f0BarRam; \/\/TOA solar irradiance at Raman bands$/;"	v	file:
f0BarSen	raman.c	/^static float *f0BarSen; \/\/TOA solar irradiance at sensor bands$/;"	v	file:
f0brMeris	raman.c	/^static float f0brMeris[9] = {107.272, 102.888, 174.964, 167.773, 204.263, 186.843, 185.811, 185.521, 179.539};  $/;"	v	file:
f0brModisa	raman.c	/^static float f0brModisa[10] = {107.318, 102.888, 170.342, 175.285, 203.309, 207.043, 204.949, 184.267, 185.922, 185.47};    $/;"	v	file:
f0brModist	raman.c	/^static float f0brModist[10] = {171.716, 188.796, 204.973, 192.335, 185.707, 186.916, 183.56, 158.372, 152.375, 148.144};    $/;"	v	file:
f0brOcts	raman.c	/^static float f0brOcts[6] = {110.313, 109.718, 170.933, 181.045, 204.121, 185.308};$/;"	v	file:
f0brSeawifs	raman.c	/^static float f0brSeawifs[6] = {108.913, 107.771, 172.85, 169.261, 204.949, 185.948};$/;"	v	file:
f0brViirs	raman.c	/^static float f0brViirs[5] = {107.166, 106.07, 173.488, 205.533, 185.903};  $/;"	v	file:
f0bsMeris	raman.c	/^static float f0bsMeris[9] = {171.672, 189.489, 192.221, 192.966, 179.844, 164.973, 153.142, 148.945, 140.256};$/;"	v	file:
f0bsModisa	raman.c	/^static float f0bsModisa[10] = {171.716, 188.796, 204.973, 192.335, 185.707, 186.916, 183.56, 158.372, 152.375, 148.144};$/;"	v	file:
f0bsModist	raman.c	/^static float f0bsModist[10] = {171.716, 188.796, 204.973, 192.335, 185.707, 186.916, 183.56, 158.372, 152.375, 148.144};$/;"	v	file:
f0bsOcts	raman.c	/^static float f0bsOcts[6] = {173.557, 189.583, 197.185, 185.265, 179.438, 151.9};$/;"	v	file:
f0bsSeawifs	raman.c	/^static float f0bsSeawifs[6] = {173.557, 189.583, 197.185, 187.456, 183.56, 151.17};$/;"	v	file:
f0bsViirs	raman.c	/^static float f0bsViirs[5] = {173.966, 189.844, 199.859, 184.927, 150.803};$/;"	v	file:
f3tensor	nrutil.c	/^float ***f3tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh)$/;"	f
fBTdetavg	filter.c	/^void fBTdetavg(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t id, char kernel[],$/;"	f
fEPSiqmean	filter.c	/^void fEPSiqmean(l1qstr *l1que, int32_t nx, int32_t ny, int ib1, int32_t minfill, char kernel[],$/;"	f
fEPSmean	filter.c	/^void fEPSmean(l1qstr *l1que, int32_t nx, int32_t ny, int ib1, int32_t minfill, char kernel[],$/;"	f
fLTRiqmean	filter.c	/^void fLTRiqmean(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t minfill, char kernel[],$/;"	f
fLTRmean	filter.c	/^void fLTRmean(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t minfill, char kernel[],$/;"	f
fLTRmed	filter.c	/^void fLTRmed(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t minfill, char kernel[],$/;"	f
fLTRreject	filter.c	/^void fLTRreject(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t minfill, char kernel[],$/;"	f
fLTmean	filter.c	/^void fLTmean(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t minfill, char kernel[],$/;"	f
fLTmed	filter.c	/^void fLTmed(l1qstr *l1que, int32_t nx, int32_t ny, int ib, int32_t minfill, char kernel[],$/;"	f
f_ab	niwa_iop.c	/^static float f_ab(float a, float b, int band, int sensor_id)$/;"	f	file:
f_ab	pml_iop_tables.c	/^double f_ab(double a,double b,int band)$/;"	f
f_abx	niwa_iop.c	/^static float f_abx(float a, float b, int band)$/;"	f	file:
f_cal_corr	l1_viirs_h5.c	/^static double f_cal_corr[MAXBANDS * NDET * N_MS]; \/* f table correction *\/$/;"	v	file:
f_cal_corr	l1_viirs_nc.c	/^static double ***f_cal_corr = NULL; \/* f table correction [band][det][ms] *\/$/;"	v	file:
f_cal_corr	l1b_viirs_nc.c	/^static double ***f_cal_corr = NULL; \/* f table correction [band][det][ms] *\/$/;"	v	file:
fabs	misc.h	93;"	d
fac	atmocor1_land.c	113;"	d	file:
fclean	filter.c	/^void fclean(l1qstr *l1que, int32_t nx, int32_t ny, int flag, char kernel[], l1str *l1rec)$/;"	f
fcomplex	nr.h	/^typedef struct FCOMPLEX {float r,i;} fcomplex;$/;"	t	typeref:struct:FCOMPLEX
fctl	input_struc.h	/^  fctlstr fctl;$/;"	m	struct:input_struct
fctl_init	filter.c	/^void fctl_init( fctlstr *fctl)$/;"	f
fctl_set	filter.c	/^int fctl_set( fctlstr *fctl, int32_t npix, char *fname, $/;"	f
fctlstr	filter.h	/^} fctlstr;$/;"	t	typeref:struct:filter_ctl_struct
fdilate	filter.c	/^void fdilate(l1qstr *l1que, int32_t nx, int32_t ny, int flag, char kernel[], l1str *l1rec)$/;"	f
fid	bin_climatology.c	/^static int32 fid;$/;"	v	file:
fil_space_id	h5io.h	/^   hid_t fil_space_id;  \/* descriptors for slab I\/O - these are only set*\/$/;"	m	struct:h5io_str_d
file	l1_hmodis_hdf.c	/^    char file[FILENAME_MAX];      \/*< file path *\/$/;"	m	struct:__anon31	file:
file	l1b_viirs_nc.c	/^    char file[FILENAME_MAX];      \/*< file path *\/$/;"	m	struct:__anon29	file:
file	read_l3bin.h	/^    char      *file;$/;"	m	struct:l3bin_struct
fileID	l1_hico_h5.c	/^    h5io_str* fileID;$/;"	m	struct:hico_private_struct	file:
fileID	l1_meris_N1.c	/^static EPR_SProductId *fileID = NULL;$/;"	v	file:
fileID	l1_ocmdb_hdf.c	/^static int32 fileID;$/;"	v	file:
fileID	main_l1det2det.c	/^int16_t fileID = 0;$/;"	v
fileID	main_vcalmerge.c	/^int16_t fileID = 0;$/;"	v
fileID	mscal_struc.h	/^    int16  *fileID;$/;"	m	struct:mscal_struct
fileInfo	l2_struc.h	/^    filehandle *fileInfo;$/;"	m	struct:l2_struct
file_1km	l1_hmodis_hdf.c	/^static modis_file file_geo, file_1km, file_hkm, file_qkm;$/;"	v	file:
file_geo	l1_hmodis_hdf.c	/^static modis_file file_geo, file_1km, file_hkm, file_qkm;$/;"	v	file:
file_hkm	l1_hmodis_hdf.c	/^static modis_file file_geo, file_1km, file_hkm, file_qkm;$/;"	v	file:
file_id	h5io.h	/^   hid_t file_id;  \/* set with type H5IO_TYP_FILE_ID *\/$/;"	m	struct:h5io_str_d
file_npix	l1_meris_N1.c	/^static int file_npix;$/;"	v	file:
file_qkm	l1_hmodis_hdf.c	/^static modis_file file_geo, file_1km, file_hkm, file_qkm;$/;"	v	file:
filehandle	filehandle.h	/^} filehandle;$/;"	t	typeref:struct:filehandle_struct
filehandle_init	filehandle_init.c	/^void filehandle_init(filehandle *file)$/;"	f
filehandle_struct	filehandle.h	/^typedef struct filehandle_struct {$/;"	s
filehdr	filehdr_struc.h	/^} filehdr;$/;"	t	typeref:struct:filehdr_struct
filehdr_struct	filehdr_struc.h	/^typedef struct filehdr_struct {$/;"	s
filename	atrem_corl1.h	/^    char filename[FILENAME_MAX];$/;"	m	struct:__anon3
filenames	mscal_struc.h	/^    stname *filenames;$/;"	m	struct:mscal_struct
fill	get_smoke.c	/^static float fill =  0.0;$/;"	v	file:
fill_dead_detectors	l1_hmodis_hdf.c	/^void fill_dead_detectors(const int32_t iband, const modis_sds mds, double *data) {$/;"	f
fill_table	l1_hmodis_hdf.c	/^} fill_table;$/;"	t	typeref:struct:__anon36	file:
filstr	filter.h	/^} filstr;$/;"	t	typeref:struct:filter_struct
filter	filter.c	/^void filter(fctlstr *fctl, l1qstr *l1que, l1str *l1rec, int32_t dscan)$/;"	f
filter	l1_struc.h	/^    char   *filter;$/;"	m	struct:l1_struct
filter_ctl_struct	filter.h	/^typedef struct filter_ctl_struct {$/;"	s
filter_file	input_struc.h	/^  char   filter_file [FILENAME_MAX];    \/* filter specification file *\/$/;"	m	struct:input_struct
filter_names	filter.h	/^static const char *filter_names[] = {"",$/;"	v
filter_opt	input_struc.h	/^  int32_t   filter_opt;     \/* 1=apply filtering in filter_file         *\/$/;"	m	struct:input_struct
filter_struct	filter.h	/^typedef struct filter_struct {$/;"	s
finst2	atrem_corl1.h	/^    float *finst2; \/\/ some kind of smoothing factor calculated in INIT_SPECCAL only used for AVIRIS?$/;"	m	struct:param_table
finst2	atrem_corl1.h	/^    float finst2[FINSTMAX];$/;"	m	struct:__anon15
fint	pml_iop_tables.c	/^double fint(double a,double b,int band)$/;"	f
fintexp1	get_rhos.c	/^double fintexp1(float xtau)$/;"	f
fintexp3	get_rhos.c	/^double fintexp3(float xtau)$/;"	f
first	scene_meta.c	/^static int   first        = 1;$/;"	v	file:
first_deriv	aerosol.c	/^float first_deriv(float x[],float y[], int n)$/;"	f
fit_data_str	giop.c	/^typedef struct fit_data_str {$/;"	s	file:
fit_giop_amb	giop.c	/^int fit_giop_amb(giopstr *g, double Rrs[], double wts[], double par[], $/;"	f
fit_giop_lm	giop.c	/^int fit_giop_lm(giopstr *g,double Rrs[],double wts[],double par[],double *chi, int16 *itercnt )$/;"	f
fit_giop_svd	giop.c	/^int fit_giop_svd(giopstr *g, double rrs[], double wts[], double par[])$/;"	f
fit_giop_svd_siop	giop.c	/^int fit_giop_svd_siop(giopstr *g, double rrs[], double wts[], double par[],double *chi)$/;"	f
fit_gsm_amb	gsm.c	/^int fit_gsm_amb(double Rrs[], double wts[], int32_t npts, double fitparms[], $/;"	f
fit_las_eta_amb	las_iop.c	/^float fit_las_eta_amb(float *bbp)$/;"	f
fit_opt	giop.h	/^  int fit_opt;         \/* optimization routine *\/$/;"	m	struct:giop_ctl_str
fit_par	giop.c	/^static float  **fit_par;$/;"	v	file:
fit_raman_taua	raman.c	/^void fit_raman_taua(l2str *l2rec, int ip){$/;"	f
fitfunc	amoeba.h	/^  double *fitfunc;$/;"	m	struct:__anon1
fitstr	giop.c	/^} fitstr;$/;"	t	typeref:struct:fit_data_str	file:
fixModisResolution	lonlat2pixline.c	/^static void fixModisResolution(lonlat2pixline_t *params) {$/;"	f	file:
fixedaer	aerosol.c	/^int fixedaer(int32_t sensorID, int32_t modnum, float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l, $/;"	f
fixedaot	aerosol.c	/^int fixedaot(int32_t sensorID, float aot[], float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l, $/;"	f
fixedmodpair	aerosol.c	/^int fixedmodpair($/;"	f
flag_bowtie_deleted	l1b_viirs_nc.c	/^void flag_bowtie_deleted(l1str *l1rec,size_t ipix, int extract_offset){$/;"	f
flag_cnt	filehandle.h	/^    int32_t   flag_cnt[NFLAGS];$/;"	m	struct:filehandle_struct
flag_shallow	swim.c	/^void flag_shallow(l2str *l2rec, double *rrsSub, double *rrsAbove) {$/;"	f
flagindex	l1_hmodis_hdf.c	/^    int16_t flagindex;  \/*< starting index within "all-detector" arrays *\/$/;"	m	struct:__anon33	file:
flagm	carder.c	/^static int16  *flagm;$/;"	v	file:
flags	get_qaa.c	/^static unsigned char *flags; \/* per-pixel flags                         *\/$/;"	v	file:
flags	l1_struc.h	/^    int32_t   *flags;$/;"	m	struct:l1_struct
flags	l2_struc.h	/^    int32_t   *flags;$/;"	m	struct:l2_struct
flags_habs	get_habs.c	/^static unsigned char *flags_habs = NULL;$/;"	v	file:
flags_sst	sst.c	/^static int16 *flags_sst = NULL;$/;"	v	file:
flags_sst3	sst.c	/^static int16 *flags_sst3 = NULL;$/;"	v	file:
flags_sst4	sst.c	/^static int16 *flags_sst4 = NULL;$/;"	v	file:
flaguse	input_struc.h	/^  char    flaguse[1024];$/;"	m	struct:input_struct
flaguse	mscal_struc.h	/^    char   flaguse  [1024];$/;"	m	struct:calinput_struct
flh_modis	fluorescence.c	/^void flh_modis(l2str *l2rec, float flh[]) {$/;"	f
flh_offset	input_struc.h	/^  float   flh_offset;$/;"	m	struct:input_struct
flhmin	fluorescence.c	/^static float flhmin = 0.0;$/;"	v	file:
flt_rad	l1_viirs_h5.c	/^static float *flt_rad; \/* for float radiance read from file *\/$/;"	v	file:
fmid	carder.c	/^static double aphb1,aphb2,aphb3,aphb4,fmid;$/;"	v	file:
fmt_codes	filehandle.h	/^enum fmt_codes {$/;"	g
fnode	filter.c	/^} fnode;$/;"	t	typeref:struct:fnode_str	file:
fnode_str	filter.c	/^typedef struct fnode_str {$/;"	s	file:
foq	giop.c	/^static float  *foq;$/;"	v	file:
foq	giop.h	/^  float *foq ;         \/* RRSFOQ variable  [NBANDS]    *\/$/;"	m	struct:giop_ctl_str
foq_morel	brdf.c	/^void foq_morel(int foqopt, l2str *l2rec,float wave[],int32_t nwave,float chl,$/;"	f
foqint_morel	brdf.c	/^void foqint_morel(char *file, float wave[],int32_t nwave,float solz,float senzp,$/;"	f
format	filehandle.h	/^    int32_t   format;$/;"	m	struct:filehandle_struct
format	filehdr_struc.h	/^    int32_t   format;$/;"	m	struct:filehdr_struct
format	input_struc.h	/^  int32_t   format;$/;"	m	struct:input_struct
format	l1_hdf_generic_read.c	/^static int32 format  = 0;$/;"	v	file:
format	l1_hdf_generic_write.c	/^static int32 format;$/;"	v	file:
format	sssref.c	/^static int32_t  format = -1;$/;"	v	file:
format	sstref.c	/^static int32_t  format = -1;$/;"	v	file:
formk	atmcor_soa.f	/^      subroutine formk(/;"	s
formt	atmcor_soa.f	/^      subroutine formt(/;"	s
fp	aer_io.c	/^static FILE *fp = NULL;$/;"	v	file:
fp	target_io.c	/^static FILE *fp = NULL;$/;"	v	file:
fp_meta	l2_generic.c	/^static FILE *fp_meta = NULL;$/;"	v	file:
fp_tcorr	l1a_seawifs.c	/^float64         fp_tcorr[BANDS_DIMS_1A];$/;"	v
fp_temps	l1a_seawifs.c	/^float32         fp_temps[256][BANDS_DIMS_1A];$/;"	v
fp_tref	l1a_seawifs.c	/^float64         fp_tref[BANDS_DIMS_1A];$/;"	v
fqfile	input_struc.h	/^  char      fqfile  [FILENAME_MAX];$/;"	m	struct:input_struct
fqy_modis	fluorescence.c	/^void fqy_modis(l2str *l2rec, float fqy[]) {$/;"	f
fqymax	fluorescence.c	/^static float fqymax = 0.3;$/;"	v	file:
fqymin	fluorescence.c	/^static float fqymin = 0.0;$/;"	v	file:
franzaer	aerosol.c	/^int franzaer(int32_t sensorID, float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l,$/;"	f
freeArray	giop.c	/^void freeArray(void **a, int32_t m) {$/;"	f
freeArrayd	freearray.h	/^void freeArrayd(double **a, int32_t m) {$/;"	f
freeArrayf	freearray.h	/^void freeArrayf(float **a, int32_t m) {$/;"	f
freeDArray	giop.c	/^void freeDArray(double **a, int32_t m) {$/;"	f
freeKDtree	KDtree.c	/^void freeKDtree( KDtree *Tree )$/;"	f
freePrivateData	l1_hico_h5.c	/^static void freePrivateData(hico_private_t* pData) {$/;"	f	file:
freePrivateData	l1_oli.c	/^void freePrivateData(oli_t* data) {$/;"	f
freePrivateData_av	l1_aviris.c	/^void freePrivateData_av(aviris_t* data) {$/;"	f
freePrivateData_pr	l1_prism.c	/^void freePrivateData_pr(prism_t* data) {$/;"	f
free_aermodstr	aerosol.c	/^static void free_aermodstr( aermodstr *model )$/;"	f	file:
free_aermodtabstr	aerosol.c	/^static void free_aermodtabstr( aermodtabstr *aertab )$/;"	f	file:
free_calrec	calfile_utils.c	/^void free_calrec(calstr *calrec, int nbands, int nprods) {$/;"	f
free_calstr	mscal_struc.c	/^void free_calstr(mscalstr calstr, int all)$/;"	f
free_convert_matrix	nrutil.c	/^void free_convert_matrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(unsigned char *v, long nl, long nh)$/;"	f
free_deminfo	get_nc_height.c	/^void free_deminfo() {$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(double **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(double *v, long nl, long nh)$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(float ***t, long nrl, long nrh, long ncl, long nch,$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(int **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(int *v, long nl, long nh)$/;"	f
free_l1	alloc_l1.c	/^void free_l1( l1str *l1rec )$/;"	f
free_l1q	getl1rec.c	/^void free_l1q()$/;"	f
free_l2	alloc_l2.c	/^void free_l2( l2str *l2rec )$/;"	f
free_lvector	nrutil.c	/^void free_lvector(unsigned long *v, long nl, long nh)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(float **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_prodptr	calfile_utils.c	/^void free_prodptr(l2prodstr **p) {$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_vector	nrutil.c	/^void free_vector(float *v, long nl, long nh)$/;"	f
freev	atmcor_soa.f	/^      subroutine freev(/;"	s
fresnel	fresnel.c	/^float fresnel(float theta,float rel_index)$/;"	f
fresnel_coef	aerosol.c	/^float fresnel_coef(float mu, float index)$/;"	f
fresnel_sen	brdf.c	/^float fresnel_sen(float senz, int return_tf)$/;"	f
fresnel_sol	brdf.c	/^void fresnel_sol(float wave[],int32_t nwave,float solz,float ws,float brdf[],int return_tf)$/;"	f
fresref	dtran_brdf.f	/^        function fresref(/;"	f
fsat_modis	fluorescence.c	/^void fsat_modis(l2str *l2rec, float flh[]) {$/;"	f
fsol	l1_struc.h	/^    double fsol;$/;"	m	struct:l1_struct
fsol	l2_struc.h	/^    double fsol; \/\/ Earth-Sun distance correction factor$/;"	m	struct:l2_struct
fstlight	filter.c	/^void fstlight(l1qstr *l1que, int32_t nx, int32_t ny, int32_t dscan, int flag, char kernel[], l1str *l1rec)$/;"	f
ftrim_	ftrim.c	/^int ftrim_(str, len)$/;"	f
full_calc	atrem_corl1.h	/^    int32_t nobs,full_calc;$/;"	m	struct:__anon6
fullscanpix	sst.c	/^static int fullscanpix = 1354; \/\/ intialize to modis, will get set in init_sst for others$/;"	v	file:
func	filter.h	/^    int32_t   func;$/;"	m	struct:filter_struct
funct_oxygen_aer	atmcor_soa.f	/^        function funct_oxygen_aer(/;"	f
funct_oxygen_ray	atmcor_soa.f	/^        function funct_oxygen_ray(/;"	f
fuzzy_func_v3	fuzzy_func_v3.c	/^void fuzzy_func_v3 (float *rrs, float **urrs,float ***y3inv, int nclasses, int nowts, int df, double *outdata)$/;"	f
fwave	get_qaa.c	/^static float *fwave;         \/* wavelength (nm)                         *\/$/;"	v	file:
fwave	l1_struc.h	/^    float       *fwave ;$/;"	m	struct:l1_struct
fwave	l2_struc.h	/^    float  *fwave;$/;"	m	struct:l2_struct
fwhm	atrem_corl1.h	/^    float wavobs[NBANDS],fwhm[NBANDS];$/;"	m	struct:__anon5
fwhm	aviris.h	/^    double *wave,*fwhm;$/;"	m	struct:aviris_struct
fwhm	l1_hico_h5.c	/^    float *fwhm;$/;"	m	struct:hico_private_struct	file:
fwhm	olci.h	/^    double *wave,*fwhm;$/;"	m	struct:olci_struct
fwhm	prism.h	/^    double *wave,*fwhm;$/;"	m	struct:prism_struct
g	giop.c	/^    giopstr *g;$/;"	m	struct:fit_data_str	file:
g1	get_rhown_nir.c	/^static const float g1  = 0.0949;$/;"	v	file:
g2	get_rhown_nir.c	/^static const float g2  = 0.0794;$/;"	v	file:
g_other	atrem_corl1.h	/^    float g_vap[MODELMAX],g_other[MODELMAX],g_vap_equiv;$/;"	m	struct:__anon18
g_vap	atrem_corl1.h	/^    float g_vap[MODELMAX],g_other[MODELMAX],g_vap_equiv;$/;"	m	struct:__anon18
g_vap_equiv	atrem_corl1.h	/^    double g_vap_equiv; \/\/ This depends on zenith angle and lat\/lon of measurement$/;"	m	struct:param_table
g_vap_equiv	atrem_corl1.h	/^    float g_vap[MODELMAX],g_other[MODELMAX],g_vap_equiv;$/;"	m	struct:__anon18
ga0	carder.c	/^static double ga0[6], ga3[6];          \/* aph model prms global              *\/$/;"	v	file:
ga3	carder.c	/^static double ga0[6], ga3[6];          \/* aph model prms global              *\/$/;"	v	file:
gain	aviris.h	/^    double *gain;$/;"	m	struct:aviris_struct
gain	input_struc.h	/^  float  *gain    ;       \/* Vicarious calibration gain       *\/$/;"	m	struct:input_struct
gain	l1_czcs_hdf.c	/^int16 *gain;$/;"	v
gain	l1_octs_hdf.c	/^static int16 *gain;$/;"	v	file:
gain	l1a_seawifs.c	/^  int16   gain[8];$/;"	m	struct:__anon27	file:
gain	olci.h	/^    double *gain;$/;"	m	struct:olci_struct
gain	prism.h	/^    double *gain;$/;"	m	struct:prism_struct
gain_unc	input_struc.h	/^  float  *gain_unc;       \/* Vicarious gain uncertainty       *\/$/;"	m	struct:input_struct
gammln	gammln.c	/^float gammln(float xx)$/;"	f
gas_opt	input_struc.h	/^  int32_t   gas_opt;        \/* 1=ozone, 2=co2, 4=no2, 8=h2o             *\/$/;"	m	struct:input_struct
gaseous_transmittance	gas_trans.c	/^void gaseous_transmittance(int gasmask, int32_t sensorID, int32_t evalmask, int32_t nwave, float mu0, float mu, $/;"	f
gc0	carder.c	/^static double gc0, gc1, gc2, gc3;      \/* coefs for 490:555 chl alg global   *\/$/;"	v	file:
gc1	carder.c	/^static double gc0, gc1, gc2, gc3;      \/* coefs for 490:555 chl alg global   *\/$/;"	v	file:
gc2	carder.c	/^static double gc0, gc1, gc2, gc3;      \/* coefs for 490:555 chl alg global   *\/$/;"	v	file:
gc3	carder.c	/^static double gc0, gc1, gc2, gc3;      \/* coefs for 490:555 chl alg global   *\/$/;"	v	file:
gcf	gcf.c	/^void gcf(float *gammcf, float a, float x, float *gln)$/;"	f
genBuf	l12_seawifs.c	/^static unsigned char genBuf[8192];$/;"	v	file:
gen_sdr_suite	l1_viirs_h5.c	/^int gen_sdr_suite(char *in_file)$/;"	f
geo	l1_hmodis_hdf.c	/^static modis_sds ref[REF_NUM_SDS], geo[GEO_NUM_SDS], l1b[L1B_NUM_SDS];$/;"	v	file:
geo	l1b_viirs_nc.c	/^static var_str_nc *geo[NVARS_GEO];$/;"	v	file:
geo2iop	pml_iop_tables.c	/^float geo2iop(float *levels,float *iopv[MAX_BANDS],int band,float value,int size){$/;"	f
geoCoordinatesFile	olci.h	/^    char  *geoCoordinatesFile,*tieGeoCoordinatesFile, *tieGeometriesFile,*instrumentFile, *time_coordinatesFile, *tieMeteoFile;$/;"	m	struct:olci_struct
geoFileID	l1_olci.c	/^static int32_t olci_sd[MAXOLCI_RADFILES],geoFileID,coordFileID,tcoordFileID,instrumentFileID;$/;"	v	file:
geoFileId	l1_viirs_nc.c	/^static int geoFileId;$/;"	v	file:
geoGeolocationGrp	l1_viirs_nc.c	/^static int geoGeolocationGrp;$/;"	v	file:
geoNavigationGrp	l1_viirs_nc.c	/^static int geoNavigationGrp;$/;"	v	file:
geoScanLineGrp	l1_viirs_nc.c	/^static int geoScanLineGrp;$/;"	v	file:
geo_coeff	l1_hmodis_hdf.c	/^static const char* geo_coeff[] = { \/* index with enum GEO_COEFFS *\/$/;"	v	file:
geo_dat_id	l1_hico_h5.c	/^    h5io_str* geo_dat_id[NUM_GEO_DATA];$/;"	m	struct:hico_private_struct	file:
geo_dat_id	l1_viirs_h5.c	/^static h5io_str geo_dat_id[7], bnd_dat_id[2][MAXBANDS];$/;"	v	file:
geo_fid	l1_viirs_h5.c	/^static h5io_str geo_fid, sdr_fid[MAXBANDS];$/;"	v	file:
geo_filename	lonlat2pixline.h	/^        char geo_filename[FILENAME_MAX]; \/**< MODIS GEO file *\/$/;"	m	struct:lonlat2pixline_struct
geo_name	l1_hico_h5.c	/^static char *geo_name[] = { "latitudes", "longitudes", "sensor_azimuth",$/;"	v	file:
geo_var	l1b_viirs_nc.c	/^enum geo_var {$/;"	g	file:
geofile	filehandle.h	/^    char      *geofile;$/;"	m	struct:filehandle_struct
geofile	input_struc.h	/^  char      geofile [FILENAME_MAX];$/;"	m	struct:input_struct
getAlgorithmName	get_l2prod_index.c	/^void getAlgorithmName(char* name, l2prodstr* product) {$/;"	f
getAttr	swim.c	/^double getAttr(int varid, char* attrName) {$/;"	f
getBottomReflectance	swim.c	/^void getBottomReflectance(float lat, float lon) {$/;"	f
getDataType	get_l2prod_index.c	/^void getDataType(char* name, l2prodstr* product) {$/;"	f
getDefaultBenthicR	swim.c	/^void getDefaultBenthicR() {$/;"	f
getDimensionIds	swim.c	/^void getDimensionIds(int varid, int* dimIds) {$/;"	f
getDimensionLength	swim.c	/^size_t getDimensionLength(int dimId) {$/;"	f
getFormat	getformat.c	/^int32_t getFormat(filehandle *file) {$/;"	f
getFullProductName	get_l2prod_index.c	/^void getFullProductName(char* name, l2prodstr* prod) {$/;"	f
getModelNum	get_atrem_corl1.c	/^int getModelNum(float lat, int32_t day) {$/;"	f
getParamType	get_l2prod_index.c	/^void getParamType(char* name, l2prodstr* product) {$/;"	f
getPosVec	jplaeriallib.c	/^void getPosVec(float lat,float lon, float alt, double *pos) {$/;"	f
getPrefix	get_l2prod_index.c	/^void getPrefix(char* name, l2prodstr* product) {$/;"	f
getProductName	get_l2prod_index.c	/^void getProductName(char* name, l2prodstr* product) {$/;"	f
getSuffix	get_l2prod_index.c	/^void getSuffix(char* name, l2prodstr* product) {$/;"	f
getValidAngle	jplaeriallib.c	/^double getValidAngle(double *ang, int32_t npix, int32_t skip) {$/;"	f
getVarId	swim.c	/^int getVarId(char* name) {$/;"	f
get_Kd	get_Kd.c	/^void get_Kd(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_Lt_noise	loadl1.c	/^float get_Lt_noise(float lt, int32_t iw,int32_t sensorID,float snr_fac){$/;"	f
get_R0_Kd	las_iop.c	/^void get_R0_Kd(float rat, float Rrs, float wave, float solz, float *R0, float *Kd)$/;"	f
get_amsre	sstref.c	/^float get_amsre(char *sstfile, float lon, float lat, float solz, int32_t xsatid, int32_t sensorID)$/;"	f
get_angle_limits	get_atrem_corl1.c	/^int get_angle_limits(float **anglelimit, float **insenz, float **insolz, int *n_senz, int *n_solz) {$/;"	f
get_angstrom	aerosol.c	/^void get_angstrom(l2str *l2rec, int band, float angst[])$/;"	f
get_aph	carder.c	/^static double get_aph(int band, double aph675)$/;"	f	file:
get_aphstar	aph.c	/^float get_aphstar(float wave, int dwave, int ftype, float proxy) $/;"	f
get_atrem	get_atrem_corl1.c	/^float  get_atrem(float *tg_tot, float *rhot, paramstr P) {$/;"	f
get_atrem_cor	get_atrem_corl1.c	/^int get_atrem_cor (int32_t sensorID, l1str *l1rec, int32_t ip, float *rhot, float *tg_tot) {$/;"	f
get_atsr	sstref.c	/^float get_atsr(char *sstfile, float lon, float lat, int32_t year, int32_t day, int32_t minatsrcnt)$/;"	f
get_atsrday	sstref.c	/^float get_atsrday(char *sstfile, float lon, float lat)$/;"	f
get_aw_bbw	water.c	/^void get_aw_bbw(l2str *l2rec,float wave[],int nwave,float *aw,float *bbw)$/;"	f
get_bbp_las	las_iop.c	/^int get_bbp_las(l2str *l2rec, int ip, float tab_wave[], float tab_bbp[], int tab_nwave)$/;"	f
get_bbp_las_eta	las_iop.c	/^float get_bbp_las_eta(l2str *l2rec, int ip)$/;"	f
get_bbp_qaa	get_qaa.c	/^int get_bbp_qaa(l2str *l2rec, int ip, float tab_wave[], float tab_bbp[], int tab_nwave)$/;"	f
get_bbstar	calcite.c	/^float get_bbstar(float lat) {$/;"	f
get_bbws	seawater.c	/^void get_bbws(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_bias_mean_sst	sst.c	/^float *get_bias_mean_sst(l2str *l2rec) {$/;"	f
get_bias_mean_sst4	sst.c	/^float *get_bias_mean_sst4(l2str *l2rec) {$/;"	f
get_bias_mean_sst_triple	sst.c	/^float *get_bias_mean_sst_triple(l2str *l2rec) {$/;"	f
get_bias_sst	sst.c	/^float *get_bias_sst(l2str *l2rec) {$/;"	f
get_bias_sst4	sst.c	/^float *get_bias_sst4(l2str *l2rec) {$/;"	f
get_bias_sst_triple	sst.c	/^float *get_bias_sst_triple(l2str *l2rec) {$/;"	f
get_box_square_km	main_l1info.c	/^get_box_square_km(double northern_boundary,$/;"	f
get_box_square_km_sublevel	main_l1info.c	/^get_box_square_km_sublevel(double northern_boundary,$/;"	f
get_bsi	get_bsi.c	/^void get_bsi(l2str *l2rec, float *BSi)$/;"	f
get_carder	carder.c	/^void get_carder(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_cdom_morel	cdom_morel.c	/^void get_cdom_morel(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_cfg_array	pml_iop_config.c	/^float *get_cfg_array(char *tok, char *fname)$/;"	f
get_cfg_f	pml_iop_config.c	/^float get_cfg_f(char *tok, char *fname)$/;"	f
get_cfg_i	pml_iop_config.c	/^int get_cfg_i(char *tok, char *fname)$/;"	f
get_cfg_s	pml_iop_config.c	/^char *get_cfg_s(char *tok, char *fname)$/;"	f
get_chl	get_chl.c	/^void get_chl(l2str *l2rec, int prodnum, float prod[])$/;"	f
get_chl_oc4v4	atmcor_soa.f	/^        subroutine get_chl_oc4v4(/;"	s
get_chl_ocx	get_chl.c	/^float get_chl_ocx(l2str *l2rec, float Rrs[])$/;"	f
get_class_34k_w_owmc	get_owmc.c	/^float *get_class_34k_w_owmc(l2str *l2rec)$/;"	f
get_class_k_owmc	get_owmc.c	/^float *get_class_k_owmc(l2str *l2rec)$/;"	f
get_class_ward_owmc	get_owmc.c	/^float *get_class_ward_owmc(l2str *l2rec)$/;"	f
get_cldmask	get_habs.c	/^char get_cldmask(l1str *l1rec,int32_t ip)$/;"	f
get_cloudmask_meris	get_habs.c	/^char get_cloudmask_meris(l1str *l1rec, int32_t ip)$/;"	f
get_cloudmask_modis	get_habs.c	/^char get_cloudmask_modis(l1str *l1rec, int32_t ip)$/;"	f
get_counts_sst	sst.c	/^int16 *get_counts_sst(l2str *l2rec) {$/;"	f
get_counts_sst4	sst.c	/^int16 *get_counts_sst4(l2str *l2rec) {$/;"	f
get_counts_sst_triple	sst.c	/^int16 *get_counts_sst_triple(l2str *l2rec) {$/;"	f
get_ctl	l2_generic.c	/^int32 get_ctl(int32_t ctl_pt_fact, int32 ictl[], int32 jctl[])$/;"	f
get_ctl_pts	l1_generic_write.c	/^int32_t get_ctl_pts(int32_t npix, int32_t nscans, int32_t ictl[], int32_t jctl[]) {$/;"	f
get_ctl_pts	l1_hdf_generic_write.c	/^int32 get_ctl_pts(int32 npix, int32 nscans, int32 ictl[], int32 jctl[])$/;"	f
get_current_angle_limit	get_atrem_corl1.c	/^float get_current_angle_limit(float insenz, float insolz, int *ii, int *jj, float **anglelimit, float *senz, float *solz, int n_senz, int n_solz) {$/;"	f
get_czcscal	l1_czcs_hdf.c	/^int get_czcscal( char *file, int orbit, int16 year, int16 day, int32 msec, short l1acnt[], float slope750, float intercept750, int16 igain, float32 l1brads[] )$/;"	f
get_default_chl	get_chl.c	/^float get_default_chl(l2str *l2rec, float Rrs[])$/;"	f
get_dem_height	get_dem_height.c	/^int get_dem_height(char *demfile,$/;"	f
get_depth	get_depth.c	/^void get_depth(l2str *l2rec, float depth[])$/;"	f
get_elev	elev.c	/^float get_elev(float lat, float lon) {$/;"	f
get_es	get_es.c	/^void get_es(l2str *l2rec, int band, float Es[])$/;"	f
get_evi	get_ndvi.c	/^void get_evi(l2str *l2rec, float evi[])$/;"	f
get_f0_neckel	get_f0.c	/^int get_f0_neckel(int32_t wl, int32_t width, float *f0)$/;"	f
get_f0_neckel_	get_f0.c	/^int get_f0_neckel_(int32_t *wl, int32_t *width, float *f0)$/;"	f
get_f0_thuillier	get_f0.c	/^int get_f0_thuillier(int32_t wl, int32_t width, float *f0)$/;"	f
get_f0_thuillier_	get_f0.c	/^int get_f0_thuillier_(int32_t *wl, int32_t *width, float *f0)$/;"	f
get_f0_thuillier_ext	get_f0.c	/^int get_f0_thuillier_ext(int32_t wl, int32_t width, float *f0)$/;"	f
get_f0_thuillier_ext_	get_f0.c	/^int get_f0_thuillier_ext_(int32_t *wl, int32_t *width, float *f0)$/;"	f
get_flags_carder	carder.c	/^int16 *get_flags_carder(l2str *l2rec)$/;"	f
get_flags_giop	giop.c	/^int16 *get_flags_giop(l2str *l2rec)$/;"	f
get_flags_niwa	get_niwa_iop.c	/^int16 * get_flags_niwa(l2str *l2rec)$/;"	f
get_flags_qaa	get_qaa.c	/^unsigned char *get_flags_qaa(l2str *l2rec)$/;"	f
get_flags_sst	sst.c	/^int16 *get_flags_sst(l2str *l2rec) {$/;"	f
get_flags_sst4	sst.c	/^int16 *get_flags_sst4(l2str *l2rec) {$/;"	f
get_flags_sst_triple	sst.c	/^int16 *get_flags_sst_triple(l2str *l2rec) {$/;"	f
get_flh	fluorescence.c	/^void get_flh(l2str *l2rec, float flh[]) {$/;"	f
get_fqy	fluorescence.c	/^void get_fqy(l2str *l2rec, float fqy[]) {$/;"	f
get_fsat	fluorescence.c	/^void get_fsat(l2str *l2rec, float flh[]) {$/;"	f
get_giop	giop.c	/^void get_giop(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_gsm	gsm.c	/^void get_gsm(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_habs_ci	get_habs.c	/^void get_habs_ci(l2str *l2rec,  l2prodstr *p, float ci[])$/;"	f
get_habs_cldmask	get_habs.c	/^void get_habs_cldmask(l2str *l2rec, float cld[])$/;"	f
get_habs_cldmask_meris	get_habs.c	/^void get_habs_cldmask_meris(l2str *l2rec,  float cld[])$/;"	f
get_habs_cldmask_modis	get_habs.c	/^void get_habs_cldmask_modis(l2str *l2rec, float cld[])$/;"	f
get_habs_mph	get_habs.c	/^void get_habs_mph(l2str *l2rec,  l2prodstr *p, float chl_mph[])$/;"	f
get_habs_mph_flags	get_habs.c	/^void get_habs_mph_flags(l2str *l2rec,  l2prodstr *p, float flags[])$/;"	f
get_height	get_height.c	/^int get_height(char *demfile, l1str *l1rec, int32_t ip, int terrain_corrected)$/;"	f
get_hycom_sss	sssref.c	/^float get_hycom_sss( char *sssfile, float lon, float lat, float *sss )$/;"	f
get_ice_frac	get_ice_frac.c	/^void get_ice_frac(l2str *l2rec, float ice[])$/;"	f
get_icefrac_nsidc	ice_mask.c	/^float get_icefrac_nsidc(float lon, float lat){$/;"	f
get_icefrac_oisst	ice_mask.c	/^float get_icefrac_oisst(float lon, float lat)$/;"	f
get_icefrac_old	ice_mask.c	/^float get_icefrac_old(float lon, float lat)$/;"	f
get_iops	convl12.c	/^void get_iops(l2str *l2rec, int32_t iop_opt)$/;"	f
get_ipar	ipar.c	/^void get_ipar(l2str *l2rec, float ipar[])$/;"	f
get_iter_giop	giop.c	/^int16 *get_iter_giop(l2str *l2rec)$/;"	f
get_iter_gsm	gsm.c	/^int16 *get_iter_gsm(l2str *l2rec)$/;"	f
get_kernel	filter.c	/^void get_kernel( filstr *f)$/;"	f
get_l1a_rec	l1a_seawifs.c	/^int32 get_l1a_rec(int32 sd_id, int32 recno, cal_mod_struc *cal_mod,$/;"	f
get_l1a_rec_osmi	l1a_osmi.c	/^int32 get_l1a_rec_osmi(int32 sd_id, int32 recno, cal_mod_struc *cal_mod,$/;"	f
get_l1data	l1_hdf_generic_read.c	/^void get_l1data( int32	sd_id,	$/;"	f
get_l2prod_index	get_l2prod_index.c	/^l2prodstr *get_l2prod_index(char *prod_name, \/* Input SDS name              *\/$/;"	f
get_las	las_iop.c	/^void get_las(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_leap_u58	viirs_utls.c	/^double get_leap_u58( int64_t u58 )$/;"	f
get_lon_distance	main_l1info.c	/^get_lon_distance(double lon1, double lon2) {$/;"	f
get_mgiop	mgiop.c	/^void get_mgiop(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_mld	get_mld.c	/^float get_mld(float lon, float lat, int day) {$/;"	f
get_ms_epsilon	aerosol.c	/^void get_ms_epsilon(l2str *l2rec, float eps[])$/;"	f
get_nc_height	get_nc_height.c	/^int get_nc_height(char *demfile,$/;"	f
get_ndt	carder.c	/^static float get_ndt( float lon, float lat )$/;"	f	file:
get_ndvi	get_ndvi.c	/^void get_ndvi(l2str *l2rec, float ndvi[])$/;"	f
get_niwa	get_niwa_iop.c	/^void get_niwa(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_ntev2	sstref.c	/^float get_ntev2(char *sstfile, float lon, float lat, int32_t year, int32_t day)$/;"	f
get_octs_cal	l1_octs_hdf.c	/^int32 get_octs_cal(char *file, int16 year, int16 day, int32 msec[MAXOCLIN],$/;"	f
get_oisst	sstref.c	/^float get_oisst(char *sstfile, float lon, float lat)$/;"	f
get_oisstv2d	sstref.c	/^float get_oisstv2d(char *sstfile, float lon, float lat)$/;"	f
get_opp	get_opp.c	/^void get_opp(l2str *l2rec, int prodnum, float prod[])$/;"	f
get_par	get_par.c	/^void get_par(l2str *l2rec, float par[]) {$/;"	f
get_par_clim	get_opp.c	/^void get_par_clim(float *parin,float *lat,float *lon,int nlat,int nlon,float *latp,float *lonp,int32_t npix,float *par) {$/;"	f
get_params	carder.c	/^static void get_params( void )$/;"	f	file:
get_pft_hirata	get_pft_hirata.c	/^void get_pft_hirata(l2str *l2rec, l2prodstr *p, float prod[]) {$/;"	f
get_pft_uitz	get_pft_uitz.c	/^	void get_pft_uitz(l2str *l2rec, l2prodstr *p, float prod[]) {$/;"	f
get_photic_depth	photic_depth.c	/^void get_photic_depth(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_pml	get_pml.c	/^void get_pml(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_poc	get_poc.c	/^void get_poc(l2str *l2rec, int prodnum, float prod[])$/;"	f
get_psd_ksm	get_psd_ksm.c	/^void get_psd_ksm(l2str *l2rec, l2prodstr *p, float prod[]) {$/;"	f
get_qaa	get_qaa.c	/^void get_qaa(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
get_qual_sst	sst.c	/^int8 *get_qual_sst(l2str *l2rec) {$/;"	f
get_qual_sst4	sst.c	/^int8 *get_qual_sst4(l2str *l2rec) {$/;"	f
get_qual_sst_triple	sst.c	/^int8 *get_qual_sst_triple(l2str *l2rec) {$/;"	f
get_raman_coeffs	raman.c	/^void get_raman_coeffs(l2str *l2rec) {$/;"	f
get_rho_mumm	mumm.c	/^void get_rho_mumm(l2str *l2rec, int32_t ipix, int32_t iw, float *rhom)$/;"	f
get_rhos	get_rhos.c	/^int get_rhos(l1str *l1rec, int32_t ip)$/;"	f
get_rhown_eval	get_rhown_nir.c	/^void get_rhown_eval(char *fqfile, float Rrs[], float wave[], int32_t nir_s, int32_t nir_l,$/;"	f
get_rhown_mumm	mumm.c	/^void get_rhown_mumm(l2str *l2rec, int32_t ip, int32_t nir_s, int32_t nir_l, float rhown[])$/;"	f
get_sma	soa_sma.c	/^void get_sma(l2str *l2rec, int32_t prodID, float prod[])$/;"	f
get_smoke	get_smoke.c	/^void get_smoke(l2str *l2rec, float smoke[])$/;"	f
get_soa	soa_sma.c	/^void get_soa(l2str *l2rec, int32_t prodID, float prod[])$/;"	f
get_solz	par_utils.c	/^float get_solz(int32_t jday, float time, float lon, float lat) {$/;"	f
get_sssref	sssref.c	/^float get_sssref(char *sssfile, float lon, float lat, int day)$/;"	f
get_sst	sst.c	/^float *get_sst(l2str *l2rec) {$/;"	f
get_sst4	sst.c	/^float *get_sst4(l2str *l2rec) {$/;"	f
get_sst_treesum	sst.c	/^float *get_sst_treesum(l2str *l2rec) {$/;"	f
get_sst_triple	sst.c	/^float *get_sst_triple(l2str *l2rec) {$/;"	f
get_sstref	sstref.c	/^float get_sstref(short reftyp, char *sstfile, l1str *l1rec, int32_t ip)$/;"	f
get_stdv_sst	sst.c	/^float *get_stdv_sst(l2str *l2rec) {$/;"	f
get_stdv_sst4	sst.c	/^float *get_stdv_sst4(l2str *l2rec) {$/;"	f
get_stdv_sst_triple	sst.c	/^float *get_stdv_sst_triple(l2str *l2rec) {$/;"	f
get_swim	swim.c	/^void get_swim(l2str *l2rec, l2prodstr *p, float prod[]) {$/;"	f
get_tilevalue	get_nc_height.c	/^int get_tilevalue(tile_struct tile, float lat, float lon, double *value) {$/;"	f
get_toa_refl	get_toa_refl.c	/^void get_toa_refl(l2str *l2rec, int band, float rhot[])$/;"	f
get_tricho	get_tricho.c	/^void get_tricho(l2str *l2rec, uint8 tricho[])$/;"	f
get_windsat	sstref.c	/^float get_windsat(char *sstfile, float lon, float lat, float solz, int32_t xsatid, int32_t sensorID)$/;"	f
get_woasssclim	sssref.c	/^float get_woasssclim(char *sssfile, float lon, float lat, int day)$/;"	f
get_wt	polcor.c	/^int get_wt( float zang, float *ang, int nang, float *wt, char *ix )$/;"	f
get_xcal	xcal.c	/^double *get_xcal(l1str *l1rec, int type, int wave) {$/;"	f
get_zno3	get_zno3.c	/^float get_zno3(float lon, float lat, int day) {$/;"	f
getglint	getglint.f	/^        subroutine getglint(/;"	s
getglint_iqu	getglint.f	/^        subroutine getglint_iqu(/;"	s
getinbasename	jplaeriallib.c	/^char* getinbasename(char *file) {$/;"	f
getinbasename_av	jplaeriallib.c	/^char* getinbasename_av(char *file) {$/;"	f
getl1rec	getl1rec.c	/^int getl1rec( filehandle *l1file, instr *input, int32_t iscan, int32_t dscan,$/;"	f
getncDimensionLength	brdf.c	/^int32_t getncDimensionLength(int ncid, int dimId) {$/;"	f
getncFQdim	brdf.c	/^int getncFQdim(int ncid, char *file, char *sdsname, int sds_id, int nexp,  float *bdat) {$/;"	f
giop_acdom_file	input_struc.h	/^  char   giop_acdom_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_acdom_opt	input_struc.h	/^  int    giop_acdom_opt;$/;"	m	struct:input_struct
giop_adg_file	input_struc.h	/^  char   giop_adg_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_adg_opt	input_struc.h	/^  int    giop_adg_opt;$/;"	m	struct:input_struct
giop_adg_s	input_struc.h	/^  float  giop_adg_s;$/;"	m	struct:input_struct
giop_adg_w	input_struc.h	/^  float  giop_adg_w;$/;"	m	struct:input_struct
giop_amb	giop.c	/^double giop_amb(FITSTRUCT *ambdata, double par[])$/;"	f
giop_anap_file	input_struc.h	/^  char   giop_anap_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_anap_opt	input_struc.h	/^  int    giop_anap_opt;$/;"	m	struct:input_struct
giop_aph_file	input_struc.h	/^  char   giop_aph_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_aph_opt	input_struc.h	/^  int    giop_aph_opt;$/;"	m	struct:input_struct
giop_aph_s	input_struc.h	/^  float  giop_aph_s;$/;"	m	struct:input_struct
giop_aph_w	input_struc.h	/^  float  giop_aph_w;$/;"	m	struct:input_struct
giop_bbnap_file	input_struc.h	/^  char   giop_bbnap_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_bbnap_opt	input_struc.h	/^  int    giop_bbnap_opt;$/;"	m	struct:input_struct
giop_bbp_file	input_struc.h	/^  char   giop_bbp_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_bbp_opt	input_struc.h	/^  int    giop_bbp_opt;$/;"	m	struct:input_struct
giop_bbp_s	input_struc.h	/^  float  giop_bbp_s;$/;"	m	struct:input_struct
giop_bbp_w	input_struc.h	/^  float  giop_bbp_w;$/;"	m	struct:input_struct
giop_bbph_file	input_struc.h	/^  char   giop_bbph_file[FILENAME_MAX];$/;"	m	struct:input_struct
giop_bbph_opt	input_struc.h	/^  int    giop_bbph_opt;$/;"	m	struct:input_struct
giop_chl	giop.c	/^float32 giop_chl(giopstr *g, int16 iopf, double par[], float *chl_err)$/;"	f
giop_ctl_init	giop.c	/^void giop_ctl_init(giopstr *g, instr *input, int nwave, float wave[], $/;"	f
giop_ctl_start	giop.c	/^void giop_ctl_start(giopstr *g, float chl) {$/;"	f
giop_ctl_str	giop.h	/^typedef struct giop_ctl_str {$/;"	s
giop_fit_opt	input_struc.h	/^  int    giop_fit_opt;$/;"	m	struct:input_struct
giop_flag_lname	flags_iop.h	/^static const char *giop_flag_lname[NGIOPFLAGS] =     {"ISMASKED",$/;"	v
giop_get_adg_pointer	giop.c	/^float* giop_get_adg_pointer()$/;"	f
giop_get_aph_pointer	giop.c	/^float* giop_get_aph_pointer()$/;"	f
giop_get_bbp_pointer	giop.c	/^float* giop_get_bbp_pointer()$/;"	f
giop_get_chl_pointer	giop.c	/^float* giop_get_chl_pointer()$/;"	f
giop_get_fitpar_pointer	giop.c	/^float** giop_get_fitpar_pointer()$/;"	f
giop_grd	input_struc.h	/^  float  giop_grd[2];$/;"	m	struct:input_struct
giop_int_tab_file	giop.c	/^void giop_int_tab_file(char *file, int nx, float *x, float **y) {$/;"	f
giop_iterate	input_struc.h	/^  int    giop_iterate;$/;"	m	struct:input_struct
giop_lm_df	giop.c	/^int giop_lm_df(const gsl_vector *parv, void *data, gsl_matrix *J)$/;"	f
giop_lm_f	giop.c	/^int giop_lm_f (const gsl_vector *parv, void *data, gsl_vector *f)$/;"	f
giop_lm_fdf	giop.c	/^int giop_lm_fdf(const gsl_vector *parv, void *data, gsl_vector *f, gsl_matrix *J)$/;"	f
giop_maxiter	input_struc.h	/^  int    giop_maxiter;$/;"	m	struct:input_struct
giop_model	giop.c	/^void giop_model(giopstr *g, double par[],int nwave,float wave[],float aw[],float bbw[],$/;"	f
giop_model_iterate	giop.c	/^void giop_model_iterate(giopstr *g, double par[],int nwave,float wave[],float aw[],float bbw[],$/;"	f
giop_ran	giop.c	/^int giop_ran(int recnum)$/;"	f
giop_rrs_diff	input_struc.h	/^  float  giop_rrs_diff;$/;"	m	struct:input_struct
giop_rrs_opt	input_struc.h	/^  int    giop_rrs_opt;$/;"	m	struct:input_struct
giop_rrs_unc	input_struc.h	/^  float  *giop_rrs_unc;$/;"	m	struct:input_struct
giop_wave	input_struc.h	/^  float  *giop_wave;$/;"	m	struct:input_struct
giopstr	giop.h	/^} giopstr;$/;"	t	typeref:struct:giop_ctl_str
glint	input_struc.h	/^  float  glint;                  \/* glint threshold                  *\/$/;"	m	struct:input_struct
glint	l1_struc.h	/^    char   *glint;$/;"	m	struct:l1_struct
glintMaskOn	l1_struc.h	/^    int32_t   glintMaskOn;$/;"	m	struct:l1_struct
glint_coef	l1_struc.h	/^    float  *glint_coef;$/;"	m	struct:l1_struct
glint_coef	l2_struc.h	/^    float  *glint_coef;$/;"	m	struct:l2_struct
glint_opt	input_struc.h	/^  int32_t   glint_opt;      \/* 1=apply glint correction                 *\/$/;"	m	struct:input_struct
glint_rad	glint.c	/^void glint_rad(int32_t iter, int32_t nband, int32_t nir_s, int32_t nir_l, $/;"	f
glintmask	input_struc.h	/^  int32_t   glintmask;              \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
glintmax	sst.c	/^static float glintmax = 0.005;$/;"	v	file:
globals_h	globals.h	10;"	d
goci_l1b	l1_goci.c	/^static goci_l1b_t *goci_l1b = NULL;$/;"	v	file:
gothic_R	brdf.c	/^void gothic_R(float wave[],int32_t nwave,float solz,float senz, float ws,float R[]) $/;"	f
gp0	carder.c	/^static double gp0, gp1, gp2;           \/* coefs for chl=fn(aph675) global    *\/$/;"	v	file:
gp1	carder.c	/^static double gp0, gp1, gp2;           \/* coefs for chl=fn(aph675) global    *\/$/;"	v	file:
gp2	carder.c	/^static double gp0, gp1, gp2;           \/* coefs for chl=fn(aph675) global    *\/$/;"	v	file:
grabAwBw	convert_band.c	/^void grabAwBw(float  wvl[],int nwvl,float aw[], float bw[]){$/;"	f
grabBricaud	convert_band.c	/^void grabBricaud(float wvl[],int nwvl,float* a_bricaud,float* b_bricaud){$/;"	f
gran_map	l1_viirs_h5.c	/^static int *gran_map; \/* granule assoc to a scan *\/$/;"	v	file:
grd	giop.h	/^  float grd[2];        \/* RRSGRD param         *\/$/;"	m	struct:giop_ctl_str
grd1	gsm.c	/^static float  grd1  = 0.0949;$/;"	v	file:
grd1	swim.c	/^static const double grd1 = 0.08945;  \/\/the "g0" coefficient in rrs function Lee et al 2002$/;"	v	file:
grd2	gsm.c	/^static float  grd2  = 0.0794;$/;"	v	file:
grd2	swim.c	/^static const double grd2 = 0.1247;   \/\/the "g1" coefficient in rrs function Lee et al 2002$/;"	v	file:
greenband	bioOptBandShift.c	/^    float greenband;$/;"	m	struct:_context	file:
grp_id	filehandle.h	/^    int32_t   grp_id[8];$/;"	m	struct:filehandle_struct
grp_id	h5io.h	/^   hid_t grp_id;   \/* set with type H5IO_TYP_FILE_ID or H5IO_TYP_GRP_ID *\/$/;"	m	struct:h5io_str_d
gscan	l1_mos_hdf.c	/^static float gscan[NBANDS_MOS][4];$/;"	v	file:
gser	gser.c	/^void gser(float *gamser, float a, float x, float *gln)$/;"	f
gsm_adg_s	input_struc.h	/^  float   gsm_adg_s;$/;"	m	struct:input_struct
gsm_amb	gsm.c	/^double gsm_amb(FITSTRUCT *auxdata, double par[])$/;"	f
gsm_aphs	input_struc.h	/^  float   *gsm_aphs;$/;"	m	struct:input_struct
gsm_aphw	input_struc.h	/^  float   *gsm_aphw;$/;"	m	struct:input_struct
gsm_bbp_s	input_struc.h	/^  float   gsm_bbp_s;$/;"	m	struct:input_struct
gsm_fit	input_struc.h	/^  int32_t gsm_fit;$/;"	m	struct:input_struct
gsm_lm_df	gsm.c	/^int gsm_lm_df(const gsl_vector *par, void *data, gsl_matrix *J)$/;"	f
gsm_lm_f	gsm.c	/^int gsm_lm_f(const gsl_vector *par, void *data, gsl_vector *f)$/;"	f
gsm_lm_fdf	gsm.c	/^int gsm_lm_fdf(const gsl_vector *par, void *data, $/;"	f
gsm_opt	input_struc.h	/^  int32_t gsm_opt;$/;"	m	struct:input_struct
gsm_ran	gsm.c	/^int gsm_ran(int recnum)$/;"	f
gtif	l1_oli.c	/^    GTIF* gtif; \/\/ geotiff handle for the first file$/;"	m	struct:oli_struct	file:
h	atrem_corl1.h	/^    float h[MODELMAX],t[MODELMAX],p[MODELMAX],vmr[MODELMAX];$/;"	m	struct:__anon4
h2o	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
h2o_transmittance	gas_trans.c	/^void h2o_transmittance(int32_t sensorID, int32_t evalmask, int32_t nwave,$/;"	f
h5io_attr_exist	h5io.c	/^int h5io_attr_exist( h5io_str *id, char *attr_name )$/;"	f
h5io_close	h5io.c	/^int h5io_close( h5io_str *id )$/;"	f
h5io_grab_ds	h5io.c	/^int h5io_grab_ds( h5io_str *id, char *path_name, void *data )$/;"	f
h5io_grab_ds_slice	h5io.c	/^int h5io_grab_ds_slice( h5io_str *id, char *path_name, int *start, $/;"	f
h5io_grp_contents	h5io.c	/^int h5io_grp_contents( h5io_str *id, int *n_obj, char ***o_names, $/;"	f
h5io_info	h5io.c	/^int h5io_info( h5io_str *id, char *attr_name, H5T_class_t *class,$/;"	f
h5io_inq_path	h5io.c	/^int h5io_inq_path( h5io_str *id, char *path, int *found_path )$/;"	f
h5io_mk_ds	h5io.c	/^int h5io_mk_ds( h5io_str *id, char *ds_name, hid_t type, int ndim, $/;"	f
h5io_mk_grp	h5io.c	/^int h5io_mk_grp( h5io_str *id, char *grp_nam, h5io_str *grp_id )$/;"	f
h5io_openr	h5io.c	/^int h5io_openr( char *file, int opt, h5io_str *id )$/;"	f
h5io_openw	h5io.c	/^int h5io_openw( char *file, int opt, h5io_str *id )$/;"	f
h5io_rd_attr	h5io.c	/^int h5io_rd_attr( h5io_str *id, char *attr_name, void *data )$/;"	f
h5io_rd_ds	h5io.c	/^int h5io_rd_ds( h5io_str *ds_id, void *data )$/;"	f
h5io_rd_ds_slice	h5io.c	/^int h5io_rd_ds_slice( h5io_str *ds_id, int *start, int *count, void *data )$/;"	f
h5io_set_ds	h5io.c	/^int h5io_set_ds( h5io_str *id, char *path_name, h5io_str *ds_id )$/;"	f
h5io_set_grp	h5io.c	/^int h5io_set_grp( h5io_str *id, char *path_name, h5io_str *grp_id )$/;"	f
h5io_str	h5io.h	/^typedef struct h5io_str_d h5io_str;$/;"	t	typeref:struct:h5io_str_d
h5io_str_d	h5io.h	/^struct h5io_str_d {$/;"	s
h5io_wr_attr	h5io.c	/^int h5io_wr_attr( h5io_str *id, char *attr_name, hid_t out_type, $/;"	f
h5io_wr_attr_str	h5io.c	/^int h5io_wr_attr_str( h5io_str *id, char *attr_name, int ndim, int *dim_siz, int str_len, char *data )$/;"	f
h5io_wr_ds	h5io.c	/^int h5io_wr_ds( h5io_str *ds_id, void *data )$/;"	f
h5io_wr_ds_slice	h5io.c	/^int h5io_wr_ds_slice( h5io_str *ds_id, int *start, int *count, void *data )$/;"	f
habs_flag_lname	mph_flags.h	/^static const char *habs_flag_lname[NHABFLAGS] = {"WATER","CLOUD",$/;"	v
hasRrs	read_l3bin.h	/^    int      hasRrs;$/;"	m	struct:l3bin_struct
haveRed	sst.c	/^static int haveRed = 0;$/;"	v	file:
haveSSES	sst.c	/^static int haveSSES = 1;$/;"	v	file:
haveSST	sst.c	/^static int haveSST = 0;$/;"	v	file:
haveSST4	sst.c	/^static int haveSST4 = 0;$/;"	v	file:
have_ms	aerosol.c	/^static int have_ms = 0;$/;"	v	file:
have_rh	aerosol.c	/^static int have_rh = 0;$/;"	v	file:
have_sd	aerosol.c	/^static int have_sd = 0;$/;"	v	file:
height	l1_struc.h	/^    float  *height;$/;"	m	struct:l1_struct
height	l2_struc.h	/^    float  *height;$/;"	m	struct:l2_struct
height	main_l1mapgen.c	/^static int width, height;$/;"	v	file:
hgt	l1_hmodis_hdf.c	/^    float *hgt;       \/*< Height *\/$/;"	m	struct:__anon34	file:
hico_private_struct	l1_hico_h5.c	/^typedef struct hico_private_struct {$/;"	s	file:
hico_private_t	l1_hico_h5.c	/^} hico_private_t;$/;"	t	typeref:struct:hico_private_struct	file:
hilt	l1_struc.h	/^    char   *hilt;$/;"	m	struct:l1_struct
hiltMaskOn	l1_struc.h	/^    int32_t   hiltMaskOn;$/;"	m	struct:l1_struct
hiltmask	input_struc.h	/^  int32_t   hiltmask;               \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
hipol	input_struc.h	/^  float  hipol;                  \/* high polarization threshold      *\/$/;"	m	struct:input_struct
hisenz	sst.c	/^static float hisenz = 55.0;$/;"	v	file:
hisenza	sst.c	/^static float hisenza = 45.0;$/;"	v	file:
hour	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
hpa0	carder.c	/^static double hpa0[6], hpa1[6], hpa2[6], hpa3[6]; \/* aph model prms hipackaged*\/$/;"	v	file:
hpa1	carder.c	/^static double hpa0[6], hpa1[6], hpa2[6], hpa3[6]; \/* aph model prms hipackaged*\/$/;"	v	file:
hpa2	carder.c	/^static double hpa0[6], hpa1[6], hpa2[6], hpa3[6]; \/* aph model prms hipackaged*\/$/;"	v	file:
hpa3	carder.c	/^static double hpa0[6], hpa1[6], hpa2[6], hpa3[6]; \/* aph model prms hipackaged*\/$/;"	v	file:
hpc0	carder.c	/^static double hpc0, hpc1, hpc2, hpc3;  \/* coefs for 490:555 chl alg hipackaged*\/$/;"	v	file:
hpc1	carder.c	/^static double hpc0, hpc1, hpc2, hpc3;  \/* coefs for 490:555 chl alg hipackaged*\/$/;"	v	file:
hpc2	carder.c	/^static double hpc0, hpc1, hpc2, hpc3;  \/* coefs for 490:555 chl alg hipackaged*\/$/;"	v	file:
hpc3	carder.c	/^static double hpc0, hpc1, hpc2, hpc3;  \/* coefs for 490:555 chl alg hipackaged*\/$/;"	v	file:
hpp0	carder.c	/^static double hpp0, hpp1, hpp2;        \/* coefs for chl=fn(aph675) hipackaged*\/$/;"	v	file:
hpp1	carder.c	/^static double hpp0, hpp1, hpp2;        \/* coefs for chl=fn(aph675) hipackaged*\/$/;"	v	file:
hpp2	carder.c	/^static double hpp0, hpp1, hpp2;        \/* coefs for chl=fn(aph675) hipackaged*\/$/;"	v	file:
hpsolb	atmcor_soa.f	/^      subroutine hpsolb(/;"	s
hsurf	atrem_corl1.h	/^    float hsurf,dlt,dlt2;$/;"	m	struct:__anon6
huffcode	nr.h	/^} huffcode;$/;"	t	typeref:struct:__anon42
hunt	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE hunt(/;"	s
hunt	get_atrem_corl1.c	/^int32_t hunt(float *xx,int32_t n, double x, int32_t jlo) {$/;"	f
i	filter.c	/^    int32_t i;$/;"	m	struct:fnode_str	file:
i	nr.h	/^typedef struct FCOMPLEX {float r,i;} fcomplex;$/;"	m	struct:FCOMPLEX
iaer	atrem_corl1.h	/^    int32_t nb,nl,model,iaer; \/\/iaer not used because call to ssssss routine commented out in fortran code$/;"	m	struct:__anon4
ib07	sst.c	/^static int ib07 = -1;$/;"	v	file:
ib08	sst.c	/^static int ib08 = -1;$/;"	v	file:
ib11	sst.c	/^static int ib11 = -1;$/;"	v	file:
ib12	sst.c	/^static int ib12 = -1;$/;"	v	file:
ib16	sst.c	/^static int ib16 = -1;$/;"	v	file:
ib37	sst.c	/^static int ib37 = -1;$/;"	v	file:
ib39	sst.c	/^static int ib39 = -1;$/;"	v	file:
ib40	sst.c	/^static int ib40 = -1;$/;"	v	file:
ib410	get_qaa.c	/^static int ib410, ib440, ib490, ib555, ib670;$/;"	v	file:
ib412	setflags.c	/^static int ib412;$/;"	v	file:
ib440	get_qaa.c	/^static int ib410, ib440, ib490, ib555, ib670;$/;"	v	file:
ib443	setflags.c	/^static int ib443;$/;"	v	file:
ib488	get_owmc.c	/^static int ib488 = -1;$/;"	v	file:
ib490	get_qaa.c	/^static int ib410, ib440, ib490, ib555, ib670;$/;"	v	file:
ib490	setflags.c	/^static int ib490;$/;"	v	file:
ib510	setflags.c	/^static int ib510;$/;"	v	file:
ib551	get_owmc.c	/^static int ib551 = -1;$/;"	v	file:
ib555	get_qaa.c	/^static int ib410, ib440, ib490, ib555, ib670;$/;"	v	file:
ib555	setflags.c	/^static int ib555;$/;"	v	file:
ib67	sst.c	/^static int ib67 = -1;$/;"	v	file:
ib670	get_qaa.c	/^static int ib410, ib440, ib490, ib555, ib670;$/;"	v	file:
ib670	setflags.c	/^static int ib670;$/;"	v	file:
ib73	sst.c	/^static int ib73 = -1;$/;"	v	file:
ib85	sst.c	/^static int ib85 = -1;$/;"	v	file:
ib865	setflags.c	/^static int ib865;$/;"	v	file:
ibcloud	setflags.c	/^static int ibcloud;$/;"	v	file:
ibred	sst.c	/^static int ibred = -1;$/;"	v	file:
ibvc_bin	bioOptBandShift.c	/^    int *ibvc_bin;$/;"	m	struct:_context	file:
ice	ice_mask.c	/^static char ice[NY][NX];$/;"	v	file:
ice	l1_struc.h	/^    char   *ice;$/;"	m	struct:l1_struct
ice_file_type	ice_mask.c	/^static int ice_file_type = ICE_TYPE_OLD;$/;"	v	file:
ice_fraction	ice_mask.c	/^float ice_fraction(float lon, float lat)$/;"	f
ice_init_oisst	ice_mask.c	/^int ice_init_oisst(char *icefile)$/;"	f
ice_initalized	ice_mask.c	/^static int ice_initalized = 0;$/;"	v	file:
ice_mask	ice_mask.c	/^char ice_mask(float lon, float lat)$/;"	f
ice_mask_init	ice_mask.c	/^int ice_mask_init(char *file, int year, int day, float threshold)$/;"	f
ice_mask_init_daily	ice_mask.c	/^int ice_mask_init_daily(char *file, int year, int day, int32 sd_id)$/;"	f
ice_mask_init_monthly	ice_mask.c	/^int ice_mask_init_monthly(char *file, int year, int day, int32 sd_id)$/;"	f
ice_mask_init_nsidc_raw	ice_mask.c	/^int ice_mask_init_nsidc_raw(char *file)$/;"	f
ice_mask_init_old	ice_mask.c	/^int ice_mask_init_old(char *file, int day, int32 sd_id)$/;"	f
ice_mask_nsidc	ice_mask.c	/^char ice_mask_nsidc(float lon, float lat)$/;"	f
ice_mask_oisst	ice_mask.c	/^char ice_mask_oisst(float lon, float lat)$/;"	f
ice_mask_old	ice_mask.c	/^char ice_mask_old(float lon, float lat)$/;"	f
ice_threshold	ice_mask.c	/^static float ice_threshold = 0;$/;"	v	file:
ice_threshold	input_struc.h	/^  float  ice_threshold;          \/* fraction above which is flag ice *\/$/;"	m	struct:input_struct
icefile	input_struc.h	/^  char   icefile[FILENAME_MAX];  \/* Ice mask\/fraction file           *\/$/;"	m	struct:input_struct
iceref	ice_mask.c	/^static iceref_t *iceref;$/;"	v	file:
iceref_t	ice_mask.c	/^typedef float iceref_t[OI4NX+2];$/;"	t	file:
icod	nr.h	/^	unsigned long *icod,*ncod,*left,*right,nch,nodemax;$/;"	m	struct:__anon42
ictl	l1_generic_write.c	/^static int32_t *ictl;$/;"	v	file:
ictl	l1_hdf_generic_write.c	/^static int32 *ictl;$/;"	v	file:
ictl	l2_generic.c	/^static int32 *ictl;$/;"	v	file:
id	l1_hmodis_hdf.c	/^    int32_t id;                   \/*< HDF4 file ID *\/$/;"	m	struct:__anon31	file:
id	l1b_viirs_nc.c	/^    int32_t id;                   \/*< NetCDF4 file ID *\/$/;"	m	struct:__anon29	file:
idInputBand	convert_band.c	/^void idInputBand(float inputWvl[],float targetWvl,ccstr *ctxt,int nin){$/;"	f
idx	cdom_morel.c	/^static float *idx;$/;"	v	file:
idx410	pml.c	/^static int idx410 = -1;$/;"	v	file:
idx410	qaa.c	/^static int idx410 = -1;$/;"	v	file:
idx412	raman.c	/^static int idx412; $/;"	v	file:
idx440	pml.c	/^static int idx440 = -1;$/;"	v	file:
idx440	qaa.c	/^static int idx440 = -1;$/;"	v	file:
idx443	raman.c	/^static int idx443;$/;"	v	file:
idx450	atrem_corl1.h	/^    int idx450; \/\/ 450 nm wavelength index$/;"	m	struct:param_table
idx488	raman.c	/^static int idx488;$/;"	v	file:
idx490	pml.c	/^static int idx490 = -1;$/;"	v	file:
idx490	qaa.c	/^static int idx490 = -1;$/;"	v	file:
idx510	pml.c	/^static int idx510 = -1;$/;"	v	file:
idx550	raman.c	/^static int idx550;$/;"	v	file:
idx555	pml.c	/^static int idx555 = -1;$/;"	v	file:
idx555	qaa.c	/^static int idx555 = -1;$/;"	v	file:
idx670	pml.c	/^static int idx670 = -1;$/;"	v	file:
idx670	qaa.c	/^static int idx670 = -1;$/;"	v	file:
idx670	raman.c	/^static int idx670;$/;"	v	file:
idy	atrem_corl1.h	/^    int32_t imn,idy,iyr,ih,im,is;$/;"	m	struct:__anon9
ied1	atrem_corl1.h	/^    int32_t ist1,ied1,ist2,ied2,istp94,iedp94;$/;"	m	struct:__anon12
ied1p14	atrem_corl1.h	/^    int32_t ist3,ied3,ist4,ied4,ist1p14,ied1p14;$/;"	m	struct:__anon13
ied2	atrem_corl1.h	/^    int32_t ist1,ied1,ist2,ied2,istp94,iedp94;$/;"	m	struct:__anon12
ied3	atrem_corl1.h	/^    int32_t ist3,ied3,ist4,ied4,ist1p14,ied1p14;$/;"	m	struct:__anon13
ied4	atrem_corl1.h	/^    int32_t ist3,ied3,ist4,ied4,ist1p14,ied1p14;$/;"	m	struct:__anon13
iedp94	atrem_corl1.h	/^    int32_t ist1,ied1,ist2,ied2,istp94,iedp94;$/;"	m	struct:__anon12
iend2	atrem_corl1.h	/^    int32_t istrt2,iend2;$/;"	m	struct:__anon15
ifile	input_struc.h	/^  char      ifile   [MAX_IFILES][FILENAME_MAX];$/;"	m	struct:input_struct
ifile	mscal_struc.h	/^    char   ifile [MAXNFILES][FILENAME_MAX];$/;"	m	struct:calinput_struct
iflag	get_dem_height.c	/^    int16 iflag[18338];  \/\/ Tile flag (0=sea, 1=flag, 2=filled)$/;"	m	struct:__anon24	file:
ih	atrem_corl1.h	/^    int32_t imn,idy,iyr,ih,im,is;$/;"	m	struct:__anon9
ihmax	get_dem_height.c	/^    int16 ihmax[18338];  \/\/ Maximum terrain height in tile$/;"	m	struct:__anon24	file:
ihmin	get_dem_height.c	/^    int16 ihmin[18338];  \/\/ Minimum terrain height in tile$/;"	m	struct:__anon24	file:
il2file	input_struc.h	/^  char    il2file  [MAX_OFILES][FILENAME_MAX];$/;"	m	struct:input_struct
ilist	input_struc.h	/^  char      ilist   [FILENAME_MAX];$/;"	m	struct:input_struct
ilob	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
im	atrem_corl1.h	/^    int32_t imn,idy,iyr,ih,im,is;$/;"	m	struct:__anon9
image	l1_mos_hdf.c	/^static float image   [NS][NP][NBANDS_MOS];$/;"	v	file:
imatrix	nrutil.c	/^int **imatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
imaxarg1	nrutil.h	/^static int imaxarg1,imaxarg2;$/;"	v
imaxarg2	nrutil.h	/^static int imaxarg1,imaxarg2;$/;"	v
imc50	aerosol.c	/^static int   imc50 = -1;$/;"	v	file:
imc70	aerosol.c	/^static int   imc70 = -1;$/;"	v	file:
iminarg1	nrutil.h	/^static int iminarg1,iminarg2;$/;"	v
iminarg2	nrutil.h	/^static int iminarg1,iminarg2;$/;"	v
imm50	aerosol.c	/^static int   imm50 = -1;$/;"	v	file:
imn	atrem_corl1.h	/^    int32_t imn,idy,iyr,ih,im,is;$/;"	m	struct:__anon9
imscale	main_l1mapgen.c	/^static double imscale;$/;"	v	file:
imt90	aerosol.c	/^static int   imt90 = -1;$/;"	v	file:
imt99	aerosol.c	/^static int   imt99 = -1;$/;"	v	file:
in_flags	l1_struc.h	/^    int32_t  *in_flags;$/;"	m	struct:l1_struct
in_prods	l1_struc.h	/^    float **in_prods;$/;"	m	struct:l1_struct
in_prods	l2_struc.h	/^    float **in_prods;$/;"	m	struct:l2_struct
incr1	miscanfill.h	/^    int incr1, incr2; \/* error increments *\/$/;"	m	struct:__anon40
incr2	miscanfill.h	/^    int incr1, incr2; \/* error increments *\/$/;"	m	struct:__anon40
index	l1_hmodis_hdf.c	/^typedef struct { int32_t index; int32_t scandim; char *name; } sdslist;$/;"	m	struct:__anon30	file:
index	l1b_viirs_nc.c	/^typedef struct { size_t index; char *name; } varlist;$/;"	m	struct:__anon28	file:
init	niwa_iop.c	/^static void init(l2str *l2rec)$/;"	f	file:
initBenthicFile	swim.c	/^void initBenthicFile(char* fileName) {$/;"	f
initElevFile	elev.c	/^int initElevFile(char* elevFilename, grid_info_t* elevGrid, int* depth_mode) {$/;"	f
initProduct	get_l2prod_index.c	/^void initProduct(l2prodstr* l2prod) {$/;"	f
init_atrem	get_atrem_corl1.c	/^int init_atrem(int32_t sensorID, paramstr *P, l1str *l1rec, int32_t nbands) {$/;"	f
init_chl	pml_iop_tables.c	/^float b_tilde_w, b_tilde_p, init_chl, eps_a_init, eps_a_init_modis, eps_bb_init;$/;"	v
init_detfill	l1_hmodis_hdf.c	/^void init_detfill(fill_table *fill) {$/;"	f
init_geo	l1_hmodis_hdf.c	/^int init_geo(const char filename[FILENAME_MAX]) {$/;"	f
init_iop_flag	flags_iop.c	/^void init_iop_flag(float32 wave[], int32 nwave, iopfstr *f)$/;"	f
init_l1	init_l1.c	/^void init_l1( l1str *l1rec, int32_t npix, int32_t nbands)$/;"	f
init_l1b	l1_hmodis_hdf.c	/^int init_l1b(const char filename[FILENAME_MAX], int32_t *max_resolution) {$/;"	f
init_l2	init_l2.c	/^void init_l2( l2str *l2rec , int32_t nbands)$/;"	f
init_l2prod	get_l2prod_index.c	/^void init_l2prod() {$/;"	f
init_owmc	get_owmc.c	/^void init_owmc(l2str *l2rec) $/;"	f
init_sst	sst.c	/^void init_sst(l2str *l2rec) {$/;"	f
init_tpvmr	get_atrem_corl1.c	/^int init_tpvmr(int model) {$/;"	f
init_viirs_file	l1b_viirs_nc.c	/^int init_viirs_file(const char filename[FILENAME_MAX],$/;"	f
init_viirs_geofile	l1b_viirs_nc.c	/^int init_viirs_geofile(viirs_file geoinfo) {$/;"	f
init_viirs_l1bfile	l1b_viirs_nc.c	/^int init_viirs_l1bfile(viirs_file l1binfo) {$/;"	f
initbin	bin_climatology.c	/^void initbin(void){$/;"	f
initializeImage	main_l1brsgen.c	/^Image *initializeImage (int32 width, int32 height)$/;"	f
initialize_dem	get_dem_height.c	/^int initialize_dem(char *demfile, int32 *tileid)$/;"	f
initialize_deminfo	get_nc_height.c	/^int initialize_deminfo(char* demfile) {$/;"	f
initialized	pml.c	/^static int initialized = 0;$/;"	v	file:
initialized	qaa.c	/^static int initialized  = 0;$/;"	v	file:
input	filehandle.h	/^    instr     *input;$/;"	m	struct:filehandle_struct
input	l1_struc.h	/^    instr  *input;$/;"	m	struct:l1_struct
input	l2_struc.h	/^    instr  *input;$/;"	m	struct:l2_struct
inputBuffer	l1a_seawifs.c	/^} inputBuffer;$/;"	t	typeref:struct:__anon27	file:
input_filename	lonlat2pixline.h	/^        char input_filename[FILENAME_MAX]; \/**< input filename *\/$/;"	m	struct:lonlat2pixline_struct
input_files	filehandle.h	/^    char      *input_files;$/;"	m	struct:filehandle_struct
input_files	input_struc.h	/^  char   input_files[6144];$/;"	m	struct:input_struct
input_parms	filehandle.h	/^    char      *input_parms;$/;"	m	struct:filehandle_struct
input_parms	input_struc.h	/^  char   input_parms[32768];$/;"	m	struct:input_struct
input_parms	mscal_struc.h	/^    char   *input_parms;$/;"	m	struct:mscal_struct
input_parms	mscal_struc.h	/^    char   input_parms[20000];$/;"	m	struct:calinput_struct
input_struct	input_struc.h	/^typedef struct input_struct {$/;"	s
inputstr	mscal_struc.h	/^} inputstr;$/;"	t	typeref:struct:calinput_struct
inst_tcorr	l1a_seawifs.c	/^float64         inst_tcorr[BANDS_DIMS_1A];$/;"	v
inst_temp	l1_octs_hdf.c	/^static float32 *inst_temp;$/;"	v	file:
inst_temp	l1a_seawifs.c	/^  float32 inst_temp[40];$/;"	m	struct:__anon27	file:
inst_tref	l1a_seawifs.c	/^float64         inst_tref[BANDS_DIMS_1A];$/;"	v
instr	input_struc.h	/^} instr;$/;"	t	typeref:struct:input_struct
instrumentFile	olci.h	/^    char  *geoCoordinatesFile,*tieGeoCoordinatesFile, *tieGeometriesFile,*instrumentFile, *time_coordinatesFile, *tieMeteoFile;$/;"	m	struct:olci_struct
instrumentFileID	l1_olci.c	/^static int32_t olci_sd[MAXOLCI_RADFILES],geoFileID,coordFileID,tcoordFileID,instrumentFileID;$/;"	v	file:
intchl_morel	photic_depth.c	/^void intchl_morel(l2str *l2rec, l2prodstr *p, float *intchl)$/;"	f
intcp	runcal.h	/^	FLOAT32	intcp[3];$/;"	m	struct:__anon45::_runCalEnt
intercept	l1_czcs_hdf.c	/^float32 *tilt, *att_ang, *slope, *intercept;$/;"	v
interleave	aviris.h	/^    int    interleave, eastbyscan;$/;"	m	struct:aviris_struct
interleave	prism.h	/^    int    interleave, eastbyscan;$/;"	m	struct:prism_struct
interp	aerosol.c	/^static int   interp = 0;$/;"	v	file:
interp	pml_iop_tables.c	/^float interp(float *x, float u, int n){$/;"	f
interp_as_tauhigh	par_utils.c	/^float interp_as_tauhigh(float csz) {$/;"	f
interp_as_taulow	par_utils.c	/^float interp_as_taulow(float csz, float tau) {$/;"	f
interp_bilin	l1_hmodis_hdf.c	/^double interp_bilin(double val[4], double dx, double dy) {$/;"	f
interp_dem_height	get_dem_height.c	/^int interp_dem_height(char *demfile,$/;"	f
interp_height	get_height.c	/^static int (*interp_height)(char  *demfile,$/;"	v	file:
interp_l	pml_iop_tables.c	/^float interp_l(float *x, float u, int n){$/;"	f
interp_modis_EVdata	l1_hmodis_hdf.c	/^double interp_modis_EVdata(double val[4], double dx, double dy) {$/;"	f
interp_modis_Longitude	l1_hmodis_hdf.c	/^double interp_modis_Longitude(double val[4], double dx, double dy) {$/;"	f
interp_modis_var	l1_hmodis_hdf.c	/^double (*interp_modis_var)(double val[4], double dx, double dy);$/;"	v
interp_nc_height	get_nc_height.c	/^int interp_nc_height(char *demfile, float *xlon, float *xlat, float *height)$/;"	f
interp_ocm2_geo	l1_ocm2_hdf.c	/^void interp_ocm2_geo(int32 sd_id, int32	nx, int32 ny, char *sdsname, float32 **geo)$/;"	f
interp_tilevalue	get_nc_height.c	/^int interp_tilevalue(tile_struct tile, float lat, float lon, double *result) {$/;"	f
interpol	niwa_iop.c	/^static float interpol(float *v, float *x, float u, int size)$/;"	f	file:
intpos	intpos.f	/^      subroutine intpos(/;"	s
intrvl	rawcal.h	/^    INT32	intrvl;$/;"	m	struct:__anon44
intrvl	runcal.h	/^    INT32	intrvl;$/;"	m	struct:__anon45
invCosSenz	swim.c	/^static double invCosSenz;            \/\/ 1.0\/ cos(sensor_viewing_angle)$/;"	v	file:
invCosSolz	swim.c	/^static double invCosSolz;            \/\/ 1.0 \/ cos(solar_zenith_angle)$/;"	v	file:
invDistInterp	convert_band.c	/^float invDistInterp(ccstr *ctxt,float xout){$/;"	f
invbindx	windex.c	/^int invbindx(int band, int32_t *bindx, int nbands)$/;"	f
inversion_init	calfile_utils.c	/^void inversion_init(long ndets, long iscan, int nbands, long ipix, aestr *aerec,$/;"	f
ioff	get_dem_height.c	/^    int32 ioff;          \/\/ Offset of nominal tile in array$/;"	m	struct:__anon24	file:
iop_model	pml_iop_calculate.c	/^int iop_model(double rho_w[],float sun_theta, float sen_theta, float dphi, double a[],$/;"	f
iop_model1	niwa_iop.c	/^static int iop_model1(float Rrs[], int sensor_id, abs_res_t *result)$/;"	f	file:
iop_opt	input_struc.h	/^  int32_t   iop_opt;        \/* Base IOP model for downstream products   *\/$/;"	m	struct:input_struct
iop_ref	pml_iop_tables.c	/^float iop_ref(float conc, int band, int iop)$/;"	f
iopf	giop.c	/^static int16  *iopf;$/;"	v	file:
iopflagctl_struc	flags_iop.h	/^typedef struct iopflagctl_struc {$/;"	s
iopfstr	flags_iop.h	/^} iopfstr;$/;"	t	typeref:struct:iopflagctl_struc
iops_carder	carder.c	/^void iops_carder(l2str *l2rec)$/;"	f
iops_giop	giop.c	/^void iops_giop(l2str *l2rec)$/;"	f
iops_gsm	gsm.c	/^void iops_gsm(l2str *l2rec)$/;"	f
iops_las	las_iop.c	/^void iops_las(l2str *l2rec)$/;"	f
iops_niwa	get_niwa_iop.c	/^void iops_niwa(l2str *l2rec)$/;"	f
iops_pml	get_pml.c	/^void iops_pml(l2str *l2rec)$/;"	f
iops_qaa	get_qaa.c	/^void iops_qaa(l2str *l2rec)$/;"	f
iops_swim	swim.c	/^void iops_swim(l2str *l2rec) {$/;"	f
irecno	get_dem_height.c	/^    int16 irecno[18338]; \/\/ Record no. for tile (0-base; -1 if not filled)$/;"	m	struct:__anon24	file:
is	atrem_corl1.h	/^    int32_t imn,idy,iyr,ih,im,is;$/;"	m	struct:__anon9
isCoccolith	setflags.c	/^char isCoccolith( l2str *l2rec, int32_t ip )$/;"	f
isLevel1	l1_meris_N1.c	/^static bool         isLevel1;$/;"	v	file:
isTurbid	setflags.c	/^char isTurbid( l2str *l2rec, int32_t ip )$/;"	f
isV5	sst.c	/^static int isV5 = 0;$/;"	v	file:
isV5coef	sst.c	/^void isV5coef(l2str *l2rec) {$/;"	f
is_masked	read9km_mask.c	/^int is_masked(int32_t bin, char *mask, int32_t nrows)$/;"	f
iscan	calfile_utils.h	/^    int16_t  iscan;$/;"	m	struct:cal_struct
iscan	l1_hmodis_hdf.c	/^    int32_t iscan;    \/*< scan number (0-based) *\/$/;"	m	struct:__anon34	file:
iscan	l1_struc.h	/^    int32_t   iscan;$/;"	m	struct:l1_struct
iscan	l2_struc.h	/^    int32_t   iscan;$/;"	m	struct:l2_struct
iscan	mscal_struc.h	/^    int16  *iscan;$/;"	m	struct:mscal_struct
isize	get_dem_height.c	/^    int32 isize;         \/\/ Tile array size$/;"	m	struct:__anon24	file:
ist1	atrem_corl1.h	/^    int32_t ist1,ied1,ist2,ied2,istp94,iedp94;$/;"	m	struct:__anon12
ist1p14	atrem_corl1.h	/^    int32_t ist3,ied3,ist4,ied4,ist1p14,ied1p14;$/;"	m	struct:__anon13
ist2	atrem_corl1.h	/^    int32_t ist1,ied1,ist2,ied2,istp94,iedp94;$/;"	m	struct:__anon12
ist3	atrem_corl1.h	/^    int32_t ist3,ied3,ist4,ied4,ist1p14,ied1p14;$/;"	m	struct:__anon13
ist4	atrem_corl1.h	/^    int32_t ist3,ied3,ist4,ied4,ist1p14,ied1p14;$/;"	m	struct:__anon13
istp94	atrem_corl1.h	/^    int32_t ist1,ied1,ist2,ied2,istp94,iedp94;$/;"	m	struct:__anon12
istrt2	atrem_corl1.h	/^    int32_t istrt2,iend2;$/;"	m	struct:__anon15
itemSize	jplaeriallib.h	/^static const int itemSize = 500;$/;"	v
itemSize	l1_oli.c	/^static const int itemSize = 500;$/;"	v	file:
iter	giop.c	/^static int16  *iter;$/;"	v	file:
iter	gsm.c	/^static int16  *iter;$/;"	v	file:
iter	swim.c	/^static int16 *iter;$/;"	v	file:
iter_a	pml_iop_calculate.c	/^double iter_a(double rho_w,double aw,double bbw,double F,double bb) $/;"	f
iter_a2	pml_iop_calculate.c	/^double iter_a2(double rho_w,double aw,double bbw,double F,double bb) $/;"	f
iter_ab	pml_iop_calculate.c	/^int iter_ab(double rho_w[],double aw[],double bbw[],double F[],double epsb,double epsa, double ab[])$/;"	f
iter_ab2	pml_iop_calculate.c	/^int iter_ab2(double rho_w[],double aw[],double bbw[],double F[],double epsb,double epsa, double ab[])$/;"	f
iter_scale	pml_iop_tables.c	/^double n_min,n_max,iter_scale,clim_spm;$/;"	v
iterate	pml.c	/^static int iterate = 1;$/;"	v	file:
itherm	l1_viirs_h5.c	/^static int32_t itherm = 0;$/;"	v	file:
itsize	get_dem_height.c	/^    int32 itsize;        \/\/ Array size of nominal area$/;"	m	struct:__anon24	file:
iupb	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
ivector	nrutil.c	/^int *ivector(long nl, long nh)$/;"	f
ivswir	l1_viirs_h5.c	/^static int32_t ivswir = 0;$/;"	v	file:
iw410	get_pml.c	/^static int iw410;$/;"	v	file:
iw440	get_pml.c	/^static int iw440;$/;"	v	file:
iw490	get_pml.c	/^static int iw490;$/;"	v	file:
iw510	get_pml.c	/^static int iw510;$/;"	v	file:
iw531	get_pml.c	/^static int iw531;$/;"	v	file:
iw555	get_pml.c	/^static int iw555;$/;"	v	file:
iw670	get_pml.c	/^static int iw670;$/;"	v	file:
iwatab	aerosol.c	/^static int32_t  *iwatab;$/;"	v	file:
iwave	l1_struc.h	/^    int32_t     *iwave ;$/;"	m	struct:l1_struct
iwave	l2_struc.h	/^    int32_t   *iwave;$/;"	m	struct:l2_struct
iwdtab	aerosol.c	/^static int32_t  *iwdtab;$/;"	v	file:
iwnir_l	aerosol.c	/^static int32_t  iwnir_l=-1;$/;"	v	file:
iwnir_s	aerosol.c	/^static int32_t  iwnir_s=-1;$/;"	v	file:
ixAcdm	atmcor_soa.f	/^      INTEGER    ixMi  ,ixMr  ,ixC  ,ixAcdm /;"	v
ixBbp	atmcor_soa.f	/^      INTEGER    ixMi  ,ixMr  ,ixC  ,ixAcdm  ,ixBbp$/;"	v
ixC	atmcor_soa.f	/^      INTEGER    ixMi  ,ixMr  ,ixC /;"	v
ixMi	atmcor_soa.f	/^      INTEGER    ixMi /;"	v
ixMr	atmcor_soa.f	/^      INTEGER    ixMi  ,ixMr /;"	v
iyr	atrem_corl1.h	/^    int32_t imn,idy,iyr,ih,im,is;$/;"	m	struct:__anon9
j	filter.c	/^    int32_t j;$/;"	m	struct:fnode_str	file:
ja	atrem_corl1.h	/^    float wt1,wt2,wt3,wt4,ja;$/;"	m	struct:__anon14
jac	atrem_corl1.h	/^    int32_t jac,jbc;$/;"	m	struct:__anon22
jbc	atrem_corl1.h	/^    int32_t jac,jbc;$/;"	m	struct:__anon22
jctl	l1_generic_write.c	/^static int32_t *jctl;$/;"	v	file:
jctl	l1_hdf_generic_write.c	/^static int32 *jctl;$/;"	v	file:
jctl	l2_generic.c	/^static int32 *jctl;$/;"	v	file:
jd4713bc_get_date	anc_acq.c	/^int jd4713bc_get_date( int64_t jd, int32_t *year, int32_t *month, int32_t *day )$/;"	f
jd4713bc_get_jd	anc_acq.c	/^int64_t jd4713bc_get_jd( int32_t year, int32_t month, int32_t day )$/;"	f
jdif	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
jl	atmcor_soa.f	/^      INTEGER  jl$/;"	v
kLuSen	raman.c	/^static float *kLuSen;       \/\/Diffuse attenuation coefficient of up-welling radiance$/;"	v	file:
k_oz	l1_struc.h	/^    float       *k_oz  ;$/;"	m	struct:l1_struct
k_oz	l2_struc.h	/^    float  *k_oz; \/\/ Ozone cross-sectional area$/;"	m	struct:l2_struct
kappaRam	raman.c	/^static float *kappaRam;$/;"	v	file:
kappaSen	raman.c	/^static float *kappaSen;$/;"	v	file:
kc	las_iop.c	/^  m_array *kc ;$/;"	m	struct:las_table_struc	file:
kd2c	input_struc.h	/^  float   kd2c[6];$/;"	m	struct:input_struct
kd2w	input_struc.h	/^  int32_t kd2w[2];$/;"	m	struct:input_struct
kdRam	raman.c	/^static float *kdRam;         \/\/Diffuse attenuation coefficient at raman bands$/;"	v	file:
kdSen	raman.c	/^static float *kdSen;        \/\/Diffuse attenuation coefficient at sensor bands$/;"	v	file:
kdbad	get_Kd.c	/^static float kdbad = BAD_FLT;$/;"	v	file:
kdist_gas_abs	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE kdist_gas_abs(/;"	s
kdtot	swim.c	/^static float *kdtot;  \/\/ kd value for the scan line kd[pix, band] - diffuse attenuation coefficient$/;"	v	file:
kernel	filter.h	/^    char  *kernel;$/;"	m	struct:filter_struct
ky_airmass	airmass.c	/^float ky_airmass(float theta)$/;"	f
ky_airmass_	airmass.c	/^float ky_airmass_(float *theta)$/;"	f
l1_mask_set	setflags.c	/^void l1_mask_set(l1str *l1rec, int32_t ip)$/;"	f
l1_struct	l1_struc.h	/^typedef struct l1_struct {$/;"	s
l1a_back	l1a_seawifs.c	/^int16   *l1a_back     = NULL;  \/* raw radiances band-int-by-pix    *\/$/;"	v
l1a_data	l1a_osmi.c	/^static int16   *l1a_data     = NULL;  \/* raw radiances band-int-by-pix    *\/$/;"	v	file:
l1a_data	l1a_seawifs.c	/^int16   *l1a_data     = NULL;  \/* raw radiances band-int-by-pix    *\/$/;"	v
l1b	l1_hmodis_hdf.c	/^static modis_sds ref[REF_NUM_SDS], geo[GEO_NUM_SDS], l1b[L1B_NUM_SDS];$/;"	v	file:
l1b	l1b_viirs_nc.c	/^static var_str_nc *l1b[MAXBANDS]; \/* ushort -> float *\/$/;"	v	file:
l1b_buffer	l1a_osmi.c	/^static float   *l1b_buffer   = NULL;  \/* l1b radiances band-int-by-pix    *\/$/;"	v	file:
l1b_buffer	l1a_seawifs.c	/^float   *l1b_buffer   = NULL;  \/* l1b radiances band-int-by-pix    *\/$/;"	v
l1b_coeff	l1_hmodis_hdf.c	/^static const char* l1b_coeff[] = { \/* index with enum L1B_COEFFS *\/$/;"	v	file:
l1b_seawifs	l12_seawifs.c	/^int32 l1b_seawifs(filehandle *l1file, filehandle *ofile, $/;"	f
l1bgen_optionKeys	msl12_input.c	/^static char *l1bgen_optionKeys[] = {$/;"	v	file:
l1bq	l1b_viirs_nc.c	/^static var_str_nc *l1bq[MAXBANDS]; \/* ubyte; name = band+"_quality_flags" *\/$/;"	v	file:
l1brsgen_optionKeys	msl12_input.c	/^static char *l1brsgen_optionKeys[] = {$/;"	v	file:
l1bscn	l1b_viirs_nc.c	/^static var_str_nc *l1bscn[NVARS_L1BSCN];$/;"	v	file:
l1bscn_var	l1b_viirs_nc.c	/^enum l1bscn_var {$/;"	g	file:
l1det2det_optionKeys	msl12_input.c	/^static char *l1det2det_optionKeys[] = {$/;"	v	file:
l1file	l1_mos_hdf.c	/^static char *l1file;                \/* file name *\/$/;"	v	file:
l1mapgen_optionKeys	msl12_input.c	/^static char *l1mapgen_optionKeys[] = {$/;"	v	file:
l1q_struct	l1q_struc.h	/^typedef struct l1q_struct {$/;"	s
l1qstr	l1q_struc.h	/^} l1qstr;$/;"	t	typeref:struct:l1q_struct
l1que	getl1rec.c	/^l1qstr l1que;$/;"	v
l1str	l1_struc.h	/^} l1str;$/;"	t	typeref:struct:l1_struct
l1subpix	l1subpix.c	/^int l1subpix(filehandle *l1file, l1str *l1rec)$/;"	f
l2_flag_lname	l2_flags.h	/^static const char *l2_flag_lname[NFLAGS] = {"ATMFAIL",$/;"	v
l2_flag_sname	l2_flags.h	/^static const char *l2_flag_sname[NFLAGS] = {"f01_name",$/;"	v
l2_flags_buffer	l1a_osmi.c	/^static short l2_flags_buffer[LAC_PIXEL_NUM];$/;"	v	file:
l2_flags_buffer	l1a_seawifs.c	/^short l2_flags_buffer[LAC_PIXEL_NUM];$/;"	v
l2_prod_names	filehandle.h	/^    char      l2_prod_names[MAXPROD][32];$/;"	m	struct:filehandle_struct
l2_seawifs	l12_seawifs.c	/^int32 l2_seawifs(filehandle *l1file, filehandle *l2file)$/;"	f
l2_struct	l2_struc.h	/^typedef struct l2_struct {$/;"	s
l2binmatch_init_options	l2binmatch_input.cpp	/^int l2binmatch_init_options(clo_optionList_t* list) {$/;"	f
l2binmatch_input	l2binmatch_input.cpp	/^int l2binmatch_input(int argc, char **argv, clo_optionList_t* list, instr* input) {$/;"	f
l2binmatch_input_init	l2binmatch_input.cpp	/^int l2binmatch_input_init(instr *input) {$/;"	f
l2binmatch_load_input	l2binmatch_input.cpp	/^int l2binmatch_load_input(clo_optionList_t *list, instr *input) {$/;"	f
l2binmatch_read_options	l2binmatch_input.cpp	/^int l2binmatch_read_options(clo_optionList_t* list, int argc, char* argv[]) {$/;"	f
l2gen_init_options	msl12_input.c	/^int l2gen_init_options(clo_optionList_t* list, const char* prog) {$/;"	f
l2gen_load_input	msl12_input.c	/^int l2gen_load_input(clo_optionList_t *list, instr *input) {$/;"	f
l2gen_optionKeys	msl12_input.c	/^static char *l2gen_optionKeys[] = {$/;"	v	file:
l2gen_read_options	msl12_input.c	/^int l2gen_read_options(clo_optionList_t* list, char* progName,$/;"	f
l2gen_usage	msl12_input.c	/^int l2gen_usage(const char *prog) {$/;"	f
l2prod	filehandle.h	/^    char      l2prod[PRODSTRLEN];  \/* list of L2 products to be included     *\/$/;"	m	struct:filehandle_struct
l2prod	input_struc.h	/^  char      l2prod  [MAX_OFILES][PRODSTRLEN];$/;"	m	struct:input_struct
l2prod_array	get_l2prod_index.c	/^static l2prodstr **l2prod_array = NULL; \/\/ array of pointers to all the products$/;"	v	file:
l2prod_index_struct	l2prod_struc.h	/^typedef struct l2prod_index_struct {$/;"	s
l2prod_num	get_l2prod_index.c	/^static int l2prod_num = 0; \/\/ number of products in the array$/;"	v	file:
l2prod_storage	get_l2prod_index.c	/^static int l2prod_storage = 0; \/\/ size of the array holding the pointers$/;"	v	file:
l2prods	mscal_struc.h	/^    prname *l2prods;$/;"	m	struct:mscal_struct
l2prodstr	l2prod_struc.h	/^} l2prodstr;$/;"	t	typeref:struct:l2prod_index_struct
l2str	l2_struc.h	/^} l2str;$/;"	t	typeref:struct:l2_struct
l3bin_struct	read_l3bin.h	/^typedef struct l3bin_struct {$/;"	s
l3binstr	read_l3bin.h	/^} l3binstr;$/;"	t	typeref:struct:l3bin_struct
l3gen_usage	main_l3gen.cpp	/^void l3gen_usage(char *prog) {$/;"	f
lam	carder.c	/^static int   lam[6];                   \/* seawifs wavelengths                *\/$/;"	v	file:
lamCor1	raman.c	/^static float lamCor1[6] = {412.0, 443.0,488.0, 531.0, 551.0, 667.0};$/;"	v	file:
lambda	gsm.c	/^static float  *lambda ;$/;"	v	file:
lambda	niwa_iop.c	/^static float aw[VBANDS], bbw[VBANDS], lambda[VBANDS];$/;"	v	file:
lambda	pml_iop_tables.c	/^float *lambda,lc[MAX_BANDS],*a_w,*b_w;$/;"	v
lambda	raman.c	/^static float *lambda;             \/\/Sensor wavelengths$/;"	v	file:
lambda	swim.c	/^static int32_t* lambda;		 \/\/array holding wavelengths for this sensor$/;"	v	file:
land	input_struc.h	/^  char   land   [FILENAME_MAX];  \/* Land mask file                   *\/$/;"	m	struct:input_struct
land	l1_struc.h	/^    char   *land;$/;"	m	struct:l1_struct
landMaskOn	l1_struc.h	/^    int32_t   landMaskOn;$/;"	m	struct:l1_struct
land_mask	read_mask.c	/^int land_mask( float lat, float lon ) {$/;"	f
land_mask_init	read_mask.c	/^int land_mask_init(char *file) {$/;"	f
landindex	read_mask.c	/^static int landindex = 0;$/;"	v	file:
landmask	input_struc.h	/^  int32_t   landmask;               \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
landmask_grid	read_mask.c	/^static grid_info_t* landmask_grid = {0};$/;"	v	file:
landnames	read_mask.c	/^static const char* landnames[] = {"watermask", "landmask", "z", NULL};$/;"	v	file:
las_eta_amb	las_iop.c	/^double las_eta_amb(FITSTRUCT *ambdata, double par[])$/;"	f
las_ran	las_iop.c	/^int las_ran(int recnum)$/;"	f
las_table_struc	las_iop.c	/^typedef struct las_table_struc {$/;"	s	file:
lastLat	scene_meta.c	/^static float lastLat      = -999;$/;"	v	file:
lastLon0	scene_meta.c	/^static float lastLon0     = -999;$/;"	v	file:
lastLonN	scene_meta.c	/^static float lastLonN     = -999;$/;"	v	file:
lastScan	l1_viirs_nc.c	/^static int32 lastScan = -1;$/;"	v	file:
lastScan	scene_meta.c	/^static int   lastScan     = -1;$/;"	v	file:
lastScanRun	owt.c	/^static int lastScanRun = -1;$/;"	v	file:
last_access_cnt	b128_msk_get.c	/^  int last_access_cnt;  \/* last access count for this boxes data *\/$/;"	m	struct:box_info_str	file:
last_box_num	b128_msk_get.c	/^static int last_box_num[2] = { -1, -1 };$/;"	v	file:
last_recnum	get_niwa_iop.c	/^static int last_recnum = -1;    $/;"	v	file:
last_table	l1_octs_hdf.c	/^static int16 last_table=0;$/;"	v	file:
lastabstr	las_iop.c	/^} lastabstr;$/;"	t	typeref:struct:las_table_struc	file:
lastvalidscan	l1_olci.c	/^static int lastvalidscan = 0;$/;"	v	file:
lastvalidscan	l1_orca.c	/^static int lastvalidscan = 0;$/;"	v	file:
lastvalidtime	l1_olci.c	/^static double lastvalidtime;$/;"	v	file:
lastvalidtime	l1_orca.c	/^static double lastvalidtime;$/;"	v	file:
lastvalidtime	l1_viirs_nc.c	/^static double lastvalidtime;$/;"	v	file:
lat	l1_aviris.c	/^static double *lat, *lon;$/;"	v	file:
lat	l1_goci.c	/^static double *lat, *lon;$/;"	v	file:
lat	l1_hmodis_hdf.c	/^    float *lat;       \/*< Latitude *\/$/;"	m	struct:__anon34	file:
lat	l1_meris_CC.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
lat	l1_mos_hdf.c	/^static float lat     [NS][NP];$/;"	v	file:
lat	l1_octs_hdf.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
lat	l1_oli.c	/^    double *lat, *lon;$/;"	m	struct:oli_struct	file:
lat	l1_prism.c	/^static double *lat, *lon;$/;"	v	file:
lat	l1_struc.h	/^    float  *lat;$/;"	m	struct:l1_struct
lat	l2_struc.h	/^    float  *lat;$/;"	m	struct:l2_struct
lat	mscal_struc.h	/^    float  *lat;$/;"	m	struct:mscal_struct
lat	olci.h	/^    double *lat, *lon, *elev;$/;"	m	struct:olci_struct
lat	sst.c	/^    float lat[NLATMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
lat	sst.c	/^    float lat[NLATMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
lat0	aviris.h	/^    double *elev,lat0,lon0;$/;"	m	struct:aviris_struct
lat0	olci.h	/^    double lat0,lon0;$/;"	m	struct:olci_struct
lat2row	bin_climatology.c	/^int16 lat2row(double lat){$/;"	f
latId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
lat_rec	scene_meta.c	/^static float lat_rec[10] = $/;"	v	file:
lat_rec_ptr	scene_meta.c	/^static int lat_rec_ptr = 0;$/;"	v	file:
lat_step	anc_acq.c	/^  float lat_step;  \/* latitude incriment *\/$/;"	m	struct:met_sto_str_d	file:
latbin_xkm	read9km_mask.c	/^static float *latbin_xkm;$/;"	v	file:
latitude	atmcor_soa.f	726;"	c	subroutine:SPEC1GEOFIT
latlon2bin	bin_climatology.c	/^int32 latlon2bin(double lat, double lon){$/;"	f
latwin	sst.c	/^static float latwin = 2.5; \/* half the overlap for lat band coeffs *\/$/;"	v	file:
lc	pml_iop_tables.c	/^float *lambda,lc[MAX_BANDS],*a_w,*b_w;$/;"	v
lc1	pml_iop_tables.c	/^double lc1,lc2,log_lc1,e_init;$/;"	v
lc2	pml_iop_tables.c	/^double lc1,lc2,log_lc1,e_init;$/;"	v
ldbg1	l1_aci_hdf.c	/^static int ldbg1 = -1;$/;"	v	file:
leap	viirs_utls.c	/^  double *leap;  \/* seconds to correct TAI - UTC *\/$/;"	m	struct:leap_str_def	file:
leap_str	viirs_utls.c	/^typedef struct leap_str_def leap_str;$/;"	t	typeref:struct:leap_str_def	file:
leap_str_def	viirs_utls.c	/^struct leap_str_def$/;"	s	file:
left	nr.h	/^	unsigned long *icod,*ncod,*left,*right,nch,nodemax;$/;"	m	struct:__anon42
leftLon	swim.c	/^static double leftLon;          \/\/ longitude of benthicProportion[0][0][bottomType]$/;"	v	file:
len	giop.h	/^  double *len;  \/* characteristic length [NBANDS] *\/$/;"	m	struct:giop_ctl_str
length	aer_struc.h	/^    int32_t   length;$/;"	m	struct:aer_struct
length	filehandle.h	/^    int32_t   length;$/;"	m	struct:filehandle_struct
length	filehdr_struc.h	/^    int32_t   length;$/;"	m	struct:filehdr_struct
length	l1_struc.h	/^    int32_t   length;     \/* number of bytes allocated to data block *\/$/;"	m	struct:l1_struct
length	l2_struc.h	/^    int32_t   length;$/;"	m	struct:l2_struct
length	target_struc.h	/^    int32_t   length;$/;"	m	struct:target_struct
length	vcal_struc.h	/^    int32_t   length;$/;"	m	struct:vcal_struct
lenstr	lenstr.f	/^        integer*4 function lenstr(/;"	f
lgain	l1_czcs_hdf.c	/^int lgain,status;$/;"	v
linear_regression	numerical.c	/^void linear_regression(float *slope, float *intercept, float *xs, float *ys, int sample_size)$/;"	f
linesPerScan	l1_octs_hdf.c	/^static int32 linesPerScan;$/;"	v	file:
linscale	l1_imgscale.c	/^BYTE linscale(FLOAT32 x, FLOAT32 minrad, FLOAT32 maxrad)$/;"	f
linscale_old	l1_imgscale.c	/^BYTE linscale_old(FLOAT32 x, int band)$/;"	f
linterp	atrem_app_refl_plus_gas_removal_l2.f90	/^      subroutine linterp(/;"	s
ll2vec	ll2vec.c	/^int ll2vec( float *ll, float *vec )$/;"	f
lmaxarg1	nrutil.h	/^static long lmaxarg1,lmaxarg2;$/;"	v
lmaxarg2	nrutil.h	/^static long lmaxarg1,lmaxarg2;$/;"	v
lminarg1	nrutil.h	/^static long lminarg1,lminarg2;$/;"	v
lminarg2	nrutil.h	/^static long lminarg1,lminarg2;$/;"	v
lnphase	aerosol.c	/^    float  **lnphase;$/;"	m	struct:aermod_struct	file:
lnsrlb	atmcor_soa.f	/^      subroutine lnsrlb(/;"	s
load_aermod	aerosol.c	/^int load_aermod(int32_t sensorID,float wave[],int32_t nwave, char *aermodfile, char models[MAXAERMOD][32], int32_t nmodels)$/;"	f
load_config	pml_iop_tables.c	/^void load_config(char *configfname)$/;"	f
load_fcal_lut	calibrate_viirs.c	/^int load_fcal_lut(char* calfile, int64_t UTC58usec,  double ****ftable) {$/;"	f
load_l12	main_l3gen.cpp	/^void load_l12(int32 nscans, int32 npix, instr *input, l1str *l1rec,$/;"	f
load_l3file_handle	main_l3gen.cpp	/^void load_l3file_handle(instr *input, int filenum, filehandle *file) {$/;"	f
load_modis_scan	l1_hmodis_hdf.c	/^int load_modis_scan(const int32_t iscan,$/;"	f
load_sses_sstv6a	sst.c	/^void load_sses_sstv6a(int32_t sensorID, char *file, ssestabstrv6a *sses) {$/;"	f
load_sses_sstv6mv	sst.c	/^void load_sses_sstv6mv(int32_t sensorID, char *file, ssestabstrv6mv *sses) {$/;"	f
load_tile	get_nc_height.c	/^int load_tile(float lat, float lon) {$/;"	f
load_work_tab	niwa_iop.c	/^static int load_work_tab(void)$/;"	f	file:
load_work_tab	pml_iop_tables.c	/^int load_work_tab(char *configfname, int sensorID)$/;"	f
loadconfig	pml_iop_config.c	/^void loadconfig(char *fname)$/;"	f
loaded	aerosol.c	/^static int   loaded = 0; $/;"	v	file:
loaded	bin_climatology.c	/^static int    loaded[MAXCPROD]     = {0,0,0};$/;"	v	file:
loaded	smi_climatology.c	/^static int   loaded[NPROD];$/;"	v	file:
loadl1	loadl1.c	/^int loadl1( filehandle *l1file, instr *input, l1str *l1rec)$/;"	f
loadl1q	getl1rec.c	/^int loadl1q( filehandle *l1file, instr *input, int32_t iscan, int32_t dscan)$/;"	f
locate	atrem_app_refl_plus_gas_removal_l2.f90	/^      SUBROUTINE locate(/;"	s
log10_of_bbp440_over_No	get_psd_ksm.c	/^float log10_of_bbp440_over_No[449] = { -18.899, -18.9, -18.902, -18.903,$/;"	v
log10_of_bbp440_over_No_sigma_std	get_psd_ksm.c	/^float log10_of_bbp440_over_No_sigma_std[449] = { 0.422, 0.422, 0.422, 0.421,$/;"	v
log_lc1	pml_iop_tables.c	/^double lc1,lc2,log_lc1,e_init;$/;"	v
logscale	l1_imgscale.c	/^BYTE logscale(FLOAT32 val, FLOAT32 min, FLOAT32 max)$/;"	f
lon	l1_aviris.c	/^static double *lat, *lon;$/;"	v	file:
lon	l1_goci.c	/^static double *lat, *lon;$/;"	v	file:
lon	l1_hmodis_hdf.c	/^    float *lon;       \/*< Longitude *\/$/;"	m	struct:__anon34	file:
lon	l1_meris_CC.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
lon	l1_mos_hdf.c	/^static float lon     [NS][NP];$/;"	v	file:
lon	l1_octs_hdf.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
lon	l1_oli.c	/^    double *lat, *lon;$/;"	m	struct:oli_struct	file:
lon	l1_prism.c	/^static double *lat, *lon;$/;"	v	file:
lon	l1_struc.h	/^    float  *lon;$/;"	m	struct:l1_struct
lon	l2_struc.h	/^    float  *lon;$/;"	m	struct:l2_struct
lon	mscal_struc.h	/^    float  *lon;$/;"	m	struct:mscal_struct
lon	olci.h	/^    double *lat, *lon, *elev;$/;"	m	struct:olci_struct
lon0	aviris.h	/^    double *elev,lat0,lon0;$/;"	m	struct:aviris_struct
lon0	olci.h	/^    double lat0,lon0;$/;"	m	struct:olci_struct
lonId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
lon_step	anc_acq.c	/^  float lon_step;  \/* longitude incriment *\/$/;"	m	struct:met_sto_str_d	file:
lonlat2bin	target_io.c	/^int32_t lonlat2bin(l3binstr *l3bin, float lon, float lat) $/;"	f
lonlat2pixline	lonlat2pixline.c	/^int lonlat2pixline(lonlat2pixline_t *params) {$/;"	f
lonlat2pixline1	lonlat2pixline.c	/^int lonlat2pixline1(char *input_filename, char *geo_filename,$/;"	f
lonlat2pixline2	lonlat2pixline.c	/^int lonlat2pixline2(char *input_filename, char *geo_filename,$/;"	f
lonlat2pixline3	lonlat2pixline.c	/^int lonlat2pixline3(char *input_filename, char *geo_filename,$/;"	f
lonlat2pixline_struct	lonlat2pixline.h	/^    typedef struct lonlat2pixline_struct {$/;"	s
lonlat2pixline_t	lonlat2pixline.h	/^    } lonlat2pixline_t;$/;"	t	typeref:struct:lonlat2pixline_struct
lookup_nc_height	get_nc_height.c	/^int lookup_nc_height(char *demfile, float *xlon, float *xlat, float *height)$/;"	f
low_412_thresh	carder.c	/^static double low_412_thresh, low_555_thresh, chl_inconsistent_thresh;$/;"	v	file:
low_555_thresh	carder.c	/^static double low_412_thresh, low_555_thresh, chl_inconsistent_thresh;$/;"	v	file:
lowbit	misc.h	105;"	d
lowerLat	swim.c	/^static double lowerLat;         \/\/ latitude of benthicProportion[numLat-1][0][bottomType]$/;"	v	file:
lowerleft_lat	scene_meta.h	/^  float lowerleft_lat;$/;"	m	struct:scene_meta_str
lowerleft_lon	scene_meta.h	/^  float lowerleft_lon;$/;"	m	struct:scene_meta_str
lowerright_lat	scene_meta.h	/^  float lowerright_lat;$/;"	m	struct:scene_meta_str
lowerright_lon	scene_meta.h	/^  float lowerright_lon;$/;"	m	struct:scene_meta_str
lswapl	misc.h	79;"	d
lswaps	misc.h	85;"	d
lt750	l1_czcs_hdf.c	/^float *lt750;  \/* internal 750 mn data source *\/$/;"	v
lt_intercept	l1_hico_h5.c	/^    float lt_intercept;$/;"	m	struct:hico_private_struct	file:
lt_slope	l1_hico_h5.c	/^    float lt_slope;$/;"	m	struct:hico_private_struct	file:
lubksb	lubksb.c	/^void lubksb(float **a, int n, int *indx, float b[])$/;"	f
ludcmp	ludcmp.c	/^void ludcmp(float **a, int n, int *indx, float *d)$/;"	f
lutLoaded	get_owmc.c	/^static int lutLoaded = 0;$/;"	v	file:
lut_class_34k_w	get_owmc.c	/^static int16_t *lut_class_34k_w;$/;"	v	file:
lut_class_k	get_owmc.c	/^static int16_t *lut_class_k;$/;"	v	file:
lut_class_ward	get_owmc.c	/^static int16_t *lut_class_ward;$/;"	v	file:
lut_nlw_488	get_owmc.c	/^static float   *lut_nlw_488;$/;"	v	file:
lut_nlw_551	get_owmc.c	/^static float   *lut_nlw_551;$/;"	v	file:
lut_num_rows	get_owmc.c	/^static int32_t lut_num_rows = 0;$/;"	v	file:
lut_sst	get_owmc.c	/^static float   *lut_sst;$/;"	v	file:
lvector	nrutil.c	/^unsigned long *lvector(long nl, long nh)$/;"	f
m	l1_octs_hdf.c	/^static float32 m[NOCBANDS], b[NOCBANDS];$/;"	v	file:
m	miscanfill.h	/^    int m, m1;       \/* slope and slope+1 *\/$/;"	m	struct:__anon40
m1	miscanfill.h	/^    int m, m1;       \/* slope and slope+1 *\/$/;"	m	struct:__anon40
mRrs	giop.c	/^static float  *mRrs;$/;"	v	file:
m_array	las_iop.c	/^typedef float m_array[LASNSOL][LASNRC];$/;"	t	file:
m_bfnFarthestNeighbor	KDtree.c	/^   int m_bfnFarthestNeighbor ( KDtree  * Tree, vector  ** tFarthest, vector  * t )$/;"	f
m_bfnFindFarthest	KDtree.c	/^   int m_bfnFindFarthest ( KDtree  * Tree, float  * dRadius, vector  ** tFarthest, vector  * t )$/;"	f
m_bfnNearest	KDtree.c	/^   int m_bfnNearest ( KDtree  * Tree, float  * dRadius, vector  * tClosest, vector  * t )$/;"	f
m_bfnNearestNeighbor	KDtree.c	/^   int m_bfnNearestNeighbor ( KDtree  * Tree, float  dRadius,  vector  * tClosest, vector  * t )$/;"	f
m_dMaxLeft	KDvector.h	/^    float      m_dMaxLeft;          \/* longest distance from the left object to     *\/$/;"	m	struct:KDtree
m_dMaxRight	KDvector.h	/^    float      m_dMaxRight;         \/* longest distance from the right object to    *\/$/;"	m	struct:KDtree
m_dvec	KDvector.h	/^	float m_dvec[3];$/;"	m	struct:v
m_fnInsert	KDtree.c	/^   void m_fnInsert( KDtree **Tree, vector *t )$/;"	f
m_lfnFindInSphere	KDtree.c	/^   int32_t m_lfnFindInSphere ( KDtree  * Tree, float dRadius, vector  ** tClosest, vector  * t )$/;"	f
m_lfnInSphere	KDtree.c	/^   void m_lfnInSphere ( KDtree  * Tree, float dRadius, vector  * t, vector ** tClosest, int32_t  * lReturn )$/;"	f
m_pLeftBranch	KDvector.h	/^    KDtree *   m_pLeftBranch;       \/* tree descending from the left object	    *\/$/;"	m	struct:KDtree
m_pRightBranch	KDvector.h	/^    KDtree *   m_pRightBranch;      \/* tree descending from the right object	    *\/$/;"	m	struct:KDtree
m_pos	KDvector.h	/^	int32_t  m_pos;$/;"	m	struct:v
m_ptLeft	KDvector.h	/^    vector *   m_ptLeft;            \/* left object (of type T) stored in this node  *\/$/;"	m	struct:KDtree
m_ptRight	KDvector.h	/^    vector *   m_ptRight;           \/* right object (of type T) stored in this node *\/$/;"	m	struct:KDtree
main	ftrim.c	/^main()$/;"	f
main	main_l1bgen.c	/^int main(int argc, char *argv[])$/;"	f
main	main_l1brsgen.c	/^int main (int argc, char *argv[])$/;"	f
main	main_l1det2det.c	/^int main (int argc, char* argv[])$/;"	f
main	main_l1info.c	/^int main(int argc, char *argv[]) {$/;"	f
main	main_l1mapgen.c	/^int main(int argc, char *argv[]) {$/;"	f
main	main_l2binmatch.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	main_l2gen.c	/^int main (int argc, char* argv[])$/;"	f
main	main_l3gen.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	main_lonlat2pixline.c	/^int main(int argc, char *argv[])$/;"	f
main	main_vcalmerge.c	/^int main(int argc, char *argv[]) {$/;"	f
main	qaa.c	/^main( int argc, char *argv[] )$/;"	f
mainProgramName	msl12_input.c	/^static char mainProgramName[50];$/;"	v	file:
mainlb	atmcor_soa.f	/^      subroutine mainlb(/;"	s
make_noise	loadl1.c	/^float make_noise(float sigma){$/;"	f
map	smi_climatology.c	/^static uint8 **map [NPROD];$/;"	v	file:
margin	l1_viirs_h5.c	/^static int16_t margin[2]; \/* margin storage *\/$/;"	v	file:
margin_s	l1_struc.h	/^    float margin_s;  \/* extra scan margin beyond actual samples *\/$/;"	m	struct:l1_struct
mask	l1_struc.h	/^    char   *mask;$/;"	m	struct:l1_struct
mask	l2_struc.h	/^    char   *mask;$/;"	m	struct:l2_struct
mask_names	filehandle.h	/^    char      *mask_names;$/;"	m	struct:filehandle_struct
mask_names	input_struc.h	/^  char   mask_names[1024];$/;"	m	struct:input_struct
matrix	nrutil.c	/^float **matrix(long nrl, long nrh, long ncl, long nch)$/;"	f
matrix_mult	l1_czcs_hdf.c	/^void matrix_mult( double vecin[3], double matrix[3][3], double vecout[3] )$/;"	f
matupd	atmcor_soa.f	/^      subroutine matupd(/;"	s
max	l2prod_struc.h	/^    double   max;$/;"	m	struct:l2prod_index_struct
max	minmax.h	13;"	d
max	misc.h	88;"	d
max	sst.c	/^    float max;$/;"	m	struct:stat_struct	file:
maxBands	l1_aviris.c	/^static const int maxBands = 224;$/;"	v	file:
maxBands	l1_oli.c	/^static const int maxBands = 11;$/;"	v	file:
maxBands	l1_prism.c	/^static const int maxBands = 285;$/;"	v	file:
maxReflBands	l1_oli.c	/^static const int maxReflBands = 9;$/;"	v	file:
max_db	pml_iop_tables.c	/^double b_low_init,b_high_init,b_init,delta_b_init,min_db,max_db;$/;"	v
max_iter	pml_iop_tables.c	/^int bp_base,bp_1,bp_2,max_iter,n_bands;$/;"	v
max_npar	giop.c	/^static int16  max_npar;$/;"	v	file:
maxarg1	nrutil.h	/^static float maxarg1,maxarg2;$/;"	v
maxarg2	nrutil.h	/^static float maxarg1,maxarg2;$/;"	v
maxday	l1_octs_hdf.c	/^static int16 maxday;$/;"	v	file:
maxit	pml_iop_tables.c	/^int bp[2], maxit;$/;"	v
maxiter	flags_iop.h	/^    int32 maxiter;$/;"	m	struct:iopflagctl_struc
maxiter	giop.h	/^  int maxiter;         \/* max iterations       *\/$/;"	m	struct:giop_ctl_str
maxpointdist	input_struc.h	/^  float   maxpointdist;     \/* Provide max distance between L1 and L2 pixels $/;"	m	struct:input_struct
maxrat	chl.h	/^static float maxrat = 30.0;$/;"	v
maxreach	KDvector.h	11;"	d
maxval	convert_band.c	/^static float maxval = 10.0*1000;$/;"	v	file:
maxval	get_nc_height.c	/^    double maxval;$/;"	m	struct:__anon25	file:
maxval	get_ndvi.c	/^static float maxval =  1000.0;$/;"	v	file:
maxval	get_poc.c	/^static float maxval = 10.0*1000;$/;"	v	file:
mbcucof	niwa_iop.c	/^static void mbcucof(float y[], float y1[], float y2[], float y12[], float d1, float d2, float *cl)$/;"	f	file:
mc	ice_mask.c	/^static double		slat=0.0, sinslat, tc, mc;$/;"	v	file:
mean	numerical.c	/^float mean(float *xs, int sample_size)$/;"	f
med	sst.c	/^    float med;$/;"	m	struct:stat_struct	file:
mem_space_id	h5io.h	/^   hid_t mem_space_id;  \/* (and freed) if dat_rw_mode = H5IO_DAT_RWSLICE *\/$/;"	m	struct:h5io_str_d
merit	amoeba.h	/^  double merit;$/;"	m	struct:__anon1
merit	gsm.c	/^static float merit;$/;"	v	file:
met1	input_struc.h	/^  char   met1   [FILENAME_MAX];  \/* Meteorological ancillary file    *\/$/;"	m	struct:input_struct
met2	input_struc.h	/^  char   met2   [FILENAME_MAX];  \/* Meteorological ancillary file    *\/$/;"	m	struct:input_struct
met3	input_struc.h	/^  char   met3   [FILENAME_MAX];  \/* Meteorological ancillary file    *\/$/;"	m	struct:input_struct
met_cvt_p_cvt	met_cvt.c	/^double met_cvt_p_cvt( double val, int in_type, int out_type )$/;"	f
met_cvt_q_cvt	met_cvt.c	/^double met_cvt_q_cvt( double val, int in_type, int out_type )$/;"	f
met_cvt_q_to_rh	met_cvt.c	/^int met_cvt_q_to_rh( int nval, float *pres, int p_type, float *temp, $/;"	f
met_cvt_t_cvt	met_cvt.c	/^double met_cvt_t_cvt( double val, int in_type, int out_type )$/;"	f
met_cvt_ttd_to_rh	met_cvt.c	/^int met_cvt_ttd_to_rh( int nval, float *temp, int t_type, float *dwp_temp,$/;"	f
met_sto	anc_acq.c	/^static met_sto_str met_sto[NPRM];$/;"	v	file:
met_sto_str	anc_acq.c	/^typedef struct met_sto_str_d met_sto_str;$/;"	t	typeref:struct:met_sto_str_d	file:
met_sto_str_d	anc_acq.c	/^struct met_sto_str_d {$/;"	s	file:
meta	amoeba.h	/^  void *meta;$/;"	m	struct:__anon1
meta	scene_meta.c	/^static scnstr meta;$/;"	v	file:
metafile	input_struc.h	/^  char      metafile[FILENAME_MAX];$/;"	m	struct:input_struct
mfact	l1_hmodis_hdf.c	/^static float mfact[] = { 0.0, 0.0, 0.0005, 0.0, 0.0, 0.0, 0.0028, 0.00278 };$/;"	v	file:
miCreateETandAET	mipolyutil.c	/^miCreateETandAET(count, pts, ET, AET, pETEs, pSLLBlock)$/;"	f
miFreeStorage	mipolyutil.c	/^miFreeStorage(pSLLBlock)$/;"	f
miInsertEdgeInET	mipolyutil.c	/^miInsertEdgeInET(ET, ETE, scanline, SLLBlock, iSLLBlock)$/;"	f
miInsertionSort	mipolyutil.c	/^miInsertionSort(AET)$/;"	f
micomputeWAET	mipolyutil.c	/^micomputeWAET(AET)$/;"	f
miloadAET	mipolyutil.c	/^miloadAET(AET, ETEs)$/;"	f
min	l2prod_struc.h	/^    double   min;$/;"	m	struct:l2prod_index_struct
min	minmax.h	12;"	d
min	misc.h	87;"	d
min	sst.c	/^    float min;$/;"	m	struct:stat_struct	file:
min_db	pml_iop_tables.c	/^double b_low_init,b_high_init,b_init,delta_b_init,min_db,max_db;$/;"	v
min_wl	water.c	/^static int    min_wl = MINAWTAB;$/;"	v	file:
minarg1	nrutil.h	/^static float minarg1,minarg2;$/;"	v
minarg2	nrutil.h	/^static float minarg1,minarg2;$/;"	v
minfill	filter.h	/^    int32_t   minfill;$/;"	m	struct:filter_struct
minint	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
minmax_h	minmax.h	10;"	d
minor	miscanfill.h	/^    int minor;         \/* minor axis        *\/$/;"	m	struct:__anon40
minrat	chl.h	/^static float minrat = 0.21;$/;"	v
minreach	KDvector.h	10;"	d
minute	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
minval	convert_band.c	/^static float minval = 0.0;$/;"	v	file:
minval	get_nc_height.c	/^    double minval;$/;"	m	struct:__anon25	file:
minval	get_ndvi.c	/^static float minval = -1000.0;$/;"	v	file:
minval	get_poc.c	/^static float minval =  0.0;$/;"	v	file:
mirror	l1a_osmi.c	/^static float32			egain[8], temps[8], mirror[8];$/;"	v	file:
miss_qual	l1_octs_hdf.c	/^static int16 *miss_qual;$/;"	v	file:
mldbad	get_mld.c	/^static float mldbad = BAD_FLT;$/;"	v	file:
mnbrak	numerical.c	/^void mnbrak(float *ax, float *bx, float *cx, float *fa, float *fb, float *fc, float (*func)(float))$/;"	f
mnorm	l1_hmodis_hdf.c	/^    double mnorm[3];  \/*< T_inst2ECR (need only 1st 3 values) *\/$/;"	m	struct:__anon34	file:
mod_iter	pml_iop_calculate.c	/^int mod_iter(double rho_w[],float sun_theta, float sen_theta, float dphi, float eps_a, double a[], double bb[], int MODIS, int CASEII)$/;"	f
mod_max	aer_struc.h	/^    int32_t   *mod_max;$/;"	m	struct:aer_struct
mod_min	aer_struc.h	/^    int32_t   *mod_min;$/;"	m	struct:aer_struct
mod_rat	aer_struc.h	/^    float  *mod_rat;$/;"	m	struct:aer_struct
mode	aer_struc.h	/^    int32_t   mode;$/;"	m	struct:aer_struct
mode	filehandle.h	/^    int32_t   mode;$/;"	m	struct:filehandle_struct
mode	input_struc.h	/^  int32_t   mode;           \/* 0: Forward processing only               *\/$/;"	m	struct:input_struct
mode	target_struc.h	/^    int32_t   mode;$/;"	m	struct:target_struct
model	aerosol.c	/^    aermodstr **model;$/;"	m	struct:aermodtab_struct	file:
model	atrem_corl1.h	/^    int model;$/;"	m	struct:param_table
model	atrem_corl1.h	/^    int32_t nb,nl,model,iaer; \/\/iaer not used because call to ssssss routine commented out in fortran code$/;"	m	struct:__anon4
model_epsilon	aerosol.c	/^float *model_epsilon(int modnum, int32_t iwnir_l, float wave[], int32_t nwave, float solz, float senz, float phi)$/;"	f
model_phase	aerosol.c	/^float *model_phase(int modnum, float solz, float senz, float phi)$/;"	f
model_select_ahmad	aerosol.c	/^void  model_select_ahmad(int32_t nmodels, int32_t *mindx, float eps_pred[], float eps_obs, int32_t *modmin,$/;"	f
model_select_angstrom	aerosol.c	/^void model_select_angstrom(float angstrom, int32_t *modmin, int32_t *modmax, float *modrat)$/;"	f
model_select_franz	aerosol.c	/^int model_select_franz(int32_t sensorID, float wave[], int32_t nwave, int32_t nmodel, int32_t mindx[],$/;"	f
model_select_wang	aerosol.c	/^int model_select_wang(int32_t sensorID, float wave[], int32_t nwave, int32_t nmodel, int32_t mindx[],$/;"	f
model_taua	aerosol.c	/^void model_taua(int32_t sensorID, int modnum, float wave[], int32_t nwave, int32_t iwnir_l, float rhoa[], $/;"	f
model_transmittance	aerosol.c	/^void model_transmittance(int modnum, float wave[], int32_t nwave, $/;"	f
modis_cirrus_mask	cloud_flag.c	/^int modis_cirrus_mask(l1str *l1rec, int32_t ip)$/;"	f
modis_cloud_mask	cloud_flag.c	/^int modis_cloud_mask(l1str *l1rec, int32_t ip)$/;"	f
modis_file	l1_hmodis_hdf.c	/^} modis_file;$/;"	t	typeref:struct:__anon31	file:
modis_interp	l1_hmodis_hdf.c	/^int modis_interp(const modis_sds s,$/;"	f
modis_map	niwa_iop.c	/^static const int modis_map[VBANDS]   = {0, 1, 2, 3, 4, 5};$/;"	v	file:
modis_sds	l1_hmodis_hdf.c	/^} modis_sds;$/;"	t	typeref:struct:__anon32	file:
modis_subset_compat	filehandle.h	/^    int       modis_subset_compat; \/* force modis file to be read as subsetted *\/$/;"	m	struct:filehandle_struct
modis_subset_compat	input_struc.h	/^  int       modis_subset_compat; \/* force modis file to be read as subsetted *\/$/;"	m	struct:input_struct
modnum	aerosol.c	/^    int32_t   modnum; $/;"	m	struct:alphaT_struct	file:
modnum	aerosol.c	/^    int32_t   modnum;$/;"	m	struct:epsilonT_struct	file:
modnum	aerosol.c	/^    int32_t   modnum;$/;"	m	struct:rhoaT_struct	file:
modpath_1km	l1_hmodis_hdf.c	/^int modpath_1km(const char *oldpath, const char* newchars, char* newpath) {$/;"	f
modulus	misc.h	97;"	d
mon	viirs_utls.c	/^  int16_t *mon;  \/* runs 0 - 11 *\/$/;"	m	struct:leap_str_def	file:
month	aviris.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:aviris_struct
month	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
month	olci.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:olci_struct
month	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
morel_index	brdf.c	/^int morel_index(float xtab[], int32_t ntab, float x) $/;"	f
mph_flag_lname	mph_flags.h	/^static const char *mph_flag_lname[NMPHFLAGS] = {"FLOAT",$/;"	v
ms1_const	l1a_seawifs.c	/^float64         ms1_const[BANDS_DIMS_1A];$/;"	v
ms1_exponential_1	l1a_seawifs.c	/^float64         ms1_exponential_1[BANDS_DIMS_1A];$/;"	v
ms1_exponential_2	l1a_seawifs.c	/^float64         ms1_exponential_2[BANDS_DIMS_1A];$/;"	v
ms1_linear_1	l1a_seawifs.c	/^float64         ms1_linear_1[BANDS_DIMS_1A];$/;"	v
ms1_linear_2	l1a_seawifs.c	/^float64         ms1_linear_2[BANDS_DIMS_1A];$/;"	v
ms2_const	l1a_seawifs.c	/^float64         ms2_const[BANDS_DIMS_1A];$/;"	v
ms2_exponential_1	l1a_seawifs.c	/^float64         ms2_exponential_1[BANDS_DIMS_1A];$/;"	v
ms2_exponential_2	l1a_seawifs.c	/^float64         ms2_exponential_2[BANDS_DIMS_1A];$/;"	v
ms2_linear_1	l1a_seawifs.c	/^float64         ms2_linear_1[BANDS_DIMS_1A];$/;"	v
ms2_linear_2	l1a_seawifs.c	/^float64         ms2_linear_2[BANDS_DIMS_1A];$/;"	v
ms_eps_coef	aerosol.c	/^void ms_eps_coef(int modnum, int32_t iwnir_l, float wave[], float solz, float senz, float phi, $/;"	f
mscal_struct	mscal_struc.h	/^typedef struct mscal_struct {$/;"	s
mscalstr	mscal_struc.h	/^} mscalstr;$/;"	t	typeref:struct:mscal_struct
msec	aviris.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:aviris_struct
msec	calfile_utils.h	/^    int32_t  msec;$/;"	m	struct:cal_struct
msec	l1_czcs_hdf.c	/^int32   *msec;$/;"	v
msec	l1_meris_CC.c	/^static int         year, day, msec;$/;"	v	file:
msec	l1_meris_N1.c	/^static int         year, day, msec;$/;"	v	file:
msec	l1_ocmdb_hdf.c	/^static int32_t year, day, msec;$/;"	v	file:
msec	l1_octs_hdf.c	/^static int32 msec[MAXOCLIN];$/;"	v	file:
msec	l1_oli.c	/^    int32_t year, doy, msec;$/;"	m	struct:oli_struct	file:
msec	l1_struc.h	/^    int32_t   *msec;$/;"	m	struct:l1_struct
msec	l1a_osmi.c	/^static int32   *msec;$/;"	v	file:
msec	l1a_seawifs.c	/^int32   *msec;$/;"	v
msec	l2_struc.h	/^    int32_t   *msec;$/;"	m	struct:l2_struct
msec	mscal_struc.h	/^    int32  *msec;$/;"	m	struct:mscal_struct
msec	olci.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:olci_struct
msec	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
msec	target_struc.h	/^    int32_t   *msec;$/;"	m	struct:target_struct
msec_start	l1_octs_hdf.c	/^static int32 msec_start;$/;"	v	file:
msecarr	l1_mos_hdf.c	/^static int32_t  msecarr [NS];$/;"	v	file:
mside	calfile_utils.h	/^    uint8_t  mside;$/;"	m	struct:cal_struct
mside	l1_hmodis_hdf.c	/^    int32_t mside;    \/*< Mirror side *\/$/;"	m	struct:__anon34	file:
mside	l1_struc.h	/^    int32_t   mside;$/;"	m	struct:l1_struct
mside	l2_struc.h	/^    int32_t   mside;$/;"	m	struct:l2_struct
mside	mscal_struc.h	/^    uint8  *mside;$/;"	m	struct:mscal_struct
msl12_input	msl12_input.c	/^int msl12_input(int argc, char *argv[], const char* progName, instr *input, filehandle *l1file) {$/;"	f
msl12_input_defaults	msl12_input.c	/^int msl12_input_defaults(filehandle *l1file, instr *input) {$/;"	f
msl12_input_init	msl12_input.c	/^void msl12_input_init(instr *input) {$/;"	f
msl12_input_nbands_init	msl12_input.c	/^void msl12_input_nbands_init(instr *input) {$/;"	f
msl12_option_input	msl12_input.c	/^int msl12_option_input(int argc, char **argv, clo_optionList_t* list,$/;"	f
mu	aerosol.c	/^static float mu;$/;"	v	file:
mu0	aerosol.c	/^static float mu0;$/;"	v	file:
mu0	atmcor_soa.f	/^      REAL     aerwatRho(NLAMBDA),F0(NLAMBDA),mu0,/;"	v
mumm_alpha	input_struc.h	/^  float   mumm_alpha;             $/;"	m	struct:input_struct
mumm_epsilon	input_struc.h	/^  float   mumm_epsilon;            $/;"	m	struct:input_struct
mumm_gamma	input_struc.h	/^  float   mumm_gamma;             $/;"	m	struct:input_struct
mw	l1_struc.h	/^    float  *mw;$/;"	m	struct:l1_struct
mw	l2_struc.h	/^    float  *mw; \/\/meridonal wind vector$/;"	m	struct:l2_struct
myprod1	myprod.c	/^void myprod1 (l2str *l2rec, float prod[])$/;"	f
myprod10	myprod.c	/^void myprod10(l2str *l2rec, float prod[])$/;"	f
myprod2	myprod.c	/^void myprod2 (l2str *l2rec, float prod[])$/;"	f
myprod3	myprod.c	/^void myprod3 (l2str *l2rec, float prod[])$/;"	f
myprod4	myprod.c	/^void myprod4 (l2str *l2rec, float prod[])$/;"	f
myprod5	myprod.c	/^void myprod5 (l2str *l2rec, float prod[])$/;"	f
myprod6	myprod.c	/^void myprod6 (l2str *l2rec, float prod[])$/;"	f
myprod7	myprod.c	/^void myprod7 (l2str *l2rec, float prod[])$/;"	f
myprod8	myprod.c	/^void myprod8 (l2str *l2rec, float prod[])$/;"	f
myprod9	myprod.c	/^void myprod9 (l2str *l2rec, float prod[])$/;"	f
n	gsm.c	/^  size_t n;$/;"	m	struct:datastruct	file:
n2o	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
nBandPairs	bioOptBandShift.c	/^    int nBandPairs;$/;"	m	struct:_context	file:
nLw	l2_struc.h	/^    float  *nLw; \/\/ normalized water-leaving radiance$/;"	m	struct:l2_struct
nLw	target_struc.h	/^    float  *nLw;$/;"	m	struct:target_struct
nLw	vcal_struc.h	/^    float  *nLw;$/;"	m	struct:vcal_struct
nLw_unc	l2_struc.h	/^    float  *nLw_unc;$/;"	m	struct:l2_struct
n_bands	pml_iop_tables.c	/^int bp_base,bp_1,bp_2,max_iter,n_bands;$/;"	v
n_init	pml_iop_tables.c	/^float tol_n,tol_b,n_init;$/;"	v
n_inprods	filehandle.h	/^    int32     n_inprods;$/;"	m	struct:filehandle_struct
n_inprods	l1_struc.h	/^    int32_t   n_inprods;$/;"	m	struct:l1_struct
n_max	pml_iop_tables.c	/^double n_min,n_max,iter_scale,clim_spm;$/;"	v
n_min	pml_iop_tables.c	/^double n_min,n_max,iter_scale,clim_spm;$/;"	v
n_records	bin_climatology.c	/^static int32  n_records;$/;"	v	file:
n_sds	l1_hmodis_hdf.c	/^    int32_t n_sds;      \/*< number of science data sets loaded *\/$/;"	m	struct:__anon31	file:
naermodels	input_struc.h	/^  int32_t   naermodels;$/;"	m	struct:input_struct
name	aerosol.c	/^    char  name[32];$/;"	m	struct:aermod_struct	file:
name	filehandle.h	/^    char      name[FILENAME_MAX];$/;"	m	struct:filehandle_struct
name	l1_hmodis_hdf.c	/^typedef struct { int32_t index; int32_t scandim; char *name; } sdslist;$/;"	m	struct:__anon30	file:
name	l1b_viirs_nc.c	/^typedef struct { size_t index; char *name; } varlist;$/;"	m	struct:__anon28	file:
name_prefix	l2prod_struc.h	/^    char    name_prefix[UNITLEN];$/;"	m	struct:l2prod_index_struct
name_suffix	l2prod_struc.h	/^    char    name_suffix[UNITLEN];$/;"	m	struct:l2prod_index_struct
nap	giop.c	/^static float  *nap;$/;"	v	file:
native_typ	h5io.h	/^   hid_t native_typ;  \/* needed for repeated I\/O *\/$/;"	m	struct:h5io_str_d
natot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:__anon16
natot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:param_table
nav	l1b_viirs_nc.c	/^static var_str_nc *nav[NVARS_NAV]; \/* read on initialization *\/$/;"	v	file:
nav_var	l1b_viirs_nc.c	/^enum nav_var {$/;"	g	file:
navfail	l1_struc.h	/^    char   *navfail;$/;"	m	struct:l1_struct
navigation	l1_octs_hdf.c	/^int navigation(int32 fileID)$/;"	f
navigation_meris	l1_meris_CC.c	/^int navigation_meris(int32 fileID)$/;"	f
navwarn	l1_struc.h	/^    char   *navwarn;$/;"	m	struct:l1_struct
nb	atrem_corl1.h	/^    int32_t nb,nl,model,iaer; \/\/iaer not used because call to ssssss routine commented out in fortran code$/;"	m	struct:__anon4
nb1	atrem_corl1.h	/^    int32_t nb1,nb2,nb3,nb4;$/;"	m	struct:param_table
nb1	atrem_corl1.h	/^    int32_t nb1,nb2,nbp94,nb3,nb4,nb1p14;$/;"	m	struct:__anon8
nb1p14	atrem_corl1.h	/^    int32_t nb1,nb2,nbp94,nb3,nb4,nb1p14;$/;"	m	struct:__anon8
nb1p14	atrem_corl1.h	/^    int32_t nbp94, nb1p14;$/;"	m	struct:param_table
nb2	atrem_corl1.h	/^    int32_t nb1,nb2,nb3,nb4;$/;"	m	struct:param_table
nb2	atrem_corl1.h	/^    int32_t nb1,nb2,nbp94,nb3,nb4,nb1p14;$/;"	m	struct:__anon8
nb3	atrem_corl1.h	/^    int32_t nb1,nb2,nb3,nb4;$/;"	m	struct:param_table
nb3	atrem_corl1.h	/^    int32_t nb1,nb2,nbp94,nb3,nb4,nb1p14;$/;"	m	struct:__anon8
nb4	atrem_corl1.h	/^    int32_t nb1,nb2,nb3,nb4;$/;"	m	struct:param_table
nb4	atrem_corl1.h	/^    int32_t nb1,nb2,nbp94,nb3,nb4,nb1p14;$/;"	m	struct:__anon8
nband	pml_iop_tables.c	/^int32_t nband, ch_n, sp_n, od_n;$/;"	v
nband	xcal.c	/^static int nband = 0;$/;"	v	file:
nbandVis	raman.c	/^static int32_t nbandVis;          \/\/Number of visible bands$/;"	v	file:
nbandVis	swim.c	/^static int32_t nbandVis;         \/\/number of visible bands for a given sensor$/;"	v	file:
nband_vc	bioOptBandShift.c	/^static int nband_vc = 7;$/;"	v	file:
nbands	aviris.h	/^    int     nbands;                       \/**< number of visible bands in AVIRIS      *\/$/;"	m	struct:aviris_l1b_t
nbands	filehandle.h	/^    int32_t   nbands;$/;"	m	struct:filehandle_struct
nbands	get_qaa.c	/^static int nbands;           \/* number of bands computed for line       *\/$/;"	v	file:
nbands	gsm.c	/^static int32_t   nbands;$/;"	v	file:
nbands	input_struc.h	/^  int32_t   nbands;$/;"	m	struct:input_struct
nbands	l1_hmodis_hdf.c	/^    int32_t nbands;     \/*< number of bands in this SDS *\/$/;"	m	struct:__anon32	file:
nbands	l1_hmodis_hdf.c	/^    int32_t nbands;   \/*< number of bands *\/$/;"	m	struct:__anon34	file:
nbands	l1_struc.h	/^    int32_t   nbands;$/;"	m	struct:l1_struct
nbands	l2_struc.h	/^    int32_t   nbands;$/;"	m	struct:l2_struct
nbands	mscal_struc.c	/^static int32_t nbands;$/;"	v	file:
nbands	mscal_struc.h	/^    int32_t   nbands;$/;"	m	struct:mscal_struct
nbands	niwa_iop.c	/^static int nbands; $/;"	v	file:
nbands	prism.h	/^    int     nbands;                       \/**< number of visible bands in prism      *\/$/;"	m	struct:prism_l1b_t
nbands	seawater_get.c	/^static int32_t nbands;$/;"	v	file:
nbands	vcal.c	/^static int32_t     nbands = -1;$/;"	v	file:
nbands	vcal_struc.h	/^    int32_t   nbands;$/;"	m	struct:vcal_struct
nbandsir	filehandle.h	/^    int32_t   nbandsir;$/;"	m	struct:filehandle_struct
nbandsir	l1_struc.h	/^    int32_t   nbandsir;$/;"	m	struct:l1_struct
nbandsir	l2_struc.h	/^    int32_t   nbandsir;$/;"	m	struct:l2_struct
nbins	read_l3bin.h	/^    int32_t   nbins;$/;"	m	struct:l3bin_struct
nbir	sst.c	/^static int nbir = -1;$/;"	v	file:
nbnd	brightness.c	/^static int16 nbnd;$/;"	v	file:
nbp94	atrem_corl1.h	/^    int32_t nb1,nb2,nbp94,nb3,nb4,nb1p14;$/;"	m	struct:__anon8
nbp94	atrem_corl1.h	/^    int32_t nbp94, nb1p14;$/;"	m	struct:param_table
nbtot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:__anon16
nbtot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:param_table
nbvis	sst.c	/^static int nbvis = -1;$/;"	v	file:
nc	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
ncfile	swim.c	/^static int ncfile;              \/\/ netCDF file ID$/;"	v	file:
nch	nr.h	/^	unsigned long *icod,*ncod,*left,*right,nch,nodemax;$/;"	m	struct:__anon42
nch	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
ncio_dim_siz	ncio.c	/^int ncio_dim_siz( int ncid, char *dim_nm )$/;"	f
ncio_grab_f_ds	ncio.c	/^int ncio_grab_f_ds( int ncid, char *ds_name, float *data )$/;"	f
ncio_grab_stdsclf_ds	ncio.c	/^int ncio_grab_stdsclf_ds( int ncid, char *ds_name, float fill, float *data )$/;"	f
nclass	owt.c	/^static int   nclass = NCLASSES;$/;"	v	file:
ncod	nr.h	/^	unsigned long *icod,*ncod,*left,*right,nch,nodemax;$/;"	m	struct:__anon42
ncol	l1_meris_CC.c	/^static int ncol;               $/;"	v	file:
ncol	l1_nc_generic_read.c	/^static int ncol;$/;"	v	file:
ncol	l1_octs_hdf.c	/^static int ncol;               $/;"	v	file:
ncol	l1_orca.c	/^static int ncol;$/;"	v	file:
ncols	get_dem_height.c	/^    int16 ncols[121];    \/\/ Number of tiles in each row$/;"	m	struct:__anon24	file:
ncols	get_nc_height.c	/^    size_t ncols[TILE_ROWS];$/;"	m	struct:__anon26	file:
nctl	l1_generic_write.c	/^static int32_t nctl;$/;"	v	file:
nctl	l1_hdf_generic_write.c	/^static int32 nctl; $/;"	v	file:
nctl	l2_generic.c	/^static int32 nctl; $/;"	v	file:
nctl_pt	l1_czcs_hdf.c	/^int32 nctl_pt, *ctl_pt_cols;$/;"	v
nctot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:__anon16
nctot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:param_table
ncum	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
ncumfq	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
ncut	viirs_utls.c	/^  int ncut;  \/* number of cutoff times in the file *\/$/;"	m	struct:leap_str_def	file:
ncv2	atrem_corl1.h	/^    float ncv2,ncvhf2,ncvtt2;$/;"	m	struct:__anon15
ncv2	atrem_corl1.h	/^    int32_t ncv2;$/;"	m	struct:param_table
ncvhf2	atrem_corl1.h	/^    float ncv2,ncvhf2,ncvtt2;$/;"	m	struct:__anon15
ncvtt2	atrem_corl1.h	/^    float ncv2,ncvhf2,ncvtt2;$/;"	m	struct:__anon15
ndet	brightness.c	/^static int16 ndet;$/;"	v	file:
ndets	filehandle.h	/^    int32_t   ndets;$/;"	m	struct:filehandle_struct
ndets	l1_hmodis_hdf.c	/^    int32_t ndets;      \/*< 10, 20 or 40 detectors *\/$/;"	m	struct:__anon32	file:
ndets	l1_hmodis_hdf.c	/^    int32_t ndets; \/*< number of detectors at native resolution *\/$/;"	m	struct:__anon36	file:
ndets	l1_struc.h	/^    int32_t   ndets;$/;"	m	struct:l1_struct
ndets	l2_struc.h	/^    int32_t   ndets;$/;"	m	struct:l2_struct
ndiff	sst.c	/^    int ndiff;$/;"	m	struct:ssestab_structv6a	file:
ndiff	sst.c	/^    int ndiff;$/;"	m	struct:ssestab_structv6mv	file:
ndtot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:__anon16
ndtot	atrem_corl1.h	/^    int32_t natot,nbtot,nctot,ndtot;$/;"	m	struct:param_table
near	l1_viirs_h5.c	23;"	d	file:
nearest_bin	bin_climatology.c	/^int32 nearest_bin(int32 bin_num)$/;"	f
neq	get_dem_height.c	/^    int32 neq;           \/\/ Number of tiles in equatorial row$/;"	m	struct:__anon24	file:
newKDtree	KDtree.c	/^void newKDtree( KDtree **Tree )$/;"	f
newVector	KDtree.c	/^void newVector ( vector  * v )$/;"	f
newavhrrcal	input_struc.h	/^  int32_t      newavhrrcal;  \/* new avhrr calibration equation *\/$/;"	m	struct:input_struct
next	l1_hmodis_hdf.c	/^    int32_t *next; \/*< next valid detector for each detector *\/$/;"	m	struct:__anon36	file:
next	mipoly.h	/^     struct _EdgeTableEntry *next;       \/* next in the list     *\/$/;"	m	struct:_EdgeTableEntry	typeref:struct:_EdgeTableEntry::_EdgeTableEntry
next	mipoly.h	/^     struct _ScanLineList *next;  \/* next in the list       *\/$/;"	m	struct:_ScanLineList	typeref:struct:_ScanLineList::_ScanLineList
next	mipoly.h	/^     struct _ScanLineListBlock *next;$/;"	m	struct:_ScanLineListBlock	typeref:struct:_ScanLineListBlock::_ScanLineListBlock
nextWETE	mipoly.h	/^     struct _EdgeTableEntry *nextWETE;   \/* for winding num rule *\/$/;"	m	struct:_EdgeTableEntry	typeref:struct:_EdgeTableEntry::_EdgeTableEntry
nfiles	mscal_struc.h	/^    int32_t   nfiles;$/;"	m	struct:mscal_struct
nfilt	filter.h	/^    int32_t   nfilt;$/;"	m	struct:filter_ctl_struct
nframes	l1_hmodis_hdf.c	/^    int32_t nframes;    \/*< 1KM frames; usually 1354 *\/$/;"	m	struct:__anon32	file:
nftiles	get_dem_height.c	/^    int32 nftiles;       \/\/ Number of filled tiles$/;"	m	struct:__anon24	file:
nfunc	amoeba.h	/^  short int nfunc;$/;"	m	struct:__anon1
nh2o	atrem_corl1.h	/^    int32_t nh2o;  \/* number of water vapor values *\/$/;"	m	struct:param_table
nh2o	atrem_corl1.h	/^    int32_t nh2o;$/;"	m	struct:__anon11
ninc	l1_czcs_hdf.c	/^int32           ninc;$/;"	v
ninc	l1a_osmi.c	/^static int32           ninc;$/;"	v	file:
ninc	l1a_seawifs.c	/^int32           ninc;$/;"	v
niter	amoeba.h	/^  int niter;$/;"	m	struct:__anon1
niwa_a	get_niwa_iop.c	/^static float *niwa_a;           \/* absorption coefficient per band and pixel *\/$/;"	v	file:
niwa_bb	get_niwa_iop.c	/^static float *niwa_bb;          \/* backscatter coefficient per band and pixel *\/$/;"	v	file:
niwa_iop	niwa_iop.c	/^void niwa_iop(l2str *l2rec, float niwa_a[], float niwa_bb[], int16 niwa_iopf[])$/;"	f
niwa_iopf	get_niwa_iop.c	/^static int16 *niwa_iopf;        \/* iop flags per pixel *\/$/;"	v	file:
niwa_ran	get_niwa_iop.c	/^static int niwa_ran(int recnum)$/;"	f	file:
nkc	las_iop.c	/^  int nkc;$/;"	m	struct:las_table_struc	file:
nl	atrem_corl1.h	/^    int32_t nb,nl,model,iaer; \/\/iaer not used because call to ssssss routine commented out in fortran code$/;"	m	struct:__anon4
nlat	anc_acq.c	/^  int nlat;  \/* convenience - # latitude points  *\/$/;"	m	struct:met_sto_str_d	file:
nlat	sst.c	/^    int nlat;$/;"	m	struct:ssestab_structv6a	file:
nlat	sst.c	/^    int nlat;$/;"	m	struct:ssestab_structv6mv	file:
nline	l1_meris_CC.c	/^static int16 nline, npix;$/;"	v	file:
nline	l1_nc_generic_read.c	/^static int16 nline, npix;$/;"	v	file:
nline	l1_octs_hdf.c	/^static int16 year, day, nline, npix, sline, spix;$/;"	v	file:
nline	l1_olci.c	/^static int16 nline, npix;$/;"	v	file:
nline	l1_orca.c	/^static int16 nline, npix;$/;"	v	file:
nline	l1_viirs_nc.c	/^static int nscan, nline, npix;$/;"	v	file:
nlines	l1_hmodis_hdf.c	/^    int32_t nlines;     \/*< (nscans*ndets) *\/$/;"	m	struct:__anon31	file:
nlines	l1b_viirs_nc.c	/^    size_t nlines;$/;"	m	struct:__anon29	file:
nlon	anc_acq.c	/^  int nlon;   \/* convenience - # longitude points  *\/$/;"	m	struct:met_sto_str_d	file:
nlsst	sst.c	/^float nlsst(float Bt11, float Bt12, l2str *l2rec, float sstref,$/;"	f
nlsst3	sst.c	/^float nlsst3(float Bt37, float Bt11, float Bt12, l2str *l2rec, float sstref,$/;"	f
nlsst4	sst.c	/^float nlsst4(float Bt39, float Bt40, l2str *l2rec, float bounds[6][2],$/;"	f
nlw_outband	nlw_outband.c	/^void nlw_outband(int32_t evalmask, int32_t sensorID, float wave[], int32_t nwave, float Lw[], float nLw[])$/;"	f
nlwmin	input_struc.h	/^  float  nlwmin;                 \/* min nlw 555 for low lw flagging  *\/$/;"	m	struct:input_struct
nlws	main_l1det2det.c	/^float  ***aots, ***nlws; \/\/arrays to contain the values needed to avg over for inversion$/;"	v
nlws	main_l2binmatch.cpp	/^float ***aots, ***nlws; \/\/arrays to contain the values needed to avg over for inversion$/;"	v
nlws	main_vcalmerge.c	/^float ***aots, ***nlws; \/\/arrays to contain the values needed to avg over for inversion$/;"	v
nmodel	aerosol.c	/^    int32_t   nmodel;$/;"	m	struct:aermodtab_struct	file:
no2	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
no2_frac	l1_struc.h	/^    float  *no2_frac;$/;"	m	struct:l1_struct
no2_frac	l2_struc.h	/^    float  *no2_frac; \/\/$/;"	m	struct:l2_struct
no2_frac	setanc.c	/^void no2_frac(float lon, float lat, float *no2_frac_200)$/;"	f
no2_strat	l1_struc.h	/^    float  *no2_strat;$/;"	m	struct:l1_struct
no2_strat	l2_struc.h	/^    float  *no2_strat; \/\/stratospheric NO2 concentration$/;"	m	struct:l2_struct
no2_transmittance	gas_trans.c	/^void no2_transmittance(int32_t sensorID, int32_t evalmask, int32_t nwave,$/;"	f
no2_tropo	l1_struc.h	/^    float  *no2_tropo;$/;"	m	struct:l1_struct
no2_tropo	l2_struc.h	/^    float  *no2_tropo; \/\/tropospheric NO2 concentration$/;"	m	struct:l2_struct
no2cf_init	atrem_bndprms.f	/^      BLOCK DATA no2cf_init$/;"	b
no2conc	setanc.c	/^void no2conc(char *no2file, float lon, float lat, int32_t doy, float *no2_tropo,$/;"	f
no2file	input_struc.h	/^  char   no2file[FILENAME_MAX];  \/* NO2 file                         *\/$/;"	m	struct:input_struct
nobs	atrem_corl1.h	/^    int32_t nobs,full_calc;$/;"	m	struct:__anon6
nobs	atrem_corl1.h	/^    int32_t nobs;  \/* number of spectral observations - this should be nbands? number of channels? *\/$/;"	m	struct:param_table
nobs	l1_struc.h	/^    int32_t   *nobs;$/;"	m	struct:l1_struct
nobs	l2_struc.h	/^    int32_t  *nobs;$/;"	m	struct:l2_struct
nobs	read_l3bin.h	/^    int32_t   *nobs;$/;"	m	struct:l3bin_struct
node_crossing_time	filehandle.h	/^    char      node_crossing_time[32];$/;"	m	struct:filehandle_struct
nodemax	nr.h	/^	unsigned long *icod,*ncod,*left,*right,nch,nodemax;$/;"	m	struct:__anon42
nodestr	scene_meta.c	/^static char *nodestr    [3] = {"Ascending","Descending","Unknown"};$/;"	v	file:
noise_model_swf	loadl1.c	/^float noise_model_swf(float lt,int32_t iw,float snr_mult){$/;"	f
noise_scale	input_struc.h	/^  float noise_scale; \/* scaling factor for gain perturbation by scaling SNR*\/ $/;"	m	struct:input_struct
normalizeLon	lonlat2pixline.c	/^static float normalizeLon(float lon) {$/;"	f	file:
north	ice_mask.c	/^static unsigned char	north[NROWS][NCOLS], south[SROWS][SCOLS];$/;"	v	file:
north	input_struc.h	/^  float   north;$/;"	m	struct:input_struct
north_lat	main_l1info.c	/^    float32 north_lat;$/;"	m	struct:__anon37	file:
northern_lat	scene_meta.c	/^static float northern_lat =  -90.0;$/;"	v	file:
northern_lat	scene_meta.h	/^  float northern_lat;$/;"	m	struct:scene_meta_str
northing	aviris.h	/^    double easting,northing;$/;"	m	struct:aviris_struct
northing	prism.h	/^    double easting,northing;$/;"	m	struct:prism_struct
npar	giop.h	/^  int npar;            \/* # optimized params   *\/$/;"	m	struct:giop_ctl_str
nphi	aerosol.c	/^    int32_t   nphi;$/;"	m	struct:aermodtab_struct	file:
npix	aer_struc.h	/^    int32_t   npix;$/;"	m	struct:aer_struct
npix	aviris.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:aviris_struct
npix	filehandle.h	/^    int32_t   npix;$/;"	m	struct:filehandle_struct
npix	filehdr_struc.h	/^    int32_t   npix;$/;"	m	struct:filehdr_struct
npix	filter.h	/^    int32_t   npix;$/;"	m	struct:filter_ctl_struct
npix	l1_czcs_hdf.c	/^int32   npix;              \/* number pixels per scan           *\/$/;"	v
npix	l1_hmodis_hdf.c	/^    int32_t npix;     \/*< number of values per variable per line *\/$/;"	m	struct:__anon34	file:
npix	l1_meris_CC.c	/^static int16 nline, npix;$/;"	v	file:
npix	l1_nc_generic_read.c	/^static int16 nline, npix;$/;"	v	file:
npix	l1_octs_hdf.c	/^static int16 year, day, nline, npix, sline, spix;$/;"	v	file:
npix	l1_olci.c	/^static int16 nline, npix;$/;"	v	file:
npix	l1_orca.c	/^static int16 nline, npix;$/;"	v	file:
npix	l1_struc.h	/^    int32_t   npix;$/;"	m	struct:l1_struct
npix	l1_viirs_nc.c	/^static int nscan, nline, npix;$/;"	v	file:
npix	l1a_osmi.c	/^static int32   npix;              \/* number pixels per scan           *\/$/;"	v	file:
npix	l1a_seawifs.c	/^int32   npix;              \/* number pixels per scan           *\/$/;"	v
npix	l2_struc.h	/^    int32_t   npix;$/;"	m	struct:l2_struct
npix	olci.h	/^    int32_t npix,nscan;$/;"	m	struct:olci_struct
npix	prism.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:prism_struct
npix	target_struc.h	/^    int32_t   npix;$/;"	m	struct:target_struct
npix	vcal.c	/^static int32_t     npix   = -1;$/;"	v	file:
npix	vcal_struc.h	/^    int32_t   npix;$/;"	m	struct:vcal_struct
npixels	aviris.h	/^    int     npixels;                      \/**< number of pixels in AVIRIS              *\/$/;"	m	struct:aviris_l1b_t
npixels	prism.h	/^    int     npixels;                      \/**< number of pixels in prism              *\/$/;"	m	struct:prism_l1b_t
npixls	l1_hmodis_hdf.c	/^    int32_t npixls;     \/*< (usually 1354)*1000\/resolution *\/$/;"	m	struct:__anon31	file:
npixls	l1b_viirs_nc.c	/^    size_t npixls;$/;"	m	struct:__anon29	file:
npixs	mscal_struc.h	/^    int32_t   npixs;$/;"	m	struct:mscal_struct
npnts	amoeba.h	/^  short int npnts;$/;"	m	struct:__anon1
nprods	mscal_struc.h	/^    int32_t   nprods;$/;"	m	struct:mscal_struct
nprods	read_l3bin.h	/^    int32_t   nprods;$/;"	m	struct:l3bin_struct
nq	l1q_struc.h	/^    int32_t nq;$/;"	m	struct:l1q_struct
nqual	sst.c	/^    int nqual;$/;"	m	struct:ssestab_structv6a	file:
nqual	sst.c	/^    int nqual;$/;"	m	struct:ssestab_structv6mv	file:
nquar	sst.c	/^    int nquar;$/;"	m	struct:ssestab_structv6a	file:
nquar	sst.c	/^    int nquar;$/;"	m	struct:ssestab_structv6mv	file:
nrad	l1_hmodis_hdf.c	/^    int16_t nrad;   \/*< number of radiance levels *\/$/;"	m	struct:__anon35	file:
nrad	nr.h	/^	unsigned long *ilob,*iupb,*ncumfq,jdif,nc,minint,nch,ncum,nrad;$/;"	m	struct:__anon41
nrc	las_iop.c	/^  int nrc;$/;"	m	struct:las_table_struc	file:
nrerror	nrutil.c	/^void nrerror(char error_text[])$/;"	f
nrow	l1_meris_CC.c	/^static int32 nrow;$/;"	v	file:
nrows	bin_climatology.c	/^static int32	nrows;$/;"	v	file:
nrows	get_dem_height.c	/^    int32 nrows;         \/\/ Number of rows in grid$/;"	m	struct:__anon24	file:
nrows	read_l3bin.h	/^    int32_t   nrows;$/;"	m	struct:l3bin_struct
nscan	aviris.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:aviris_struct
nscan	filehandle.h	/^    int32_t   nscan;$/;"	m	struct:filehandle_struct
nscan	filehdr_struc.h	/^    int32_t   nscan;$/;"	m	struct:filehdr_struct
nscan	filter.h	/^    int32_t   nscan;$/;"	m	struct:filter_ctl_struct
nscan	l1_czcs_hdf.c	/^int32   nscan;             \/* number of scans                  *\/$/;"	v
nscan	l1_viirs_nc.c	/^static int nscan, nline, npix;$/;"	v	file:
nscan	l1a_osmi.c	/^static int32   nscan;             \/* number of scans                  *\/$/;"	v	file:
nscan	l1a_seawifs.c	/^int32   nscan;             \/* number of scans                  *\/$/;"	v
nscan	olci.h	/^    int32_t npix,nscan;$/;"	m	struct:olci_struct
nscan	prism.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:prism_struct
nscans	aviris.h	/^    int     nscans;                       \/**< number of scans in AVIRIS              *\/$/;"	m	struct:aviris_l1b_t
nscans	l1_hmodis_hdf.c	/^    int32_t nscans;     \/*< 1KM scans; usually ~203 *\/$/;"	m	struct:__anon32	file:
nscans	l1_struc.h	/^    int32_t   nscans;$/;"	m	struct:l1_struct
nscans	l1b_viirs_nc.c	/^    size_t nscans;$/;"	m	struct:__anon29	file:
nscans	l2_struc.h	/^    int32_t   nscans;$/;"	m	struct:l2_struct
nscans	prism.h	/^    int     nscans;                       \/**< number of scans in prism              *\/$/;"	m	struct:prism_l1b_t
nscatt	aerosol.c	/^    int32_t   nscatt;$/;"	m	struct:aermodtab_struct	file:
nscenes	read_l3bin.h	/^    int32_t   *nscenes;$/;"	m	struct:l3bin_struct
nsenz	aerosol.c	/^    int32_t   nsenz;$/;"	m	struct:aermodtab_struct	file:
nsenz	sst.c	/^    int nsenz;$/;"	m	struct:ssestab_structv6a	file:
nsenz	sst.c	/^    int nsenz;$/;"	m	struct:ssestab_structv6mv	file:
nsf	l1_hmodis_hdf.c	/^    int16_t nsf;    \/*< number of subframes at highest resolution *\/$/;"	m	struct:__anon35	file:
nsf	l1_hmodis_hdf.c	/^    int32_t nsf;        \/*< number of subframes = ndets\/10 *\/$/;"	m	struct:__anon32	file:
nsol	las_iop.c	/^  int nsol;$/;"	m	struct:las_table_struc	file:
nsolz	aerosol.c	/^    int32_t   nsolz;$/;"	m	struct:aermodtab_struct	file:
nsst	sst.c	/^    int nsst;$/;"	m	struct:ssestab_structv6a	file:
nsst	sst.c	/^    int nsst;$/;"	m	struct:ssestab_structv6mv	file:
nsta	l1_czcs_hdf.c	/^int32           nsta;$/;"	v
nsta	l1a_osmi.c	/^static int32           nsta;$/;"	v	file:
nsta	l1a_seawifs.c	/^int32           nsta;$/;"	v
nstart	get_dem_height.c	/^    int16 nstart[121];   \/\/ Start tile # for each row (0-base)$/;"	m	struct:__anon24	file:
ntab	brightness.c	/^static int16 ntab;$/;"	v	file:
ntab	water.c	/^static int32_t   ntab   = NAWTAB;$/;"	v	file:
ntiles	get_dem_height.c	/^    int32 ntiles;        \/\/ Number of tiles in grid$/;"	m	struct:__anon24	file:
ntiles	get_nc_height.c	/^    size_t ntiles;$/;"	m	struct:__anon26	file:
numBands	aviris.h	/^    int    utmZone, numBands;$/;"	m	struct:aviris_struct
numBands	l1_generic_write.c	/^static int32_t numBands;$/;"	v	file:
numBands	l1_hdf_generic_write.c	/^static int32 numBands; $/;"	v	file:
numBands	l1_hico_h5.c	/^    int numBands;     \/\/ number of bands in the hico file$/;"	m	struct:hico_private_struct	file:
numBands	l2_generic.c	/^static int32 numBands;$/;"	v	file:
numBands	olci.h	/^    int    numBands, numRadFiles;$/;"	m	struct:olci_struct
numBands	prism.h	/^    int    utmZone, numBands;$/;"	m	struct:prism_struct
numBands	prodgen.c	/^static int32    numBands;$/;"	v	file:
numBandsIR	l1_generic_write.c	/^static int32_t numBandsIR;$/;"	v	file:
numBandsIR	l2_generic.c	/^static int32 numBandsIR;$/;"	v	file:
numBandsIR	prodgen.c	/^static int32    numBandsIR;$/;"	v	file:
numBottomTypes	swim.c	/^static size_t numBottomTypes;   \/\/ number of bottom types in the benthicProportion array$/;"	v	file:
numGainUncs	msl12_input.c	/^static int32_t numGainUncs = -1;$/;"	v	file:
numGains	msl12_input.c	/^static int32_t numGains = -1;$/;"	v	file:
numLat	get_nc_height.c	/^    size_t numLat;$/;"	m	struct:__anon25	file:
numLat	swim.c	/^static size_t numLat;           \/\/ number of latitudes in the benthicProportion array$/;"	v	file:
numLon	get_nc_height.c	/^    size_t numLon;$/;"	m	struct:__anon25	file:
numLon	swim.c	/^static size_t numLon;           \/\/ number of longitudes in the benthicProportion array$/;"	v	file:
numOffsets	msl12_input.c	/^static int32_t numOffsets = -1;$/;"	v	file:
numPixels	l1_generic_write.c	/^static int32_t numPixels;$/;"	v	file:
numPixels	l1_hdf_generic_write.c	/^static int32 numPixels;$/;"	v	file:
numPixels	l2_generic.c	/^static int32 numPixels;$/;"	v	file:
numPixels	prodgen.c	/^static int32    numPixels;$/;"	v	file:
numRadFiles	olci.h	/^    int    numBands, numRadFiles;$/;"	m	struct:olci_struct
numScans	l1_generic_write.c	/^static int32_t numScans;$/;"	v	file:
numScans	l1_hdf_generic_write.c	/^static int32 numScans; $/;"	v	file:
numScans	l2_generic.c	/^static int32 numScans;$/;"	v	file:
numScans	prodgen.c	/^static int32    numScans;$/;"	v	file:
numTauas	msl12_input.c	/^static int32_t numTauas = -1;$/;"	v	file:
num_iter	l2_struc.h	/^    int32_t   *num_iter;$/;"	m	struct:l2_struct
num_tab	l1_octs_hdf.c	/^static int16 num_tab;$/;"	v	file:
num_wvl_i	convert_band.c	/^    int *sh_strt_idx, *num_wvl_i;$/;"	m	struct:_context	file:
number	get_nc_height.c	/^    int number;$/;"	m	struct:__anon25	file:
numbin	bin_climatology.c	/^static int32	*numbin ;$/;"	v	file:
numbin	read_l3bin.h	/^    int32_t   *numbin;$/;"	m	struct:l3bin_struct
numbin_9km	read9km_mask.c	/^static int32_t  *numbin_xkm, *basebin_xkm, *numbin_9km, *basebin_9km;$/;"	v	file:
numbin_xkm	read9km_mask.c	/^static int32_t  *numbin_xkm, *basebin_xkm, *numbin_9km, *basebin_9km;$/;"	v	file:
numcal	runcal.h	/^    INT32	numcal;$/;"	m	struct:__anon45
numoverlain	main_l1mapgen.c	/^static int numoverlain;$/;"	v	file:
numraw	rawcal.h	/^    INT32	numraw;$/;"	m	struct:__anon44
numsmp	rawcal.h	/^	FLOAT32	numsmp;$/;"	m	struct:__anon44::_rawCalEnt
nvals	l1_hmodis_hdf.c	/^    int32_t nvals;    \/*< number of values per variable per scan *\/$/;"	m	struct:__anon34	file:
nw	brdf.c	/^static float nw    = 1.334;$/;"	v	file:
nw	seawater_get.c	/^static float *nw  = NULL;$/;"	v	file:
nwav	las_iop.c	/^  int nwav;$/;"	m	struct:las_table_struc	file:
nwave	aerosol.c	/^    int32_t   nwave;$/;"	m	struct:aermodtab_struct	file:
nwave	flags_iop.h	/^    int32 nwave;$/;"	m	struct:iopflagctl_struc
nwave	giop.h	/^  int   nwave;         \/* # fit wavelengths    *\/$/;"	m	struct:giop_ctl_str
nwave	las_iop.c	/^static int nwave      = -1;  \/\/ number of wavelengths to fit$/;"	v	file:
nwave	read_l3bin.h	/^    int32_t   nwave;$/;"	m	struct:l3bin_struct
nwave	xcal.c	/^static int nwave;$/;"	v	file:
nwts	owt.c	/^static int   nwts   = NWTS;$/;"	v	file:
nx	filter.h	/^    int32_t   nx;$/;"	m	struct:filter_struct
ny	filter.h	/^    int32_t   ny;$/;"	m	struct:filter_struct
nzone	viirs_pxcvt.c	/^static int nzone = 6;$/;"	v	file:
o2	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
o3	atrem_corl1.h	/^    int32_t h2o,co2,o3,n2o,co,ch4,o2,no2;$/;"	m	struct:__anon2
o3cf_init	atrem_bndprms.f	/^      BLOCK DATA o3cf_init$/;"	b
ocbrdf	brdf.c	/^int ocbrdf(l2str *l2rec,int32_t ip,int32_t brdf_opt,float wave[],int32_t nwave, $/;"	f
ocrvc_opt	filehandle.h	/^    int32_t   ocrvc_opt;$/;"	m	struct:filehandle_struct
ocrvc_opt	input_struc.h	/^  int32_t   ocrvc_opt;      \/* OCR-VC switch                            *\/$/;"	m	struct:input_struct
od	pml_iop_tables.c	/^float *od_lev, *od[MAX_BANDS];$/;"	v
od_lev	pml_iop_tables.c	/^float *od_lev, *od[MAX_BANDS];$/;"	v
od_n	pml_iop_tables.c	/^int32_t nband, ch_n, sp_n, od_n;$/;"	v
offset	input_struc.h	/^  float  *offset  ;       \/* Vicarious calibration offset     *\/$/;"	m	struct:input_struct
offset	l1_oli.c	/^    double *scale, *offset;$/;"	m	struct:oli_struct	file:
offset	l1_viirs_h5.c	/^static float *scale, *offset; \/* scaling factors *\/$/;"	v	file:
offset	l2prod_struc.h	/^    float32 offset;$/;"	m	struct:l2prod_index_struct
offset	smi_climatology.c	/^static float offset[NPROD];$/;"	v	file:
offset_488	get_owmc.c	/^static float offset_488;$/;"	v	file:
offset_551	get_owmc.c	/^static float offset_551;$/;"	v	file:
offset_sst	get_owmc.c	/^static float offset_sst;$/;"	v	file:
ofile	input_struc.h	/^  char      ofile   [MAX_OFILES][FILENAME_MAX];$/;"	m	struct:input_struct
ofile	mscal_struc.h	/^    char   ofile [FILENAME_MAX];$/;"	m	struct:calinput_struct
oformat	input_struc.h	/^  char      oformat[20];  \/\/ output file type$/;"	m	struct:input_struct
oformat	mscal_struc.h	/^    char      oformat[20];$/;"	m	struct:calinput_struct
oformat	mscal_struc.h	/^    char    oformat[20];$/;"	m	struct:mscal_struct
oformat_depth	input_struc.h	/^  char      oformat_depth[20];  \/\/ output file color depth l1brsgen only$/;"	m	struct:input_struct
olci_radfiles	olci.h	/^    char  *olci_radfiles[MAXOLCI_RADFILES+1];$/;"	m	struct:olci_struct
olci_sd	l1_olci.c	/^static int32_t olci_sd[MAXOLCI_RADFILES],geoFileID,coordFileID,tcoordFileID,instrumentFileID;$/;"	v	file:
olci_struct	olci.h	/^typedef struct olci_struct {$/;"	s
olci_t	olci.h	/^} olci_t;$/;"	t	typeref:struct:olci_struct
olci_varname	olci.h	/^    char olci_varname[MAXOLCI_RADFILES][FILENAME_MAX];$/;"	m	struct:olci_struct
oli_struct	l1_oli.c	/^typedef struct oli_struct {$/;"	s	file:
oli_t	l1_oli.c	/^} oli_t;$/;"	t	typeref:struct:oli_struct	file:
omf2	l1_czcs_hdf.c	732;"	d	file:
open_aer	aer_io.c	/^int open_aer(filehandle *file) $/;"	f
open_l3b	bin_climatology.c	/^int32 open_l3b(char *l3file, int32_t day)$/;"	f
open_modis_geofile	l1_hmodis_hdf.c	/^int open_modis_geofile(modis_file *geofile) {$/;"	f
open_modis_l1bfile	l1_hmodis_hdf.c	/^int open_modis_l1bfile(modis_file *l1bfile) {$/;"	f
open_target	target_io.c	/^int open_target(filehandle *file) $/;"	f
openl1	l1_io.c	/^int openl1(filehandle *l1file)$/;"	f
openl1_aci_hdf	l1_aci_hdf.c	/^int openl1_aci_hdf(filehandle *file) {$/;"	f
openl1_aviris	l1_aviris.c	/^int  openl1_aviris( filehandle *file ) {$/;"	f
openl1_czcs	l1_czcs_hdf.c	/^int openl1_czcs(filehandle *file)$/;"	f
openl1_goci	l1_goci.c	/^openl1_goci( filehandle *file )$/;"	f
openl1_hico_h5	l1_hico_h5.c	/^int openl1_hico_h5(filehandle * file) {$/;"	f
openl1_hmodis_hdf	l1_hmodis_hdf.c	/^int openl1_hmodis_hdf(filehandle *l1file) {$/;"	f
openl1_meris_CC	l1_meris_CC.c	/^openl1_meris_CC(filehandle * file)$/;"	f
openl1_meris_N1	l1_meris_N1.c	/^openl1_meris_N1(filehandle * file)$/;"	f
openl1_nc_generic	l1_nc_generic_read.c	/^int openl1_nc_generic(filehandle *file) {$/;"	f
openl1_ocm2_hdf	l1_ocm2_hdf.c	/^int openl1_ocm2_hdf(filehandle *file)$/;"	f
openl1_ocm_hdf	l1_ocm_hdf.c	/^int openl1_ocm_hdf(filehandle *file)$/;"	f
openl1_ocmdb_hdf	l1_ocmdb_hdf.c	/^int openl1_ocmdb_hdf(filehandle *file)$/;"	f
openl1_olci	l1_olci.c	/^int openl1_olci(filehandle * l1file) {$/;"	f
openl1_oli	l1_oli.c	/^int openl1_oli(filehandle *file) {$/;"	f
openl1_orca	l1_orca.c	/^int openl1_orca(filehandle * file) {$/;"	f
openl1_prism	l1_prism.c	/^int  openl1_prism( filehandle *file ) {$/;"	f
openl1_read_hdf_g	l1_hdf_generic_read.c	/^int openl1_read_hdf_g(filehandle *file)$/;"	f
openl1_read_mos_hdf	l1_mos_hdf.c	/^int openl1_read_mos_hdf(filehandle *l1file)$/;"	f
openl1_read_octs_hdf	l1_octs_hdf.c	/^int openl1_read_octs_hdf(filehandle *l1file)$/;"	f
openl1_viirs_h5	l1_viirs_h5.c	/^int openl1_viirs_h5(filehandle * file) {$/;"	f
openl1_viirs_nc	l1_viirs_nc.c	/^int openl1_viirs_nc(filehandle * file) {$/;"	f
openl1_viirs_nc	l1_viirs_nc_stub.c	/^int openl1_viirs_nc(filehandle * file) {$/;"	f
openl1_write	l1_generic_write.c	/^int openl1_write(filehandle *l1file) {$/;"	f
openl1_write_hdf	l1_hdf_generic_write.c	/^int openl1_write_hdf (filehandle *l1file)$/;"	f
openl1_xcal_hdf	l1_xcal_hdf.c	/^int openl1_xcal_hdf(filehandle *file)$/;"	f
openl1a_osmi	l1a_osmi.c	/^int openl1a_osmi(filehandle *file)$/;"	f
openl1a_seawifs	l1a_seawifs.c	/^int openl1a_seawifs(filehandle *file)$/;"	f
openl1b_viirs_nc	l1b_viirs_nc.c	/^int openl1b_viirs_nc(filehandle *l1file) {$/;"	f
openl2	l2_generic.c	/^int openl2( filehandle *l2file)   $/;"	f
opp_befa	get_opp.c	/^float opp_befa( float chl, float irr, float sst, float dayL ) {$/;"	f
opp_cbpm2	get_opp.c	/^double opp_cbpm2( double chl,$/;"	f
opp_eppley	get_opp.c	/^float opp_eppley( float chl,$/;"	f
optical_water_type	owt.c	/^void optical_water_type(l2str *l2rec, l2prodstr *p, void *vptr)$/;"	f
orb_vec	l1a_seawifs.c	/^  float32 orb_vec[3];$/;"	m	struct:__anon27	file:
orbit_node_lon	filehandle.h	/^    float     orbit_node_lon;$/;"	m	struct:filehandle_struct
orbit_number	filehandle.h	/^    int32_t   orbit_number;$/;"	m	struct:filehandle_struct
orbit_number	l1b_viirs_nc.c	/^    int orbit_number;$/;"	m	struct:__anon29	file:
order_models	aerosol.c	/^static int order_models(const void *p1, const void *p2)$/;"	f	file:
orientation	l1_hico_h5.c	/^    int orientation; \/\/ is HICO orientation flipped$/;"	m	struct:hico_private_struct	file:
out_band	l1a_seawifs.c	/^int16   out_band    = 0;      \/* if <= 0, no out of band correct. *\/$/;"	v
out_band_flag	l1a_osmi.c	/^static int16   out_band_flag = OOB_OFF;$/;"	v	file:
outband_opt	input_struc.h	/^  int32_t   outband_opt;    \/* 1=apply seawifs out-of-band correction   *\/$/;"	m	struct:input_struct
owmcfile	input_struc.h	/^  char   owmcfile[FILENAME_MAX]; \/* Ocean water classification       *\/$/;"	m	struct:input_struct
owt	owt.c	/^static float **owt;$/;"	v	file:
owtchlerrfile	input_struc.h	/^  char      owtchlerrfile[FILENAME_MAX];$/;"	m	struct:input_struct
owtd	owt.c	/^static float  *owtd;$/;"	v	file:
owtfile	input_struc.h	/^  char      owtfile[FILENAME_MAX];$/;"	m	struct:input_struct
owtn	owt.c	/^static float **owtn;$/;"	v	file:
oxaband_opt	input_struc.h	/^  int32_t   oxaband_opt;    \/* 1=apply seawifs 765 nm Oxygen corr       *\/$/;"	m	struct:input_struct
oxyRMeris	raman.c	/^static float oxyRMeris[9] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxyRModisa	raman.c	/^static float oxyRModisa[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxyRModist	raman.c	/^static float oxyRModist[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00164411, 0.0, 0.0};$/;"	v	file:
oxyROcts	raman.c	/^static float oxyROcts[6] = {0.0, 0.0, 0.0, 0.0, 6.98233E-05, 3.6531E-05};$/;"	v	file:
oxyRSeawifs	raman.c	/^static float oxyRSeawifs[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxyRViirs	raman.c	/^static float oxyRViirs[5] = {0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxyRam	raman.c	/^static float *oxyRam;  \/\/Oxygen absorption at Raman bands$/;"	v	file:
oxySMeris	raman.c	/^static float oxySMeris[9] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxySModisa	raman.c	/^static float oxySModisa[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00164411, 0.0, 0.0};$/;"	v	file:
oxySModist	raman.c	/^static float oxySModist[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00164411, 0.0, 0.0};$/;"	v	file:
oxySOcts	raman.c	/^static float oxySOcts[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxySSeawifs	raman.c	/^static float oxySSeawifs[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxySViirs	raman.c	/^static float oxySViirs[5] = {0.0, 0.0, 0.0, 0.0, 0.0};$/;"	v	file:
oxySen	raman.c	/^static float *oxySen;   \/\/Oxygen absorption at sensor bands$/;"	v	file:
oxygen_aer	atmocor1.c	/^float oxygen_aer(float airmass)$/;"	f
oxygen_ray	atmocor1.c	/^float oxygen_ray(float airmass)$/;"	f
oz	l1_struc.h	/^    float  *oz;$/;"	m	struct:l1_struct
oz	l2_struc.h	/^    float  *oz; \/\/ozone$/;"	m	struct:l2_struct
ozRMeris	raman.c	/^static float ozRMeris[9] = {0.0, 0.0, 0.000548079, 0.00165534, 0.00980838, 0.0422707, 0.0815767, 0.0898866, 0.123983};$/;"	v	file:
ozRModisa	raman.c	/^static float ozRModisa[10] = {0.0, 0.0, 5.64079E-05, 0.000461462, 0.00382323, 0.00776277, 0.00901151, 0.0646758, 0.0829727, 0.0913593};$/;"	v	file:
ozRModist	raman.c	/^static float ozRModist[10] = {0.000227919, 0.00310197, 0.00928518, 0.0199428, 0.0709312, 0.0862022, 0.096988, 0.0748444, 0.0479347, 0.0373123};$/;"	v	file:
ozROcts	raman.c	/^static float ozROcts[6] = {3.164E-05, 4.71707E-05, 0.000653096, 0.00256092, 0.0149435, 0.0845886};$/;"	v	file:
ozRSeawifs	raman.c	/^static float ozRSeawifs[6] = {0.0, 0.0, 0.000583343, 0.00180823, 0.00901151, 0.0852301};$/;"	v	file:
ozRViirs	raman.c	/^static float ozRViirs[5] = {0.0, 0.0, 0.000433408, 0.00824703, 0.0859724};$/;"	v	file:
ozRam	raman.c	/^static float *ozRam;   \/\/Ozone absorption at Raman bands$/;"	v	file:
ozSMeris	raman.c	/^static float ozSMeris[9] = {0.000259218, 0.00313902, 0.0204557, 0.0411736, 0.105558, 0.108447, 0.0500913, 0.0393709, 0.0187491};$/;"	v	file:
ozSModisa	raman.c	/^static float ozSModisa[10] = {0.000227919, 0.00310197, 0.00928518, 0.0199428, 0.0709312, 0.0862022, 0.096988, 0.0748444, 0.0479347, 0.0373123};$/;"	v	file:
ozSModist	raman.c	/^static float ozSModist[10] = {0.000227919, 0.00310197, 0.00928518, 0.0199428, 0.0709312, 0.0862022, 0.096988, 0.0748444, 0.0479347, 0.0373123};$/;"	v	file:
ozSOcts	raman.c	/^static float ozSOcts[6] = {0.000227102, 0.00292769, 0.0218158, 0.0455341, 0.115185, 0.0479812};$/;"	v	file:
ozSSeawifs	raman.c	/^static float ozSSeawifs[6] = {0.000227102, 0.00292769, 0.0218158, 0.0413611, 0.096988, 0.0450026};$/;"	v	file:
ozSViirs	raman.c	/^static float ozSViirs[5] = {0.000178426, 0.00292108, 0.0195719, 0.0908832, 0.0440014};$/;"	v	file:
ozSen	raman.c	/^static float *ozSen;    \/\/Ozone absorption at sensor bands$/;"	v	file:
ozone	input_struc.h	/^  float  ozone;                  \/* use fixed ozone as specified     *\/$/;"	m	struct:input_struct
ozone1	input_struc.h	/^  char   ozone1 [FILENAME_MAX];  \/* Ozone ancillary file             *\/$/;"	m	struct:input_struct
ozone2	input_struc.h	/^  char   ozone2 [FILENAME_MAX];  \/* Ozone ancillary file             *\/$/;"	m	struct:input_struct
ozone3	input_struc.h	/^  char   ozone3 [FILENAME_MAX];  \/* Ozone ancillary file             *\/$/;"	m	struct:input_struct
ozone_climatology	setanc.c	/^float ozone_climatology(char *file, int day, float lon, float lat)$/;"	f
ozone_transmittance	gas_trans.c	/^void ozone_transmittance(int32_t sensorID, int32_t evalmask, int32_t nwave, $/;"	f
p	atrem_corl1.h	/^    float h[MODELMAX],t[MODELMAX],p[MODELMAX],vmr[MODELMAX];$/;"	m	struct:__anon4
p0	aerosol.c	/^static float p0    = STDPR;$/;"	v	file:
p0	carder.c	/^static double p0, p1, p2;              \/* coefs for chl=fn(aph675)           *\/$/;"	v	file:
p1	carder.c	/^static double p0, p1, p2;              \/* coefs for chl=fn(aph675)           *\/$/;"	v	file:
p2	carder.c	/^static double p0, p1, p2;              \/* coefs for chl=fn(aph675)           *\/$/;"	v	file:
pa0	carder.c	/^static double pa0[6], pa3[6];          \/* aph model prms packaged            *\/$/;"	v	file:
pa3	carder.c	/^static double pa0[6], pa3[6];          \/* aph model prms packaged            *\/$/;"	v	file:
par	giop.h	/^  double *par;  \/* starting params [NBANDS]     *\/$/;"	m	struct:giop_ctl_str
par_option_cb	l2binmatch_input.cpp	/^void par_option_cb(struct clo_option_t *option) {$/;"	f
par_option_cb	msl12_input.c	/^void par_option_cb(clo_option_t *option) {$/;"	f
param_table	atrem_corl1.h	/^typedef struct param_table {$/;"	s
param_type	l2prod_struc.h	/^    int     param_type;$/;"	m	struct:l2prod_index_struct
paramstr	atrem_corl1.h	/^} paramstr;$/;"	t	typeref:struct:param_table
parfile	input_struc.h	/^  char      parfile  [FILENAME_MAX];$/;"	m	struct:input_struct
pc0	carder.c	/^static double pc0, pc1, pc2, pc3;      \/* coefs for 490:555 chl alg packaged *\/$/;"	v	file:
pc1	carder.c	/^static double pc0, pc1, pc2, pc3;      \/* coefs for 490:555 chl alg packaged *\/$/;"	v	file:
pc2	carder.c	/^static double pc0, pc1, pc2, pc3;      \/* coefs for 490:555 chl alg packaged *\/$/;"	v	file:
pc3	carder.c	/^static double pc0, pc1, pc2, pc3;      \/* coefs for 490:555 chl alg packaged *\/$/;"	v	file:
pcal_counts	l1a_seawifs.c	/^float32 pcal_counts[BANDS_DIMS_1A][GAINS_DIMS_1A][KNEES_DIMS_1A];$/;"	v
pcal_rads	l1a_seawifs.c	/^float32 pcal_rads[BANDS_DIMS_1A][GAINS_DIMS_1A][KNEES_DIMS_1A];$/;"	v
pcdom_morel	cdom_morel.c	/^float pcdom_morel(float chl, float idx)$/;"	f
pdA	atmcor_soa.f	/^     &         ddiffA_ri(NMR,NMI,NLAMBDA) ,pdA(/;"	v
pdA0	atmcor_soa.f	/^     &         ddiffA0_ri(NMR,NMI,NLAMBDA),pdA0(/;"	v
pdB	atmcor_soa.f	/^     &         ddiffB_ri(NMR,NMI,NLAMBDA) ,pdB(/;"	v
pdB0	atmcor_soa.f	/^     &         ddiffB0_ri(NMR,NMI,NLAMBDA),pdB0(/;"	v
pdCandRho	atmcor_soa.f	/^      REAL*8   dcandRho(NMI,NMR,NLAMBDA),pdCandRho(/;"	v
pdTau865	atmcor_soa.f	/^     &         dtau865(NMI,NMR)        ,pdTau865(/;"	v
pdVir	atmcor_soa.f	/^     &         dvir(NMI,NMR)           ,pdVir(/;"	v
pdW0nu	atmcor_soa.f	/^     &         dw0nu(NMI,NMR)          ,pdW0nu(/;"	v
pdZa	atmcor_soa.f	/^     &         zA(NLAMBDA)   , pdZa(/;"	v
pdZa0	atmcor_soa.f	/^     &         zA0(NLAMBDA)  , pdZa0(/;"	v
pdZb	atmcor_soa.f	/^     &         zB(NLAMBDA)   , pdZb(/;"	v
pdZb0	atmcor_soa.f	/^     &         zB0(NLAMBDA)  , pdZb0(/;"	v
pdZc865	atmcor_soa.f	/^     &         zC865(NLAMBDA), pdZc865(/;"	v
pdZrho	atmcor_soa.f	/^     &         zRho(NLAMBDA) , pdZrho(/;"	v
pdZtau865	atmcor_soa.f	/^     &         zTau865(1)       , pdZtau865(/;"	v
pdZv	atmcor_soa.f	/^     &         zV(1)            , pdZv(/;"	v
pdZw0	atmcor_soa.f	/^     &         zW0(1)           , pdZw0(/;"	v
pdbg1	l1_aci_hdf.c	/^static int pdbg1 = -1;$/;"	v	file:
pdcc865	atmcor_soa.f	/^     &         dcc865(NMI,NMR,NLAMBDA) ,pdcc865(/;"	v
perc	owt.c	/^    float  perc;$/;"	m	struct:error_struc	file:
percent_cloud	filehandle.h	/^    int       percent_cloud;$/;"	m	struct:filehandle_struct
percent_land	filehandle.h	/^    int       percent_land;$/;"	m	struct:filehandle_struct
percent_water	filehandle.h	/^    int       percent_water;$/;"	m	struct:filehandle_struct
pfmu0	atmcor_soa.f	/^      REAL*8   LwN(NLAMBDA),pfmu0(/;"	v
phase	aerosol.c	/^    float  **phase;$/;"	m	struct:aermod_struct	file:
phi	aerosol.c	/^    float  *phi;$/;"	m	struct:aermodtab_struct	file:
pi	aerosol.c	/^static float pi    = PI;$/;"	v	file:
pi	atmcor_soa.f	/^      REAL     aerwatRho(NLAMBDA),F0(NLAMBDA),mu0,pi$/;"	v
pi	calcite.c	/^static float pi        = PI;$/;"	v	file:
pi	chl.h	/^static float pi = PI;$/;"	v
pi	l1_olci.c	/^static double pi = PI;$/;"	v	file:
picfile	input_struc.h	/^  char      picfile[FILENAME_MAX];$/;"	m	struct:input_struct
pixLat	lonlat2pixline.h	/^        float pixLat; \/**< actual latitude of the pixel found *\/$/;"	m	struct:lonlat2pixline_struct
pixLon	lonlat2pixline.h	/^        float pixLon; \/**< actual longitude of the pixel found *\/$/;"	m	struct:lonlat2pixline_struct
pix_srch	lonlat2pixline.h	/^        int pix_srch; \/**< search for a single pixel (use SW lon & lat)*\/$/;"	m	struct:lonlat2pixline_struct
pixday	gsm.c	/^static int32_t pixday;$/;"	v	file:
pixdet	l1_struc.h	/^    int32_t   *pixdet;         \/* detector index of pixel *\/$/;"	m	struct:l1_struct
pixdet	l2_struc.h	/^    int32_t   *pixdet;$/;"	m	struct:l2_struct
pixelQualityId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
pixelSize	aviris.h	/^    double pixelSize;$/;"	m	struct:aviris_struct
pixelSize	olci.h	/^    double pixelSize;$/;"	m	struct:olci_struct
pixelSize	prism.h	/^    double pixelSize;$/;"	m	struct:prism_struct
pixel_count	main_l1info.c	/^    uint32_t pixel_count;$/;"	m	struct:__anon37	file:
pixlat	gsm.c	/^static float32 pixlat;$/;"	v	file:
pixlon	gsm.c	/^static float32 pixlon;$/;"	v	file:
pixnum	calfile_utils.h	/^    int32_t  pixnum;$/;"	m	struct:cal_struct
pixnum	l1_struc.h	/^    int32_t   *pixnum;$/;"	m	struct:l1_struct
pixnum	l2_struc.h	/^    int32_t   *pixnum;$/;"	m	struct:l2_struct
pixnum	mscal_struc.h	/^    int16  *pixnum;$/;"	m	struct:mscal_struct
pixwt	xcal.c	/^static double pixwt = 1.0;$/;"	v	file:
pj_latlong	aviris.h	/^    projPJ *pj_ortho,*pj_latlong;$/;"	m	struct:aviris_struct
pj_latlong	prism.h	/^    projPJ *pj_ortho,*pj_latlong;$/;"	m	struct:prism_struct
pj_ortho	aviris.h	/^    projPJ *pj_ortho,*pj_latlong;$/;"	m	struct:aviris_struct
pj_ortho	prism.h	/^    projPJ *pj_ortho,*pj_latlong;$/;"	m	struct:prism_struct
pk	carder.c	/^static int   pk;		       \/* packaging parameter                *\/$/;"	v	file:
pml_assert	pml.c	/^void pml_assert(int expr) { if (expr) return; else exit(1); }$/;"	f
pml_init	pml.c	/^int pml_init( int iter8, int i410, int i440, int i490, int i510, int i555, int i670, float *awptr, float *bbwptr )$/;"	f
pml_is_initialized	pml.c	/^int pml_is_initialized( void )$/;"	f
pml_ran	get_pml.c	/^int pml_ran(int recnum)$/;"	f
pnames	bin_climatology.c	/^static char   pnames[MAXCPROD][20] = {"chlor_a","nLw_412","angstrom"};$/;"	v	file:
poc_stramski_443	get_poc.c	/^float poc_stramski_443(float *Rrs, float *wave)$/;"	f
poc_stramski_490	get_poc.c	/^float poc_stramski_490(float *Rrs, float *wave)$/;"	f
pointer	misc.h	/^typedef unsigned char *pointer;$/;"	t
pol_opt	input_struc.h	/^  int32_t   pol_opt;        \/* polarization correction option           *\/$/;"	m	struct:input_struct
polcor	l1_struc.h	/^    float  *polcor;$/;"	m	struct:l1_struct
polcor	l2_struc.h	/^    float  *polcor; \/\/ polarization correction$/;"	m	struct:l2_struct
polcor	polcor.c	/^void polcor(l1str *l1rec, int32_t ip)$/;"	f
polfile	input_struc.h	/^  char      polfile [FILENAME_MAX];$/;"	m	struct:input_struct
pos	l1_czcs_hdf.c	/^float32 *ctl_pt_lat, *ctl_pt_lon, *pos, *pos_err;$/;"	v
pos	l1_viirs_h5.c	/^static float *pos, *vel, *att; \/* position, velocity, sensor attitude *\/$/;"	v	file:
pos_err	l1_czcs_hdf.c	/^float32 *ctl_pt_lat, *ctl_pt_lon, *pos, *pos_err;$/;"	v
pp0	carder.c	/^static double pp0, pp1, pp2;           \/* coefs for chl=fn(aph675) packaged  *\/$/;"	v	file:
pp1	carder.c	/^static double pp0, pp1, pp2;           \/* coefs for chl=fn(aph675) packaged  *\/$/;"	v	file:
pp2	carder.c	/^static double pp0, pp1, pp2;           \/* coefs for chl=fn(aph675) packaged  *\/$/;"	v	file:
pp_airmass	airmass.c	/^float pp_airmass(float theta)$/;"	f
pp_airmass_	airmass.c	/^float pp_airmass_(float *theta)$/;"	f
pr	l1_struc.h	/^    float  *pr;$/;"	m	struct:l1_struct
pr	l2_struc.h	/^    float  *pr; \/\/surface pressure$/;"	m	struct:l2_struct
pressure	input_struc.h	/^  float  pressure;               \/* use fixed pressure as specified  *\/$/;"	m	struct:input_struct
prev	l1_hmodis_hdf.c	/^    int32_t *prev; \/*< previous valid detector for each detector *\/$/;"	m	struct:__anon36	file:
prev_count	h5io.h	/^   hsize_t prev_count[ H5IO_MAXDIM ];  \/* make sure slab read set right for $/;"	m	struct:h5io_str_d
prev_ndim	h5io.h	/^   int prev_ndim;     \/* # dims of the dataset just needed for ref *\/$/;"	m	struct:h5io_str_d
print_area	get_nc_height.c	/^void print_area(grid_area_t area){$/;"	f
print_out	qaa.c	/^static void print_out( int n, float *fwl, float *Rrs, float *rrs, float *u,$/;"	f	file:
print_tile	get_nc_height.c	/^void print_tile(tile_struct tile) {$/;"	f
print_viirs_file	l1b_viirs_nc.c	/^void print_viirs_file(const viirs_file info) {$/;"	f
prism_l1b_t	prism.h	/^typedef struct prism_l1b_t {$/;"	s
prism_l1b_t	prism.h	/^} prism_l1b_t;$/;"	t	typeref:struct:prism_l1b_t
prism_proj4_convert	l1_prism.c	/^void prism_proj4_convert(prism_t * data, int numPoints, double *x, double *y)$/;"	f
prism_struct	prism.h	/^typedef struct prism_struct {$/;"	s
prism_t	prism.h	/^} prism_t;$/;"	t	typeref:struct:prism_struct
private_data	filehandle.h	/^    void      *private_data;$/;"	m	struct:filehandle_struct
prn1lb	atmcor_soa.f	/^      subroutine prn1lb(/;"	s
prn2lb	atmcor_soa.f	/^      subroutine prn2lb(/;"	s
prn3lb	atmcor_soa.f	/^      subroutine prn3lb(/;"	s
prname	mscal_struc.h	/^typedef char   prname[PRODSTRLEN];$/;"	t
pro_control	filehandle.h	/^    char      *pro_control;$/;"	m	struct:filehandle_struct
pro_control	input_struc.h	/^  char   pro_control[4096];$/;"	m	struct:input_struct
proc_land	anc_acq.c	/^static int proc_land;$/;"	v	file:
proc_land	input_struc.h	/^  int32_t   proc_land;      \/* 1=perform land-specific processing       *\/$/;"	m	struct:input_struct
proc_ocean	input_struc.h	/^  int32_t   proc_ocean;     \/* 1=perform ocean-specific processing      *\/$/;"	m	struct:input_struct
proc_sst	input_struc.h	/^  int32_t   proc_sst;       \/* 1=perform sst-specific processing        *\/$/;"	m	struct:input_struct
prodXMLfile	input_struc.h	/^  char   prodXMLfile[FILENAME_MAX]; \/* product XML output file name  *\/$/;"	m	struct:input_struct
prod_ix	l2prod_struc.h	/^    int     prod_ix;$/;"	m	struct:l2prod_index_struct
prodgen	prodgen.c	/^VOIDP prodgen( l2prodstr *p, l2str *l2rec) $/;"	f
prodlist	prodlist.c	/^int32 prodlist(int32 sensorID, int32 evalmask, const char *inprod, const char *defprod, char outprod[MAXPROD][32])$/;"	f
prodptr	filehandle.h	/^    l2prodstr* prodptr;        \/* array of product structures *\/$/;"	m	struct:filehandle_struct
prods	read_l3bin.h	/^    char      **prods;$/;"	m	struct:l3bin_struct
product_id	l2prod_struc.h	/^    char    product_id[UNITLEN];$/;"	m	struct:l2prod_index_struct
program_name	input_struc.h	/^  char   program_name[128];$/;"	m	struct:input_struct
projgr	atmcor_soa.f	/^      subroutine projgr(/;"	s
prtemp	l1_struc.h	/^    float  *prtemp;	\/* per pixel *\/$/;"	m	struct:l1_struct
prtemp	runcal.h	/^	FLOAT32	prtemp;$/;"	m	struct:__anon45::_runCalEnt
ptr	miscstruct.h	/^    pointer		ptr;$/;"	m	union:_DevUnion
ptr_arr	b128_msk_get.c	/^static short ptr_arr[2][ NITEMPTR ];$/;"	v	file:
pversion	input_struc.h	/^  char   pversion[1024];$/;"	m	struct:input_struct
qaa_adg_s	input_struc.h	/^  float   qaa_adg_s;$/;"	m	struct:input_struct
qaa_alloc	get_qaa.c	/^static void qaa_alloc(int npix, int nbands)$/;"	f	file:
qaa_decomp	qaa.c	/^qaa_decomp( int nbands, double *wavel, double *rrs, double *a, double *aw,$/;"	f
qaa_init	qaa.c	/^qaa_init( int i410, int i440, int i490, int i555, int i670 )$/;"	f
qaa_iops_4_bshift	get_qaa.c	/^void qaa_iops_4_bshift(l2str *l2rec,float *adg_ref,float *bbp_ref)$/;"	f
qaa_is_initialized	qaa.c	/^qaa_is_initialized( void )$/;"	f
qaa_pixel_alloc	get_qaa.c	/^static void qaa_pixel_alloc(int nbands)$/;"	f	file:
qaa_ran	get_qaa.c	/^static int qaa_ran(int recnum)$/;"	f	file:
qaa_set_param	qaa.c	/^qaa_set_param( int param, ... )$/;"	f
qaa_v6	qaa.c	/^qaa_v6( int nbands, double *wavel, double *Rrs, double *aw, double *bbw,$/;"	f
qaa_wave	input_struc.h	/^  int     qaa_wave[5];$/;"	m	struct:input_struct
qaaf_decomp	qaa.c	/^qaaf_decomp( int nbands, float *wavel, float *rrs, float *a, float *aw,$/;"	f
qaaf_v6	qaa.c	/^qaaf_v6( int nbands, float *wavel, float *Rrs, float *aw, float *bbw,$/;"	f
qint_morel	brdf.c	/^void qint_morel(float wave[],int32_t nwave,float solz,float chl,float Qn[]) $/;"	f
qual	sst.c	/^    float qual[NQUALMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
qual	sst.c	/^    float qual[NQUALMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
qual_sst	sst.c	/^static int8 *qual_sst = NULL;$/;"	v	file:
qual_sst3	sst.c	/^static int8 *qual_sst3 = NULL;$/;"	v	file:
qual_sst4	sst.c	/^static int8 *qual_sst4 = NULL;$/;"	v	file:
qual_sst_flag_lname	flags_sst.h	/^static const char *qual_sst_flag_lname[NQSSTFLAGS] = {"BEST",$/;"	v
r	l1q_struc.h	/^    l1str r[NQMAX];$/;"	m	struct:l1q_struct
r	nr.h	/^typedef struct FCOMPLEX {float r,i;} fcomplex;$/;"	m	struct:FCOMPLEX
r0p94	atrem_corl1.h	/^    float *r0p94; \/\/ratio for the 0.94 um H2O absorption band$/;"	m	struct:param_table
r0p94	atrem_corl1.h	/^    float sh2o,vaptot[TBLMAX],r0p94[TBLMAX],r1p14[TBLMAX],trntbl[TBLMAX][NBANDS];$/;"	m	struct:__anon17
r1p14	atrem_corl1.h	/^    double rp94, r1p14;$/;"	m	struct:__anon22
r1p14	atrem_corl1.h	/^    float *r1p14; \/\/ratio for the 1.14 um H2O absorption band$/;"	m	struct:param_table
r1p14	atrem_corl1.h	/^    float sh2o,vaptot[TBLMAX],r0p94[TBLMAX],r1p14[TBLMAX],trntbl[TBLMAX][NBANDS];$/;"	m	struct:__anon17
r_ab	pml_iop_tables.c	/^float r_ab(float a, float b, int band)$/;"	f
rad_data	l1_hico_h5.c	/^    uint16_t *rad_data;$/;"	m	struct:hico_private_struct	file:
rad_name	l1_generic_write.c	/^char rad_name[8];$/;"	v
rad_name	l1_hdf_generic_write.c	/^char  rad_name[8];$/;"	v
rad_opt	input_struc.h	/^  int32_t   rad_opt;        \/* radcor switch for MERIS smile correction *\/$/;"	m	struct:input_struct
radcor	l1_meris_N1.c	/^void radcor(l1str *l1rec, int32_t ip, int land)$/;"	f
radcor	l1_struc.h	/^    float  *radcor;         \/* smile correction *\/$/;"	m	struct:l1_struct
radcor	l2_struc.h	/^    float  *radcor;$/;"	m	struct:l2_struct
raddeg	ll2vec.c	/^static float raddeg = 180. \/ PI;$/;"	v	file:
radeg	aerosol.c	/^static float radeg = RADEG;$/;"	v	file:
radeg	brdf.c	/^static float radeg = RADEG;$/;"	v	file:
radeg	calcite.c	/^static float radeg     = RADEG;$/;"	v	file:
radiance2bt	brightness.c	/^void radiance2bt(l1str *l1rec, int resolution)$/;"	f
radians	niwa_iop.c	29;"	d	file:
radians	pml_iop.h	17;"	d
radinc	brightness.c	/^static float  radinc  [NBTBANDMAX][NBTDETMAX];$/;"	v	file:
radoff	l1_hmodis_hdf.c	/^static float radoff[][10] = {$/;"	v	file:
rads	l1a_seawifs.c	/^float32         rads[BANDS_DIMS_1A][GAINS_DIMS_1A][KNEES_DIMS_1A];$/;"	v
radtab	brightness.c	/^static float  radtab  [NBTBANDMAX][NBTDETMAX][NBTTABMAX];$/;"	v	file:
ramBandW	raman.c	/^static float *ramBandW; \/\/Raman band widths$/;"	v	file:
ramLam	raman.c	/^static float *ramLam;   \/\/Raman excitation wavelengths$/;"	v	file:
raman_and_sensor_iops	raman.c	/^void raman_and_sensor_iops() {$/;"	f
raman_cor_lee1	raman.c	/^void raman_cor_lee1(l2str *l2rec, int ip) {$/;"	f
raman_cor_lee2	raman.c	/^void raman_cor_lee2(l2str *l2rec, int ip) {$/;"	f
raman_cor_westberry	raman.c	/^void raman_cor_westberry(l2str *l2rec, int ip) {$/;"	f
raman_k_func	raman.c	/^void raman_k_func(l2str *l2rec, int ip) {$/;"	f
raman_opt	input_struc.h	/^  int32_t raman_opt;  \/*RAMAN Rrs correction model*\/ $/;"	m	struct:input_struct
raman_pixel_alloc	raman.c	/^void raman_pixel_alloc(l2str *l2rec) {$/;"	f
raman_qaa	raman.c	/^void raman_qaa(l2str *l2rec, int ip) {$/;"	f
raman_radtran_ed	raman.c	/^void raman_radtran_ed(l2str *l2rec, int ip) {$/;"	f
random_seed	loadl1.c	/^unsigned long int random_seed(){$/;"	f
rank	l2prod_struc.h	/^    int32   rank;$/;"	m	struct:l2prod_index_struct
ratio_531_norm	virtual_constellation.c	/^static float ratio_531_norm = 2.;$/;"	v	file:
rawcal	rawcal.h	/^    } rawcal[MAX_RUNCAL];$/;"	m	struct:__anon44	typeref:struct:__anon44::_rawCalEnt
rayRMeris	raman.c	/^static float rayRMeris[9] = {0.542386, 0.42027, 0.292905, 0.253643, 0.183261,0.129582, 0.102256, 0.0968869, 0.0827108};$/;"	v	file:
rayRModisa	raman.c	/^static float rayRModisa[10] = {0.547288, 0.42027, 0.34228, 0.297133, 0.220407, 0.198927, 0.189253, 0.113592, 0.101232, 0.0959207};$/;"	v	file:
rayRModist	raman.c	/^static float rayRModist[10] = {0.318191, 0.235324, 0.186289, 0.158092, 0.11184, 0.0991017, 0.0935396, 0.0510687, 0.0442263, 0.0413876};$/;"	v	file:
rayROcts	raman.c	/^static float rayROcts[6] = {0.536717, 0.416926, 0.292185, 0.242848, 0.175151, 0.10033};$/;"	v	file:
rayRSeawifs	raman.c	/^static float rayRSeawifs[6] = {0.54735, 0.421483, 0.293296, 0.253583, 0.189253, 0.099783};$/;"	v	file:
rayRViirs	raman.c	/^static float rayRViirs[5] = {0.557971, 0.420939, 0.301639, 0.194109, 0.0992923};$/;"	v	file:
rayRam	raman.c	/^static float *rayRam;  \/\/Rayleigh transmittance at Raman bands$/;"	v	file:
raySMeris	raman.c	/^static float raySMeris[9] = {0.314707, 0.235396, 0.155399, 0.132055, 0.0900582, 0.0594901, 0.0447689, 0.0419177, 0.0345332};$/;"	v	file:
raySModisa	raman.c	/^static float raySModisa[10] = {0.318191, 0.235324, 0.186289, 0.158092, 0.11184, 0.0991017, 0.0935396, 0.0510687, 0.0442263, 0.0413876};$/;"	v	file:
raySModist	raman.c	/^static float raySModist[10] = {0.318191, 0.235324, 0.186289, 0.158092, 0.11184, 0.0991017, 0.0935396, 0.0510687, 0.0442263, 0.0413876};$/;"	v	file:
raySOcts	raman.c	/^static float raySOcts[6] = {0.318539, 0.234992, 0.155723, 0.126061, 0.0868978, 0.0442601};$/;"	v	file:
raySSeawifs	raman.c	/^static float raySSeawifs[6] = {0.318539, 0.234992, 0.155723, 0.132316, 0.0935396, 0.043471};$/;"	v	file:
raySViirs	raman.c	/^static float raySViirs[5] = {0.325312, 0.235234, 0.161186, 0.0963253, 0.0432053};$/;"	v	file:
raySen	raman.c	/^static float *raySen;   \/\/Rayleigh transmittance at sensor bands$/;"	v	file:
ray_press_wang	rayleigh.c	/^float ray_press_wang(float taur, float airmass, float pr)$/;"	f
rayget	raygetpol.f	/^       subroutine rayget(/;"	s
rayleigh	rayleigh.c	/^void rayleigh(int32_t sensorID, int32_t evalmask, int32_t nwave, int pol_opt,$/;"	f
rayleigh_iqu	rayleigh.c	/^void rayleigh_iqu(int32_t sensorID, int32_t evalmask, int pol_opt,$/;"	f
rc	las_iop.c	/^  m_array *rc ;$/;"	m	struct:las_table_struc	file:
rcsid	ftrim.c	/^static char *rcsid = "$Id: ftrim.c,v 1.1 2010\/08\/07 18:44:32 sue Exp $";$/;"	v	file:
rd_gscan	l1_mos_hdf.c	/^int rd_gscan(void)$/;"	f
rd_leapsec	viirs_utls.c	/^int rd_leapsec( leap_str *leap_info )$/;"	f
rd_vir_f_tbl	l1_viirs_h5.c	/^int rd_vir_f_tbl(char *file, int64_t u58_time, int corr_loc) {$/;"	f
rdatreminfo	rdatreminfo.c	/^int32_t rdatreminfo(int32_t sensorID, int32_t evalmask, const char *pname, void **pval) {$/;"	f
rdfilter	filter.c	/^int rdfilter( char *file, fctlstr *fctl, int32_t nbands )$/;"	f
re	l1_czcs_hdf.c	730;"	d	file:
read9km_mask	read9km_mask.c	/^int read9km_mask(char *file, char *mask)$/;"	f
readBinScanLine_float	jplaeriallib.c	/^int readBinScanLine_float(float *Lt, int32_t recnum, int32_t npix, double *gain, int nbands, int numBands, int interleave, int swap, FILE *ptr) {$/;"	f
readBinScanLine_int2	jplaeriallib.c	/^int readBinScanLine_int2(float *Lt, int32_t recnum, int32_t npix, double *gain, int nbands, int numBands, int interleave, int swap, FILE *ptr) {$/;"	f
readElev	elev.c	/^float readElev(grid_info_t* elevGrid, int depth_mode, float lat, float lon) {$/;"	f
readNextLine	l1_oli.c	/^void readNextLine(FILE* fp, char* tag, int* i, char* val) {$/;"	f
readNextLine_jpl	jplaeriallib.c	/^void readNextLine_jpl(FILE* fp, char* tag, char* val) {$/;"	f
readWavInfo_jpl	jplaeriallib.c	/^void readWavInfo_jpl(FILE* fp, char* tag, char* val) {$/;"	f
read_aer	aer_io.c	/^int read_aer( filehandle *file, int32_t recnum, aestr *aerec)$/;"	f
read_aerhdr	aer_io.c	/^int read_aerhdr(filehandle *file)$/;"	f
read_aerosol_par	par_utils.c	/^void read_aerosol_par(l2str *l2rec, int32_t nbands, float *tablewavelengths,$/;"	f
read_bt_table	brightness.c	/^int read_bt_table(char *filename, int nbands, int ndets)$/;"	f
read_glbl_attr	mscal_struc.c	/^int read_glbl_attr(idDS ds_id, char *name, VOIDP ptr) $/;"	f
read_l3bin	read_l3bin.cpp	/^extern "C" int32_t read_l3bin(char *file, l3binstr *l3bin, int32_t nbands) {$/;"	f
read_las_tables	las_iop.c	/^void read_las_tables(int sensorID)$/;"	f
read_oli_angles	l1_oli.c	/^int read_oli_angles(char *file, int32_t npix, int32_t nscan, int32_t iscan, $/;"	f
read_partial_phase_integrations	dtran_brdf.f	/^      subroutine read_partial_phase_integrations$/;"	s
read_sds_1scan	l1_hmodis_hdf.c	/^int read_sds_1scan(sds_struct *sds,$/;"	f
read_sfcorrtables	l1_hmodis_hdf.c	/^void read_sfcorrtables(sfcorr_table *sfcorr, int32_t sensorID) {$/;"	f
read_sst3_coeff	sst.c	/^void read_sst3_coeff(l2str *l2rec, float bounds[6][2], float coef[6][6],$/;"	f
read_sst4_coeff	sst.c	/^void read_sst4_coeff(int32 sensorID, char *filename, int32_t year, int32_t day,$/;"	f
read_sst_coeff	sst.c	/^void read_sst_coeff(l2str *l2rec, float bounds[6][2], float coef[6][7],$/;"	f
read_target	target_io.c	/^int read_target( filehandle *file, int32_t recnum, tgstr *tgrec)$/;"	f
read_target_l3	target_io.c	/^int read_target_l3(filehandle *file, l1str *l1rec, int32_t nbands, tgstr *tgrec)$/;"	f
read_targethdr	target_io.c	/^int read_targethdr(filehandle *file)$/;"	f
read_tstar	dtran_brdf.f	/^      SUBROUTINE read_tstar$/;"	s
read_v5_sst_coeff	sst.c	/^void read_v5_sst_coeff(l2str *l2rec, float bounds[6][2], float coef[6][7], float *sstrefoffday, float *sstrefoffnight)$/;"	f
read_var_1line	l1b_viirs_nc.c	/^int read_var_1line(var_str_nc *var, size_t iline) {$/;"	f
read_water_spectra	water.c	/^void read_water_spectra(void) $/;"	f
readl1	l1_io.c	/^int readl1( filehandle *l1file, int32_t recnum, l1str *l1rec)$/;"	f
readl1_aci_hdf	l1_aci_hdf.c	/^int readl1_aci_hdf(filehandle *file, int32 scan, l1str *l1rec) {$/;"	f
readl1_aviris	l1_aviris.c	/^int readl1_aviris( filehandle *file, int recnum, l1str *l1rec, int lonlat)$/;"	f
readl1_czcs	l1_czcs_hdf.c	/^int readl1_czcs(filehandle *file, int32_t recnum, l1str *l1rec)$/;"	f
readl1_goci	l1_goci.c	/^readl1_goci( filehandle *file, int recnum, l1str *l1rec, int lonlat)$/;"	f
readl1_hdf_g	l1_hdf_generic_read.c	/^int readl1_hdf_g(filehandle *file, int32 recnum, l1str *l1rec)$/;"	f
readl1_hico_h5	l1_hico_h5.c	/^int readl1_hico_h5(filehandle *file, int32_t scan, l1str *l1rec, int lonlat) {$/;"	f
readl1_hmodis_hdf	l1_hmodis_hdf.c	/^int readl1_hmodis_hdf(filehandle *l1file,$/;"	f
readl1_lonlat	l1_io.c	/^int readl1_lonlat( filehandle *l1file, int32_t recnum, l1str *l1rec)$/;"	f
readl1_lonlat_hmodis_hdf	l1_hmodis_hdf.c	/^int readl1_lonlat_hmodis_hdf(filehandle *l1file, int32_t line, l1str *l1rec)$/;"	f
readl1_lonlat_meris_N1	l1_meris_N1.c	/^int readl1_lonlat_meris_N1(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_lonlat_viirs_nc	l1_viirs_nc.c	/^int readl1_lonlat_viirs_nc(filehandle *file, int32 line, l1str *l1rec)$/;"	f
readl1_lonlat_viirs_nc	l1_viirs_nc_stub.c	/^int readl1_lonlat_viirs_nc(filehandle *file, int32 line, l1str *l1rec)$/;"	f
readl1_meris_CC	l1_meris_CC.c	/^int readl1_meris_CC(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_meris_N1	l1_meris_N1.c	/^int readl1_meris_N1(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_mos_hdf	l1_mos_hdf.c	/^int readl1_mos_hdf(filehandle *l1file, int32_t recnum, l1str *l1rec)$/;"	f
readl1_nc_generic	l1_nc_generic_read.c	/^int readl1_nc_generic(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_ocm2_hdf	l1_ocm2_hdf.c	/^int readl1_ocm2_hdf(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_ocm_hdf	l1_ocm_hdf.c	/^int readl1_ocm_hdf(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_ocmdb_hdf	l1_ocmdb_hdf.c	/^int readl1_ocmdb_hdf(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_octs_hdf	l1_octs_hdf.c	/^int readl1_octs_hdf(filehandle *l1file, int32_t recnum, l1str *l1rec)$/;"	f
readl1_olci	l1_olci.c	/^int readl1_olci(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_oli	l1_oli.c	/^int readl1_oli( filehandle *file, int recnum, l1str *l1rec, int lonlat) {$/;"	f
readl1_orca	l1_orca.c	/^int readl1_orca(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1_prism	l1_prism.c	/^int readl1_prism( filehandle *file, int recnum, l1str *l1rec, int lonlat)$/;"	f
readl1_viirs_h5	l1_viirs_h5.c	/^int readl1_viirs_h5(filehandle * file, int32 dline, l1str * l1rec, int lonlat) {$/;"	f
readl1_viirs_nc	l1_viirs_nc.c	/^int readl1_viirs_nc(filehandle *file, int32 line, l1str *l1rec)$/;"	f
readl1_viirs_nc	l1_viirs_nc_stub.c	/^int readl1_viirs_nc(filehandle *file, int32 line, l1str *l1rec)$/;"	f
readl1_xcal_hdf	l1_xcal_hdf.c	/^int readl1_xcal_hdf(filehandle *file, int32 scan, l1str *l1rec)$/;"	f
readl1a_lonlat_seawifs	l1a_seawifs.c	/^int readl1a_lonlat_seawifs(filehandle *file, int32 recnum, l1str *l1rec)$/;"	f
readl1a_osmi	l1a_osmi.c	/^int readl1a_osmi(filehandle *file, int32_t recnum, l1str *l1rec)$/;"	f
readl1a_seawifs	l1a_seawifs.c	/^int readl1a_seawifs(filehandle *file, int32 recnum, l1str *l1rec)$/;"	f
readl1b_lonlat_viirs_nc	l1b_viirs_nc.c	/^int readl1b_lonlat_viirs_nc(filehandle *l1file,$/;"	f
readl1b_viirs_nc	l1b_viirs_nc.c	/^int readl1b_viirs_nc(filehandle *l1file,$/;"	f
recnumSST	sst.c	/^static int32_t recnumSST = -1;$/;"	v	file:
ref	l1_hmodis_hdf.c	/^static modis_sds ref[REF_NUM_SDS], geo[GEO_NUM_SDS], l1b[L1B_NUM_SDS];$/;"	v	file:
ref_day	l1a_seawifs.c	/^int16           ref_day;$/;"	v
ref_minute	l1a_seawifs.c	/^int16           ref_minute;$/;"	v
ref_year	l1a_seawifs.c	/^int16           ref_year;$/;"	v
refen	pml_iop_tables.c	/^float *refen;    \/* The pointer for refen.*\/$/;"	v
refind	pml_iop_tables.c	/^static int32_t refind=0l; \/* current index *\/$/;"	v	file:
refind_max	pml_iop_tables.c	/^static int32_t refind_max=0l;$/;"	v	file:
refl_offset	l1_oli.c	/^    double *refl_scale, *refl_offset;$/;"	m	struct:oli_struct	file:
refl_scale	l1_oli.c	/^    double *refl_scale, *refl_offset;$/;"	m	struct:oli_struct	file:
reflect	amoeba.c	/^double reflect(double *pnts, double y[], double psum[], short ndim,$/;"	f
reflectance	swim.c	/^static double* reflectance; \/\/ bottom reflectance for each sensor wavelength (reflectance[bottomType][band])$/;"	v	file:
refls	swim.c	/^static float refls[10] = {0.167663599, 0.197465145, 0.224745351, 0.24005827,$/;"	v	file:
reflw	swim.c	/^static float reflw[10] = { 412.0, 443.0, 469.0, 488.0, 531.0, 551.0, 555.0,$/;"	v	file:
reform_octs_time	l1_octs_hdf.c	/^void reform_octs_time(char *time) $/;"	f
relhumid	input_struc.h	/^  float  relhumid;               \/* use fixed rh as specified        *\/$/;"	m	struct:input_struct
resAerRho	atmcor_soa.f	/^      REAL     resAerRho(/;"	v
resTotRho	atmcor_soa.f	/^      REAL     resAerRho(NLAMBDA),resWatRho(NLAMBDA),$/;"	v
resWatRho	atmcor_soa.f	/^      REAL     resAerRho(NLAMBDA),resWatRho(/;"	v
resolution	input_struc.h	/^  int32_t   resolution;     \/* process at this nadir pixel res (meters) *\/$/;"	m	struct:input_struct
resolution	l1_hmodis_hdf.c	/^    int16_t resolution; \/*< native resolution: 1000, 500 or 250 meters *\/$/;"	m	struct:__anon31	file:
resolution	l1_hmodis_hdf.c	/^    int16_t resolution; \/*< native resolution: 1000, 500 or 250 meters *\/$/;"	m	struct:__anon32	file:
resolution	lonlat2pixline.h	/^        int32_t resolution; \/**< output resolution for MODIS (-1,1000,500,250) *\/$/;"	m	struct:lonlat2pixline_struct
resp	etbpsub.f	278;"	c	function:etintegrate
resp	etbpsub.f	394;"	c	subroutine:etloadresp
rflag	input_struc.h	/^  char   rflag[1024];$/;"	m	struct:input_struct
rgb	input_struc.h	/^  int32_t   rgb[3];$/;"	m	struct:input_struct
rgb_map	l1_ocmdb_hdf.c	/^static int32_t   *rgb_map;$/;"	v	file:
rh	aerosol.c	/^    float rh;$/;"	m	struct:aermod_struct	file:
rh	l1_struc.h	/^    float  *rh;$/;"	m	struct:l1_struct
rh	l2_struc.h	/^    float  *rh; \/\/relative humidity$/;"	m	struct:l2_struct
rhaer	aerosol.c	/^int rhaer(int32_t sensorID, float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l,$/;"	f
rhoCboxstats	sst.c	/^int32_t rhoCboxstats(int32_t ip, int32_t nx, int32_t ny, statstr *statrec) {$/;"	f
rhoCirrus_maxmin	sst.c	/^static float *rhoCirrus_maxmin = NULL;$/;"	v	file:
rhoCirrus_min	sst.c	/^static float *rhoCirrus_min = NULL;$/;"	v	file:
rho_cirrus	l1_struc.h	/^    float  *rho_cirrus;$/;"	m	struct:l1_struct
rho_cirrus	l2_struc.h	/^    float  *rho_cirrus; \/\/Cirrus cloud reflectance$/;"	m	struct:l2_struct
rhoa	aerosol.c	/^    float  rhoa;$/;"	m	struct:rhoaT_struct	file:
rhoaT_struct	aerosol.c	/^typedef struct rhoaT_struct {$/;"	s	file:
rhoaTstr	aerosol.c	/^} rhoaTstr;$/;"	t	typeref:struct:rhoaT_struct	file:
rhoa_to_rhoas	aerosol.c	/^int rhoa_to_rhoas(int32_t sensorID, int modnum, float solz, float senz, float phi, float wv,$/;"	f
rhoamin	input_struc.h	/^  float  rhoamin;                \/* low aerosol threshold            *\/$/;"	m	struct:input_struct
rhoas_to_rhoa	aerosol.c	/^void rhoas_to_rhoa(int32_t sensorID, int modnum, float solz, float senz, float phi, float wv, $/;"	f
rhof	l1_struc.h	/^    float  *rhof;$/;"	m	struct:l1_struct
rhof	l2_struc.h	/^    float  *rhof;$/;"	m	struct:l2_struct
rhos	l1_struc.h	/^    float  *rhos;$/;"	m	struct:l1_struct
rhos	l2_struc.h	/^    float  *rhos; \/\/surface reflectance (Rayleigh corrected)$/;"	m	struct:l2_struct
rhot16	sst.c	/^static float *rhot16 = NULL;$/;"	v	file:
rhot16_min	sst.c	/^static float *rhot16_min = NULL;$/;"	v	file:
rhotNIR7	sst.c	/^static float *rhotNIR7 = NULL;$/;"	v	file:
rhotNIR7_min	sst.c	/^static float *rhotNIR7_min = NULL;$/;"	v	file:
rhotRED	sst.c	/^static float *rhotRED = NULL;$/;"	v	file:
rhotRED_maxmin	sst.c	/^static float *rhotRED_maxmin = NULL;$/;"	v	file:
rhotRED_min	sst.c	/^static float *rhotRED_min = NULL;$/;"	v	file:
rhotboxstats	sst.c	/^int32_t rhotboxstats(int32_t ip, int ib, int nbands, int32_t nx, int32_t ny,$/;"	f
rhown_nir	get_rhown_nir.c	/^void rhown_nir(char *fqfile,float chl, float aw[], float bbw[], float Rrs[], float wave[],$/;"	f
rhown_red	get_rhown_nir.c	/^void rhown_red(char *fqfile, float chl, float aw[], float bbw[], float Rrs[],$/;"	f
right	nr.h	/^	unsigned long *icod,*ncod,*left,*right,nch,nodemax;$/;"	m	struct:__anon42
rightLon	swim.c	/^static double rightLon;         \/\/ longitude of benthicProportion[0][numLon-1][bottomType]$/;"	v	file:
ring_sat	l1_czcs_hdf.c	/^char *ring_sat;  \/* set to 1 if 443, 520 or 550 are saturated for ringing $/;"	v
rlMeris	raman.c	/^static float rlMeris[9] = {362., 385., 420., 435., 471., 513., 543., 554., 572.};$/;"	v	file:
rlModisa	raman.c	/^static  float rlModisa[10] = {362., 383., 405., 419., 450., 462., 467., 529., 544., 552.};$/;"	v	file:
rlModist	raman.c	/^static float rlModist[10] = {362., 385., 405., 418., 450., 462., 467., 529., 544., 552.};$/;"	v	file:
rlOcts	raman.c	/^static float rlOcts[6] = {362., 385., 421., 440., 475., 544.};$/;"	v	file:
rlSeawifs	raman.c	/^static float rlSeawifs[6] = {363., 386., 421., 435., 467., 545.};$/;"	v	file:
rlViirs	raman.c	/^static float rlViirs[5] = {360., 385., 417., 464., 547.};$/;"	v	file:
rms	owt.c	/^    float  rms;$/;"	m	struct:error_struc	file:
rotateLon	lonlat2pixline.c	/^static float rotateLon(float lon, float ref) {$/;"	f	file:
rowlon2bin	bin_climatology.c	/^int32 rowlon2bin(int16 row, double lon){$/;"	f
rp94	atrem_corl1.h	/^    double rp94, r1p14;$/;"	m	struct:__anon22
rrs	get_qaa.c	/^static float *rrs;           \/* below-water remote sensing reflectance  *\/$/;"	v	file:
rrs_above_to_below	giop.c	/^float rrs_above_to_below(float Rrs) $/;"	f
rrs_below_to_above	giop.c	/^float rrs_below_to_above(float rrs_s) $/;"	f
rrs_opt	giop.h	/^  int rrs_opt;         \/* rrs function type    *\/$/;"	m	struct:giop_ctl_str
rrsdiff	giop.c	/^static float  *rrsdiff;$/;"	v	file:
rst_db	pml_iop_tables.c	/^double spm_max,spm_min,rst_spm,rst_db,rst_n,rst_n_step;$/;"	v
rst_n	pml_iop_tables.c	/^double spm_max,spm_min,rst_spm,rst_db,rst_n,rst_n_step;$/;"	v
rst_n_step	pml_iop_tables.c	/^double spm_max,spm_min,rst_spm,rst_db,rst_n,rst_n_step;$/;"	v
rst_spm	pml_iop_tables.c	/^double spm_max,spm_min,rst_spm,rst_db,rst_n,rst_n_step;$/;"	v
run_btboxmaxmin	sst.c	/^void run_btboxmaxmin(int npix, int btidx, float *maxminarr) {$/;"	f
run_btboxmin	sst.c	/^void run_btboxmin(int npix, int btidx, float *minarr) {$/;"	f
run_btboxstdev	sst.c	/^void run_btboxstdev(int npix, int btidx, float *stdevarr) {$/;"	f
run_cdom_morel	cdom_morel.c	/^void run_cdom_morel(l2str *l2rec)$/;"	f
run_giop	giop.c	/^void run_giop(l2str *l2rec)$/;"	f
run_gsm	gsm.c	/^void run_gsm(l2str *l2rec)$/;"	f
run_gsm_amb	gsm.c	/^void run_gsm_amb(l2str *l2rec)$/;"	f
run_gsm_lm	gsm.c	/^void run_gsm_lm(l2str *l2rec)$/;"	f
run_las	las_iop.c	/^void run_las(l2str *l2rec)$/;"	f
run_niwa	get_niwa_iop.c	/^static void run_niwa(l2str *l2rec)$/;"	f	file:
run_owt	owt.c	/^void run_owt(l2str *l2rec)$/;"	f
run_pml	get_pml.c	/^void run_pml(l2str *l2rec)$/;"	f
run_qaa	get_qaa.c	/^static void run_qaa(l2str *l2rec)$/;"	f	file:
run_raman_cor	raman.c	/^void run_raman_cor(l2str *l2rec, int ip) {$/;"	f
run_rhoCboxmaxmin	sst.c	/^void run_rhoCboxmaxmin(int npix, float *maxminarr, float *minarr) {$/;"	f
run_rhotboxmaxmin	sst.c	/^void run_rhotboxmaxmin(int npix, int btidx, int nbands, float *maxminarr) {$/;"	f
run_rhotboxmin	sst.c	/^void run_rhotboxmin(int npix, int btidx, int nbands, float *minarr) {$/;"	f
run_soa_sma	soa_sma.c	/^int run_soa_sma(l2str *l2rec, int32_t ip)$/;"	f
run_sst	sst.c	/^void run_sst(l2str *l2rec) {$/;"	f
run_swim	swim.c	/^void run_swim(l2str *l2rec) {$/;"	f
runcal	runcal.h	/^    } runcal[MAX_RUNCAL];$/;"	m	struct:__anon45	typeref:struct:__anon45::_runCalEnt
rwMeris	raman.c	/^static float rwMeris[9] = {7., 7., 8., 8., 9., 11., 12., 14., 13.};$/;"	v	file:
rwModisa	raman.c	/^static  float rwModisa[10] = {10., 7., 10., 8., 9., 9., 13., 29., 12., 12.};$/;"	v	file:
rwModist	raman.c	/^static float rwModist[10] = {10., 7., 10., 8., 9., 9., 13., 29., 12., 12.};$/;"	v	file:
rwOcts	raman.c	/^static float rwOcts[6] = {13., 14., 16., 13., 16., 18.};$/;"	v	file:
rwSeawifs	raman.c	/^static float rwSeawifs[6] = {13., 13., 13., 13., 13., 14.};$/;"	v	file:
rwViirs	raman.c	/^static float rwViirs[5] = {13., 10., 13., 13., 14.};$/;"	v	file:
s	carder.c	/^static double s;                \/* ag exponential slope prm           *\/$/;"	v	file:
s_lat	anc_acq.c	/^  float s_lat;  \/* start latitude for a grid *\/$/;"	m	struct:met_sto_str_d	file:
s_lon	anc_acq.c	/^  float s_lon;  \/* start longitude for a grid *\/$/;"	m	struct:met_sto_str_d	file:
samp_edges	l1_octs_hdf.c	/^static int32 samp_edges[8];$/;"	v	file:
samp_start	l1_octs_hdf.c	/^static int32 samp_start[8];$/;"	v	file:
sample_table	l1_octs_hdf.c	/^static int16 sample_table[3][8][2][400][2];$/;"	v	file:
satname2xsatid	l1_aci_hdf.c	/^int satname2xsatid(const char* satname) {$/;"	f
satred	sst.c	/^static float satred;$/;"	v	file:
satzen	input_struc.h	/^  float  satzen;                 \/* sensor zenith angle threshold    *\/$/;"	m	struct:input_struct
satzenmask	input_struc.h	/^  int32_t   satzenmask;             \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
sc_ana	l1a_osmi.c	/^static float32 *sc_ana;$/;"	v	file:
sc_ttag	l1a_osmi.c	/^static float64 *sc_ttag;$/;"	v	file:
sc_ttag_inc	l1a_osmi.c	/^static float64 *sc_ttag_inc;$/;"	v	file:
scale	l1_oli.c	/^    double *scale, *offset;$/;"	m	struct:oli_struct	file:
scale	l1_viirs_h5.c	/^static float *scale, *offset; \/* scaling factors *\/$/;"	v	file:
scale_488	get_owmc.c	/^static float scale_488;$/;"	v	file:
scale_551	get_owmc.c	/^static float scale_551;$/;"	v	file:
scale_l1bvals	l1b_viirs_nc.c	/^int scale_l1bvals(l1str *l1rec) {$/;"	f
scale_short	l1b_viirs_nc.c	/^int scale_short(var_str_nc *var, float* dest) {$/;"	f
scale_sst	get_owmc.c	/^static float scale_sst;$/;"	v	file:
scan	l1_hmodis_hdf.c	/^} scan;$/;"	v	typeref:struct:__anon34	file:
scan	rawcal.h	/^	FLOAT32	scan;$/;"	m	struct:__anon44::_rawCalEnt
scanLineGrp	l1_viirs_nc.c	/^static int scanLineGrp;$/;"	v	file:
scanQualityId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
scanStartTimeId	l1_viirs_nc.c	/^static int scanStartTimeId;$/;"	v	file:
scan_convert	main_l1mapgen.c	/^int scan_convert(XPoint * ptsIn) {$/;"	f
scan_ell	l1a_seawifs.c	/^  float32 scan_ell[6];$/;"	m	struct:__anon27	file:
scan_map	l1_viirs_h5.c	/^static int *scan_map; \/* real dataset scan location *\/$/;"	v	file:
scan_mod	l1a_seawifs.c	/^float32         scan_mod[2][1285];$/;"	v
scan_start_tai	l1_olci.c	/^static int64_t *scan_start_tai;$/;"	v	file:
scan_start_tai	l1_orca.c	/^static double *scan_start_tai, *scan_stop_tai;$/;"	v	file:
scan_start_tai	l1_viirs_nc.c	/^static double scan_start_tai = -999;$/;"	v	file:
scan_start_time	l1b_viirs_nc.c	/^    double *scan_start_time;$/;"	m	struct:__anon29	file:
scan_stop_tai	l1_orca.c	/^static double *scan_start_tai, *scan_stop_tai;$/;"	v	file:
scan_temp	l1a_seawifs.c	/^  int16   scan_temp[8];$/;"	m	struct:__anon27	file:
scandim	l1_hmodis_hdf.c	/^    int32_t scandim;    \/*< index of scan dimension *\/$/;"	m	struct:__anon32	file:
scandim	l1_hmodis_hdf.c	/^typedef struct { int32_t index; int32_t scandim; char *name; } sdslist;$/;"	m	struct:__anon30	file:
scanline	mipoly.h	/^     int scanline;              \/* the scanline represented *\/$/;"	m	struct:_ScanLineList
scanlines	mipoly.h	/^     ScanLineList scanlines;   \/* header node              *\/$/;"	m	struct:__anon39
scansPerScene	l1_octs_hdf.c	/^static int32 scansPerScene;$/;"	v	file:
scat_a	pml_iop_tables.c	/^float scat_a, scat_b, scat_c, scat_n, scat_l, scat_l_modis;$/;"	v
scat_b	pml_iop_tables.c	/^float scat_a, scat_b, scat_c, scat_n, scat_l, scat_l_modis;$/;"	v
scat_c	pml_iop_tables.c	/^float scat_a, scat_b, scat_c, scat_n, scat_l, scat_l_modis;$/;"	v
scat_l	pml_iop_tables.c	/^float scat_a, scat_b, scat_c, scat_n, scat_l, scat_l_modis;$/;"	v
scat_l_modis	pml_iop_tables.c	/^float scat_a, scat_b, scat_c, scat_n, scat_l, scat_l_modis;$/;"	v
scat_n	pml_iop_tables.c	/^float scat_a, scat_b, scat_c, scat_n, scat_l, scat_l_modis;$/;"	v
scatt	aerosol.c	/^    float  *scatt;$/;"	m	struct:aermodtab_struct	file:
scattang	l1_struc.h	/^    float  *scattang;$/;"	m	struct:l1_struct
scattang	l2_struc.h	/^    float  *scattang; \/\/scattering angle$/;"	m	struct:l2_struct
scene_center_lat	scene_meta.h	/^  float scene_center_lat;$/;"	m	struct:scene_meta_str
scene_center_lon	scene_meta.h	/^  float scene_center_lon;$/;"	m	struct:scene_meta_str
scene_center_solz	scene_meta.h	/^  float scene_center_solz;$/;"	m	struct:scene_meta_str
scene_meta_get	scene_meta.c	/^scnstr *scene_meta_get(void)$/;"	f
scene_meta_init	scene_meta.c	/^void scene_meta_init(void)$/;"	f
scene_meta_put	scene_meta.c	/^void scene_meta_put(l1str *l1rec)$/;"	f
scene_meta_str	scene_meta.h	/^typedef struct scene_meta_str {$/;"	s
scene_meta_write	scene_meta.c	/^void scene_meta_write(idDS ds_id)$/;"	f
scl_rad	l1_viirs_h5.c	/^static unsigned short *scl_rad; \/*  storage for the scaled radiance values *\/$/;"	v	file:
scn	l1b_viirs_nc.c	/^static var_str_nc *scn[NVARS_SCN];$/;"	v	file:
scn_fmt	l1_struc.h	/^    int16 scn_fmt;  \/* scan format of data, 0 std, else unaggregated *\/$/;"	m	struct:l1_struct
scn_fmt	l1_viirs_h5.c	/^static int16_t scn_fmt; \/* local scan format store *\/$/;"	v	file:
scn_var	l1b_viirs_nc.c	/^enum scn_var {$/;"	g	file:
scnstr	scene_meta.h	/^} scnstr;$/;"	t	typeref:struct:scene_meta_str
sd	aerosol.c	/^    int   sd;$/;"	m	struct:aermod_struct	file:
sd	sst.c	/^    float sd;$/;"	m	struct:stat_struct	file:
sd_id	filehandle.h	/^    int32_t   sd_id;               \/* hdf file id for the opened output file *\/$/;"	m	struct:filehandle_struct
sd_id	l1_aci_hdf.c	/^static int32 sd_id;$/;"	v	file:
sd_id	l1_generic_write.c	/^static int32_t sd_id;$/;"	v	file:
sd_id	l1_hdf_generic_write.c	/^static int32 sd_id;$/;"	v	file:
sd_id	l1_xcal_hdf.c	/^static int32 sd_id;$/;"	v	file:
sd_id_g	l1_aci_hdf.c	/^static int32 sd_id_g;$/;"	v	file:
sday	l1_czcs_hdf.c	/^int     syear, sday;       \/* data start date                  *\/$/;"	v
sday	l1_hico_h5.c	/^    int32_t sday;$/;"	m	struct:hico_private_struct	file:
sday	l1a_osmi.c	/^static int16   syear, sday;       \/* data start date                  *\/$/;"	v	file:
sday	l1a_seawifs.c	/^int16   syear, sday;       \/* data start date                  *\/$/;"	v
sdfid	bin_climatology.c	/^static int32 sdfid;$/;"	v	file:
sdr_band_typ	l1_viirs_h5.c	/^static char sdr_band_typ[MAXBANDS]; \/* 0 if scaled, 1 if float *\/$/;"	v	file:
sdr_fid	l1_viirs_h5.c	/^static h5io_str geo_fid, sdr_fid[MAXBANDS];$/;"	v	file:
sds	l1_hmodis_hdf.c	/^    sds_struct *sds;    \/*< array of data set pointers *\/$/;"	m	struct:__anon31	file:
sds	l1_hmodis_hdf.c	/^    sds_struct sds;     \/*< a single SDS = 1 or more bands *\/$/;"	m	struct:__anon32	file:
sdsindex	l1_hmodis_hdf.c	/^    int16_t sdsindex;   \/*< which SDS contains the band *\/$/;"	m	struct:__anon33	file:
sdslist	l1_hmodis_hdf.c	/^typedef struct { int32_t index; int32_t scandim; char *name; } sdslist;$/;"	t	typeref:struct:__anon30	file:
seawater_bb	seawater.c	/^float seawater_bb (float wave, float sst, float sss) $/;"	f
seawater_betat	seawater.c	/^float seawater_betat (float sst, float sss) $/;"	f
seawater_density	seawater.c	/^float seawater_density (float sst, float sss) $/;"	f
seawater_dlnaswds	seawater.c	/^float seawater_dlnaswds (float sst, float sss) $/;"	f
seawater_dnswdrho	seawater.c	/^float seawater_dnswdrho (float n_sw) $/;"	f
seawater_get_a	seawater_get.c	/^float seawater_get_a(int32_t ip, int32_t ib)$/;"	f
seawater_get_bb	seawater_get.c	/^float seawater_get_bb(int32_t ip, int32_t ib)$/;"	f
seawater_get_n	seawater_get.c	/^float seawater_get_n(int32_t ip, int32_t ib)$/;"	f
seawater_nsw	seawater.c	/^float seawater_nsw (float wave, float sst, float sss, float *dnswds) $/;"	f
seawater_opt	input_struc.h	/^  int32_t   seawater_opt;   \/* pure seawater IOP options                *\/$/;"	m	struct:input_struct
seawater_set	seawater_get.c	/^void seawater_set(l1str *l1rec)$/;"	f
seawifs_map	niwa_iop.c	/^static const int seawifs_map[VBANDS] = {0, 1, 2, 3, 4, 5};$/;"	v	file:
seawifs_meta	l12_seawifs.c	/^int32 seawifs_meta(filehandle *l1file, filehandle *ofile, $/;"	f
second	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
second	scene_meta.c	/^static int   second       = 1;$/;"	v	file:
sed_ref	pml_iop_tables.c	/^float sed_ref(float spm, int band)$/;"	f
sen_mat	l1a_seawifs.c	/^  float32 sen_mat[3*3];$/;"	m	struct:__anon27	file:
sena	aviris.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:aviris_struct
sena	l1_hmodis_hdf.c	/^    float *sena;      \/*< SensorAzimuth *\/$/;"	m	struct:__anon34	file:
sena	l1_meris_CC.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
sena	l1_mos_hdf.c	/^static float sena    [NS][NP];$/;"	v	file:
sena	l1_ocm2_hdf.c	/^static float32 **sena = NULL;$/;"	v	file:
sena	l1_octs_hdf.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
sena	l1_struc.h	/^    float  *sena;$/;"	m	struct:l1_struct
sena	l1a_osmi.c	/^static float32 sena[LAC_PIXEL_NUM];$/;"	v	file:
sena	l1a_seawifs.c	/^float32 sena[LAC_PIXEL_NUM];$/;"	v
sena	l2_struc.h	/^    float  *sena; \/\/sensor azimuth angle$/;"	m	struct:l2_struct
sena	olci.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:olci_struct
sena	prism.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:prism_struct
sena1	l1_octs_hdf.c	/^static float32 solz1, sola1, senz1, sena1;$/;"	v	file:
senaId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
senaz_l2	atrem_corl1.h	/^    float senzn_l2,senaz_l2,solzn_l2;$/;"	m	struct:__anon20
sensBandW	raman.c	/^static float *sensBandW; \/\/Sensor bandwidths$/;"	v	file:
sensorID	aerosol.c	/^    int32_t   sensorID;$/;"	m	struct:aermodtab_struct	file:
sensorID	calfile_utils.h	/^    int32_t   sensorID;$/;"	m	struct:cal_struct
sensorID	filehandle.h	/^    int32_t   sensorID;$/;"	m	struct:filehandle_struct
sensorID	filehdr_struc.h	/^    int32_t   sensorID;$/;"	m	struct:filehdr_struct
sensorID	input_struc.h	/^  int32_t   sensorID;$/;"	m	struct:input_struct
sensorID	l1_generic_write.c	/^static int32_t sensorID;$/;"	v	file:
sensorID	l1_hdf_generic_write.c	/^static int32 sensorID;$/;"	v	file:
sensorID	l1_struc.h	/^    int32_t   sensorID;      $/;"	m	struct:l1_struct
sensorID	l2_struc.h	/^    int32_t   sensorID;$/;"	m	struct:l2_struct
sensorID	mscal_struc.h	/^    int32_t   sensorID;$/;"	m	struct:mscal_struct
sensorID	read_l3bin.h	/^    int32_t   sensorID;$/;"	m	struct:l3bin_struct
sensorID	target_struc.h	/^    int32_t   sensorID;$/;"	m	struct:target_struct
sensorID	vcal_struc.h	/^    int32_t   sensorID;$/;"	m	struct:vcal_struct
sensor_id	main_l1info.c	/^    int sensor_id;$/;"	m	struct:__anon38	file:
senz	aerosol.c	/^    float  *senz;$/;"	m	struct:aermodtab_struct	file:
senz	aviris.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:aviris_struct
senz	l1_hmodis_hdf.c	/^    float *senz;      \/*< SensorZenith *\/$/;"	m	struct:__anon34	file:
senz	l1_meris_CC.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
senz	l1_mos_hdf.c	/^static float senz    [NS][NP];$/;"	v	file:
senz	l1_ocm2_hdf.c	/^static float32 **senz = NULL;$/;"	v	file:
senz	l1_octs_hdf.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
senz	l1_struc.h	/^    float  *senz;$/;"	m	struct:l1_struct
senz	l1a_osmi.c	/^static float32 senz[LAC_PIXEL_NUM];$/;"	v	file:
senz	l1a_seawifs.c	/^float32 senz[LAC_PIXEL_NUM];$/;"	v
senz	l2_struc.h	/^    float  *senz; \/\/sensor zenith angle$/;"	m	struct:l2_struct
senz	olci.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:olci_struct
senz	prism.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:prism_struct
senz	sst.c	/^    float senz[NSENZMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
senz	sst.c	/^    float senz[NSENZMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
senz1	l1_octs_hdf.c	/^static float32 solz1, sola1, senz1, sena1;$/;"	v	file:
senzId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
senzMaskOn	l1_struc.h	/^    int32_t   senzMaskOn;$/;"	m	struct:l1_struct
senzmax	l1_struc.h	/^    char   *senzmax;$/;"	m	struct:l1_struct
senzn_l2	atrem_corl1.h	/^    float senzn_l2,senaz_l2,solzn_l2;$/;"	m	struct:__anon20
setTitleString	get_l2prod_index.c	/^void setTitleString(l2prodstr* product) {$/;"	f
set_cb_model	gsm.c	/^void set_cb_model(float wave[],int32_t nwave,float lon,float lat,int32_t day)$/;"	f
set_f_cal_corr	l1_viirs_h5.c	/^int set_f_cal_corr(h5io_str *g_id, filehandle *file, int64_t u58_time) {$/;"	f
set_flags_sst	sst.c	/^void set_flags_sst(l2str *l2rec) {$/;"	f
set_flags_sst3	sst.c	/^void set_flags_sst3(l2str *l2rec) {$/;"	f
set_flags_sst4	sst.c	/^void set_flags_sst4(l2str *l2rec) {$/;"	f
set_iop_flag	flags_iop.c	/^void set_iop_flag(float32 wave[], int32 nwave, $/;"	f
set_l1rec_scanvals	l1_hmodis_hdf.c	/^int set_l1rec_scanvals(const int32_t iscan, l1str *l1rec) {$/;"	f
set_north_south_boundaries	main_l1info.c	/^set_north_south_boundaries(float32 lat, float32 *northern_boundary, float32 *southern_boundary) {$/;"	f
set_qual_sst	sst.c	/^void set_qual_sst(l2str *l2rec) {$/;"	f
set_qual_sst3	sst.c	/^void set_qual_sst3(l2str *l2rec) {$/;"	f
set_qual_sst4	sst.c	/^void set_qual_sst4(l2str *l2rec) {$/;"	f
set_raman_aph_uv	raman.c	/^void set_raman_aph_uv(l2str *l2rec, int ip){$/;"	f
set_sses_sst3v6mv	sst.c	/^void set_sses_sst3v6mv(l2str *l2rec) {$/;"	f
set_sses_sst4v6mv	sst.c	/^void set_sses_sst4v6mv(l2str *l2rec) {$/;"	f
set_sses_sstv6	sst.c	/^void set_sses_sstv6(l2str *l2rec) {$/;"	f
set_west_east_boundaries	main_l1info.c	/^set_west_east_boundaries(float32 lon, float32 * western_boundary, float32 * eastern_boundary) {$/;"	f
setanc	setanc.c	/^int setanc(l1str *l1rec, instr *input)$/;"	f
setflagbits	setflags.c	/^void setflagbits(int level, l1str *l1rec, l2str *l2rec, int32_t ipix)$/;"	f
setflags	setflags.c	/^int setflags( instr *input, l1str *l1rec )$/;"	f
setgeom	niwa_iop.c	/^static int setgeom(float sun_theta, float sen_theta, float dphi)$/;"	f	file:
setgeom	pml_iop_tables.c	/^int setgeom(float sun_theta,float sen_theta,float dphi)$/;"	f
setulb	atmcor_soa.f	/^      subroutine setulb(/;"	s
sfcorr_table	l1_hmodis_hdf.c	/^} sfcorr_table;$/;"	t	typeref:struct:__anon35	file:
sh2o	atrem_corl1.h	/^    float sh2o,vaptot[TBLMAX],r0p94[TBLMAX],r1p14[TBLMAX],trntbl[TBLMAX][NBANDS];$/;"	m	struct:__anon17
sh_prod_arr	bioOptBandShift.c	/^static float *sh_prod_arr,*adg_ref,*bbp_ref;$/;"	v	file:
sh_strt_idx	convert_band.c	/^    int *sh_strt_idx, *num_wvl_i;$/;"	m	struct:_context	file:
shallowFlag	swim.c	/^static int shallowFlag;              \/\/ optically shallow flag$/;"	v	file:
shiftBand	convert_band.c	/^void shiftBand(float inputWvl[],float inputRrs[],int numBands,float tarWvl,ccstr* ctxt)$/;"	f
shortname	l1_hmodis_hdf.c	/^    char shortname[FILENAME_MAX]; \/*< M[OY]D03 or M[OY]D02[1HQ]KM *\/$/;"	m	struct:__anon31	file:
side	l1a_seawifs.c	/^int16   *side;$/;"	v
sigma	gsm.c	/^  double * sigma;$/;"	m	struct:datastruct	file:
sign	misc.h	95;"	d
sinslat	ice_mask.c	/^static double		slat=0.0, sinslat, tc, mc;$/;"	v	file:
siopIdx	giop.h	/^  int siopIdx;    \/*Optimal set of IOPs for svd_siop implementation*\/$/;"	m	struct:giop_ctl_str
siop_num	giop.c	/^static int  *siop_num;$/;"	v	file:
sl_frac	input_struc.h	/^  float  sl_frac;        \/* seawifs straylight Ltyp fraction         *\/$/;"	m	struct:input_struct
sl_pixl	input_struc.h	/^  int32_t   sl_pixl;        \/* seawifs straylight pixel limit           *\/$/;"	m	struct:input_struct
slat	ice_mask.c	/^static double		slat=0.0, sinslat, tc, mc;$/;"	v	file:
sline	input_struc.h	/^  int32_t   sline;          \/* starting line no. of the input (1-rel)   *\/$/;"	m	struct:input_struct
sline	l1_octs_hdf.c	/^static int16 year, day, nline, npix, sline, spix;$/;"	v	file:
sline	lonlat2pixline.h	/^        int32_t sline; \/**< start line *\/$/;"	m	struct:lonlat2pixline_struct
sline	mscal_struc.h	/^    int32_t   sline;            \/* starting line no. of the input (1-rel)   *\/$/;"	m	struct:calinput_struct
slope	l1_czcs_hdf.c	/^float32 *tilt, *att_ang, *slope, *intercept;$/;"	v
slope	l1a_osmi.c	/^static float32			slope[BANDS_DIMS_1A * 96];$/;"	v	file:
slope	l2prod_struc.h	/^    float32 slope;$/;"	m	struct:l2prod_index_struct
slope	runcal.h	/^	FLOAT32	slope[3];$/;"	m	struct:__anon45::_runCalEnt
slope	smi_climatology.c	/^static float slope [NPROD];$/;"	v	file:
slot	l1_struc.h	/^    unsigned char  *slot;           \/**< slot number                                *\/$/;"	m	struct:l1_struct
slot	l2_struc.h	/^    unsigned char  *slot;$/;"	m	struct:l2_struct
sm	l1a_osmi.c	/^static float32			sm[1044];$/;"	v	file:
smi_climatology	smi_climatology.c	/^float smi_climatology(float lon, float lat, int prodID)$/;"	f
smi_climatology_init	smi_climatology.c	/^int smi_climatology_init(char *file, int day, int prodID)$/;"	f
smsec	l1_czcs_hdf.c	/^int32   smsec;             \/* data start time                  *\/$/;"	v
smsec	l1_hico_h5.c	/^    int32_t smsec;$/;"	m	struct:hico_private_struct	file:
smsec	l1a_osmi.c	/^static int32   smsec;             \/* data start time                  *\/$/;"	v	file:
smsec	l1a_seawifs.c	/^int32   smsec;             \/* data start time                  *\/$/;"	v
sno2	atrem_corl1.h	/^    float v,taerr55,vrto3,sno2;$/;"	m	struct:__anon4
sol	las_iop.c	/^  float sol[LASNSOL];$/;"	m	struct:las_table_struc	file:
sola	aviris.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:aviris_struct
sola	l1_hmodis_hdf.c	/^    float *sola;      \/*< SolarAzimuth *\/$/;"	m	struct:__anon34	file:
sola	l1_meris_CC.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
sola	l1_mos_hdf.c	/^static float sola    [NS][NP];$/;"	v	file:
sola	l1_ocm2_hdf.c	/^static float32 **sola = NULL;$/;"	v	file:
sola	l1_octs_hdf.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
sola	l1_struc.h	/^    float  *sola;$/;"	m	struct:l1_struct
sola	l1a_osmi.c	/^static float32 sola[LAC_PIXEL_NUM];$/;"	v	file:
sola	l1a_seawifs.c	/^float32 sola[LAC_PIXEL_NUM];$/;"	v
sola	l2_struc.h	/^    float  *sola; \/\/solar azimuth angle$/;"	m	struct:l2_struct
sola	olci.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:olci_struct
sola	prism.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:prism_struct
sola1	l1_octs_hdf.c	/^static float32 solz1, sola1, senz1, sena1;$/;"	v	file:
solaId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
solz	aerosol.c	/^    float  *solz;$/;"	m	struct:aermodtab_struct	file:
solz	aviris.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:aviris_struct
solz	l1_hmodis_hdf.c	/^    float *solz;      \/*< SolarZenith *\/$/;"	m	struct:__anon34	file:
solz	l1_meris_CC.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
solz	l1_mos_hdf.c	/^static float solz    [NS][NP];$/;"	v	file:
solz	l1_ocm2_hdf.c	/^static float32 **solz = NULL;$/;"	v	file:
solz	l1_octs_hdf.c	/^static float32 *lon, *lat, *senz, *sena, *solz, *sola;$/;"	v	file:
solz	l1_struc.h	/^    float  *solz;$/;"	m	struct:l1_struct
solz	l1a_osmi.c	/^static float32 solz[LAC_PIXEL_NUM];$/;"	v	file:
solz	l1a_seawifs.c	/^float32 solz[LAC_PIXEL_NUM];$/;"	v
solz	l2_struc.h	/^    float  *solz; \/\/solar zenith angle$/;"	m	struct:l2_struct
solz	olci.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:olci_struct
solz	prism.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:prism_struct
solz	target_struc.h	/^    float  *solz;$/;"	m	struct:target_struct
solz1	l1_octs_hdf.c	/^static float32 solz1, sola1, senz1, sena1;$/;"	v	file:
solzId	l1_viirs_nc.c	/^static int lonId, latId, senzId, senaId, solzId, solaId, esdistId, scanQualityId, pixelQualityId;$/;"	v	file:
solzMaskOn	l1_struc.h	/^    int32_t   solzMaskOn;$/;"	m	struct:l1_struct
solzmax	l1_struc.h	/^    char   *solzmax;$/;"	m	struct:l1_struct
solzn_l2	atrem_corl1.h	/^    float senzn_l2,senaz_l2,solzn_l2;$/;"	m	struct:__anon20
solznight	sst.c	/^static float solznight = SOLZNIGHT; \/* becomes SOLZNIGHTA for AVHRR *\/$/;"	v	file:
south	ice_mask.c	/^static unsigned char	north[NROWS][NCOLS], south[SROWS][SCOLS];$/;"	v	file:
south	input_struc.h	/^  float   south;$/;"	m	struct:input_struct
south_lat	main_l1info.c	/^    float32 south_lat;$/;"	m	struct:__anon37	file:
southern_lat	scene_meta.c	/^static float southern_lat =  +90.0;$/;"	v	file:
southern_lat	scene_meta.h	/^  float southern_lat;$/;"	m	struct:scene_meta_str
sp_lev	pml_iop_tables.c	/^float *sp_lev, *as[MAX_BANDS], *bs[MAX_BANDS];$/;"	v
sp_n	pml_iop_tables.c	/^int32_t nband, ch_n, sp_n, od_n;$/;"	v
space	rawcal.h	/^	FLOAT64	space[5][50];$/;"	m	struct:__anon44::_rawCalEnt
spatialResolution	filehandle.h	/^    char     spatialResolution[10];$/;"	m	struct:filehandle_struct
spix	filehandle.h	/^    int32_t   spix;                \/* start pixel (0-based)                  *\/$/;"	m	struct:filehandle_struct
spix	l1_aci_hdf.c	/^static int32 spix = 0;$/;"	v	file:
spix	l1_czcs_hdf.c	/^int32   spix;              \/* start pixel number (from 0)      *\/$/;"	v
spix	l1_generic_write.c	/^static int32_t spix;$/;"	v	file:
spix	l1_hdf_generic_write.c	/^static int32 spix; $/;"	v	file:
spix	l1_meris_CC.c	/^static int32        spix = 0;$/;"	v	file:
spix	l1_meris_N1.c	/^static int spix = 0;$/;"	v	file:
spix	l1_nc_generic_read.c	/^static int32 spix = 0;$/;"	v	file:
spix	l1_ocmdb_hdf.c	/^static int32 spix   = 0;$/;"	v	file:
spix	l1_octs_hdf.c	/^static int16 year, day, nline, npix, sline, spix;$/;"	v	file:
spix	l1_olci.c	/^static int32 spix = 0;$/;"	v	file:
spix	l1_orca.c	/^static int32 spix = 0;$/;"	v	file:
spix	l1_struc.h	/^    int32_t   spix;$/;"	m	struct:l1_struct
spix	l1a_seawifs.c	/^int32   spix;              \/* start pixel number (from 0)      *\/$/;"	v
spix	l2_generic.c	/^static int32 spix; $/;"	v	file:
spixl	input_struc.h	/^  int32_t   spixl;          \/* starting pixel no. of the input (1-rel)  *\/$/;"	m	struct:input_struct
spixl	l1_hmodis_hdf.c	/^static int32_t spixl = 0; \/* first valid pixel of extracted granule *\/$/;"	v	file:
spixl	lonlat2pixline.h	/^        int32_t spixl; \/**< start pixel *\/$/;"	m	struct:lonlat2pixline_struct
spixl	mscal_struc.h	/^    int32_t   spixl;            \/* starting pixel no. of the input (1-rel)  *\/$/;"	m	struct:calinput_struct
spl_acc	aviris.h	/^    gsl_interp_accel *spl_acc;$/;"	m	struct:aviris_struct
spl_acc	olci.h	/^    gsl_interp_accel *spl_acc;$/;"	m	struct:olci_struct
spl_acc	prism.h	/^    gsl_interp_accel *spl_acc;$/;"	m	struct:prism_struct
spline	atrem_app_refl_plus_gas_removal_l2.f90	/^      subroutine spline(/;"	s
spline	aviris.h	/^    gsl_spline *spline;$/;"	m	struct:aviris_struct
spline	olci.h	/^    gsl_spline *spline;$/;"	m	struct:olci_struct
spline	prism.h	/^    gsl_spline *spline;$/;"	m	struct:prism_struct
splint	atrem_app_refl_plus_gas_removal_l2.f90	/^      subroutine splint(/;"	s
spm_max	pml_iop_tables.c	/^double spm_max,spm_min,rst_spm,rst_db,rst_n,rst_n_step;$/;"	v
spm_min	pml_iop_tables.c	/^double spm_max,spm_min,rst_spm,rst_db,rst_n,rst_n_step;$/;"	v
sprsax	sprsax.c	/^void sprsax(float sa[], unsigned long ija[], float x[], float b[],$/;"	f
sprsin	sprsin.c	/^void sprsin(float **a, int n, float thresh, unsigned long nmax, float sa[],$/;"	f
sqr	sst.c	/^    float sqr;$/;"	m	struct:stat_struct	file:
sqrarg	nrutil.h	/^static float sqrarg;$/;"	v
ss_to_ms_coef	aerosol.c	/^void ss_to_ms_coef(int modnum, float solz, float senz, float phi, float **a, float **b, float **c)$/;"	f
sscan	l1_struc.h	/^    int32_t   sscan;$/;"	m	struct:l1_struct
sses_sst3v6mv	sst.c	/^static ssestabstrv6mv sses_sst3v6mv;$/;"	v	file:
sses_sst4v6mv	sst.c	/^static ssestabstrv6mv sses_sst4v6mv;$/;"	v	file:
sses_sstv6a	sst.c	/^static ssestabstrv6a sses_sstv6a;$/;"	v	file:
sses_sstv6mv	sst.c	/^static ssestabstrv6mv sses_sstv6mv;$/;"	v	file:
ssestab_structv6a	sst.c	/^typedef struct ssestab_structv6a {$/;"	s	file:
ssestab_structv6mv	sst.c	/^typedef struct ssestab_structv6mv {$/;"	s	file:
ssestabstrv6a	sst.c	/^} ssestabstrv6a;$/;"	t	typeref:struct:ssestab_structv6a	file:
ssestabstrv6mv	sst.c	/^} ssestabstrv6mv;$/;"	t	typeref:struct:ssestab_structv6mv	file:
sssbad	sssref.c	/^static float sssbad = BAD_FLT;$/;"	v	file:
sssfile	input_struc.h	/^  char   sssfile[FILENAME_MAX];  \/* SSS file                         *\/$/;"	m	struct:input_struct
sssref	l1_struc.h	/^    float  *sssref;$/;"	m	struct:l1_struct
sssref	l2_struc.h	/^    float  *sssref;\/\/ reference sea surface salinity$/;"	m	struct:l2_struct
sst	l2_struc.h	/^    float  *sst;$/;"	m	struct:l2_struct
sst	sst.c	/^    float sst[NSSTMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
sst	sst.c	/^    float sst[NSSTMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
sst	sst.c	/^static float *sst = NULL;$/;"	v	file:
sst3	sst.c	/^static float *sst3 = NULL;$/;"	v	file:
sst3coeffile	input_struc.h	/^  char      sst3coeffile[FILENAME_MAX];$/;"	m	struct:input_struct
sst3ssesfile	input_struc.h	/^  char      sst3ssesfile[FILENAME_MAX];$/;"	m	struct:input_struct
sst4	sst.c	/^static float *sst4 = NULL;$/;"	v	file:
sst4coeffile	input_struc.h	/^  char      sst4coeffile[FILENAME_MAX];$/;"	m	struct:input_struct
sst4ssesfile	input_struc.h	/^  char      sst4ssesfile[FILENAME_MAX];$/;"	m	struct:input_struct
sst_flag_lname	flags_sst.h	/^static const char *sst_flag_lname[NSSTFLAGS] = {"ISMASKED",$/;"	v
sst_ran	sst.c	/^int sst_ran(int recnum) {$/;"	f
sstbad	sst.c	/^static float sstbad = BAD_FLT;$/;"	v	file:
sstbad	sstref.c	/^static float sstbad = BAD_FLT;$/;"	v	file:
sstcloud	sst.c	/^int sstcloud(int32_t ip, int nx, int ny, float thresh) {$/;"	f
sstcoeffile	input_struc.h	/^  char      sstcoeffile [FILENAME_MAX];$/;"	m	struct:input_struct
sstfile	input_struc.h	/^  char   sstfile[FILENAME_MAX];  \/* SST reference file               *\/$/;"	m	struct:input_struct
sstmasked	sst.c	/^int sstmasked(l2str *l2rec, int32_t ip) {$/;"	f
sstref	l1_struc.h	/^    float  *sstref;$/;"	m	struct:l1_struct
sstref	l2_struc.h	/^    float  *sstref; \/\/ reference sea surface temperature$/;"	m	struct:l2_struct
sstrefdif	input_struc.h	/^  float sstrefdif;   \/* tighter threshold to match sst with reference *\/$/;"	m	struct:input_struct
sstreftype	input_struc.h	/^  int    sstreftype;$/;"	m	struct:input_struct
sstssesfile	input_struc.h	/^  char      sstssesfile [FILENAME_MAX];$/;"	m	struct:input_struct
ssttype	l1_struc.h	/^    short  *ssttype;	\/* per pixel - reference type or climatology *\/$/;"	m	struct:l1_struct
ssttype	l2_struc.h	/^	short  *ssttype;$/;"	m	struct:l2_struct
standard_name	l2prod_struc.h	/^    char    standard_name[TITLELEN];$/;"	m	struct:l2prod_index_struct
start2	atrem_corl1.h	/^    int32_t start2;$/;"	m	struct:param_table
startLat	get_nc_height.c	/^    double startLat;$/;"	m	struct:__anon25	file:
startLon	get_nc_height.c	/^    double startLon;$/;"	m	struct:__anon25	file:
start_1p14	atrem_corl1.h	/^    int32_t start_1p14;$/;"	m	struct:param_table
start_center_lat	scene_meta.h	/^  float start_center_lat;$/;"	m	struct:scene_meta_str
start_center_lon	scene_meta.h	/^  float start_center_lon;$/;"	m	struct:scene_meta_str
start_day	scene_meta.h	/^  int   start_day;$/;"	m	struct:scene_meta_str
start_msec	scene_meta.h	/^  int   start_msec;$/;"	m	struct:scene_meta_str
start_ndx	atrem_corl1.h	/^    int32_t start_ndx[4]; \/\/ist1,ist2,ist3,ist4$/;"	m	struct:param_table
start_node	scene_meta.c	/^static int   start_node   = UNKNOWNNODE;$/;"	v	file:
start_node	scene_meta.h	/^  char  start_node[32];$/;"	m	struct:scene_meta_str
start_p94	atrem_corl1.h	/^    int32_t start_p94;$/;"	m	struct:param_table
start_scan	l1_octs_hdf.c	/^static int16 *start_scan;$/;"	v	file:
start_tile	get_nc_height.c	/^    size_t start_tile[TILE_ROWS];$/;"	m	struct:__anon26	file:
start_time	l1b_viirs_nc.c	/^    char start_time[25];$/;"	m	struct:__anon29	file:
start_time	scene_meta.h	/^  char  start_time[32];$/;"	m	struct:scene_meta_str
start_year	scene_meta.h	/^  int   start_year;$/;"	m	struct:scene_meta_str
starttime	l1_orca.c	/^static double starttime;$/;"	v	file:
starttime	l1_viirs_nc.c	/^static double starttime;$/;"	v	file:
stat_struct	sst.c	/^typedef struct stat_struct {$/;"	s	file:
statstr	sst.c	/^} statstr;$/;"	t	typeref:struct:stat_struct	file:
status	l1_czcs_hdf.c	/^int lgain,status;$/;"	v
std_p_lvls_42	met_cvt.h	/^static float std_p_lvls_42[] = { 1000., 975., 950., 925., 900., 875., 850., $/;"	v
stdv	sst.c	/^    float stdv[NQUALMAXv6a][NLATMAXv6a][NDIFFMAXv6a][NSENZMAXv6a][NQUARMAXv6a][NSSTMAXv6a];$/;"	m	struct:ssestab_structv6a	file:
stdv	sst.c	/^    float stdv[NQUALMAXv6mv][NLATMAXv6mv][NDIFFMAXv6mv][NSENZMAXv6mv][NQUARMAXv6mv][NSSTMAXv6mv];$/;"	m	struct:ssestab_structv6mv	file:
stdv_sst	sst.c	/^static float *stdv_sst = NULL;$/;"	v	file:
stdv_sst3	sst.c	/^static float *stdv_sst3 = NULL;$/;"	v	file:
stdv_sst4	sst.c	/^static float *stdv_sst4 = NULL;$/;"	v	file:
stlight	l1_struc.h	/^    char   *stlight;$/;"	m	struct:l1_struct
stlightMaskOn	l1_struc.h	/^    int32_t   stlightMaskOn;$/;"	m	struct:l1_struct
stlightmask	input_struc.h	/^  int32_t   stlightmask;            \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
stname	mscal_struc.h	/^typedef char   stname[SHORTNAME];$/;"	t
stray_light	l1a_seawifs.c	/^int16   stray_light = -1;     \/* num pixels to apply sl correct.  *\/$/;"	v
stream	b128_msk_get.c	/^static FILE *stream[2] = { NULL, NULL };$/;"	v	file:
stype	input_struc.h	/^  int32_t    stype; \/* scaling type 0=log, 1=linear*\/$/;"	m	struct:input_struct
subframe_correction	l1_hmodis_hdf.c	/^void subframe_correction(const int32_t sensorID,$/;"	f
submatrix	nrutil.c	/^float **submatrix(float **a, long oldrl, long oldrh, long oldcl, long oldch,$/;"	f
subsamp	input_struc.h	/^  int	subsamp;$/;"	m	struct:input_struct
subsensorID	filehandle.h	/^    int32_t   subsensorID;$/;"	m	struct:filehandle_struct
subsensorID	input_struc.h	/^  int32_t   subsensorID;$/;"	m	struct:input_struct
subsm	atmcor_soa.f	/^      subroutine subsm(/;"	s
suite	input_struc.h	/^  char      suite   [32];$/;"	m	struct:input_struct
sunAzimuth	l1_oli.c	/^    double sunAzimuth, sunElevation;$/;"	m	struct:oli_struct	file:
sunElevation	l1_oli.c	/^    double sunAzimuth, sunElevation;$/;"	m	struct:oli_struct	file:
sun_ref	l1a_seawifs.c	/^  float32 sun_ref[3];$/;"	m	struct:__anon27	file:
sunzen	input_struc.h	/^  float  sunzen;                 \/* solar zenith angle threshold     *\/$/;"	m	struct:input_struct
sunzenmask	input_struc.h	/^  int32_t   sunzenmask;             \/* 0=off, 1=on *\/$/;"	m	struct:input_struct
surfGrid	get_nc_height.c	/^static grid_info_t* surfGrid = {0};$/;"	v	file:
surfNames	get_nc_height.c	/^static const char* surfNames[] = { "water_surface_height", NULL };$/;"	v	file:
sv_with_moon	filehandle.h	/^    int32_t   sv_with_moon;$/;"	m	struct:filehandle_struct
swMeris	raman.c	/^static float swMeris[9] = {10., 10., 10., 10., 10., 10., 7.5, 10., 7.5};$/;"	v	file:
swModisa	raman.c	/^static  float swModisa[10] = {15., 10., 15., 10., 10., 10., 20., 50., 10. ,10.}; $/;"	v	file:
swModist	raman.c	/^static float swModist[10] = {15., 10., 15., 10., 10., 10., 20., 50., 10. ,10.}; $/;"	v	file:
swOcts	raman.c	/^static float swOcts[6] = {20., 20., 20., 20., 20., 20.}; $/;"	v	file:
swSeawifs	raman.c	/^static float swSeawifs[6] = {20., 20., 20., 20., 20., 20.}; $/;"	v	file:
swViirs	raman.c	/^static float swViirs[5] = {20., 15., 20., 20., 20.}; $/;"	v	file:
sw_a	l1_struc.h	/^    float  *sw_a;$/;"	m	struct:l1_struct
sw_a	l2_struc.h	/^    float  *sw_a; \/\/ seawater absorption coefficient$/;"	m	struct:l2_struct
sw_a_avg	l1_struc.h	/^    float  *sw_a_avg;$/;"	m	struct:l1_struct
sw_a_avg	l2_struc.h	/^    float  *sw_a_avg; \/\/ band-averaged seawater absorption coefficient$/;"	m	struct:l2_struct
sw_bb	l1_struc.h	/^    float  *sw_bb;$/;"	m	struct:l1_struct
sw_bb	l2_struc.h	/^    float  *sw_bb; \/\/seawater backscattering coefficient$/;"	m	struct:l2_struct
sw_bb_avg	l1_struc.h	/^    float  *sw_bb_avg;$/;"	m	struct:l1_struct
sw_bb_avg	l2_struc.h	/^    float  *sw_bb_avg; \/\/band-averaged seawater backscattering coefficient$/;"	m	struct:l2_struct
sw_n	l1_struc.h	/^    float  *sw_n;$/;"	m	struct:l1_struct
sw_n	l2_struc.h	/^    float  *sw_n; \/\/ seawater index of refraction$/;"	m	struct:l2_struct
swapl	misc.h	129;"	d
swaps	misc.h	137;"	d
swater	l1_struc.h	/^    char   *swater;$/;"	m	struct:l1_struct
swimScanNum	swim.c	/^static int32_t swimScanNum = -1; \/\/last scan num that the model was calculated for$/;"	v	file:
swim_func	swim.c	/^void swim_func(double *initialParams, double *rrsTotal, int numParams,$/;"	f
syear	l1_czcs_hdf.c	/^int     syear, sday;       \/* data start date                  *\/$/;"	v
syear	l1_hico_h5.c	/^    int32_t syear;$/;"	m	struct:hico_private_struct	file:
syear	l1a_osmi.c	/^static int16   syear, sday;       \/* data start date                  *\/$/;"	v	file:
syear	l1a_seawifs.c	/^int16   syear, sday;       \/* data start date                  *\/$/;"	v
sza	d3940tref.h	/^static float sza[NSENZ] = {$/;"	v
t	atrem_corl1.h	/^    float h[MODELMAX],t[MODELMAX],p[MODELMAX],vmr[MODELMAX];$/;"	m	struct:__anon4
tLf	l1_struc.h	/^    float  *tLf;$/;"	m	struct:l1_struct
tLf	l2_struc.h	/^    float  *tLf; \/\/ white-cap radiance$/;"	m	struct:l2_struct
tLw	vcal_struc.h	/^    float  *tLw;$/;"	m	struct:vcal_struct
t_array	atrem_corl1.h	/^typedef float t_array[NBANDS];$/;"	t
t_const	l1a_osmi.c	/^static float32         t_const[BANDS_DIMS_1A];$/;"	v	file:
t_const	l1a_seawifs.c	/^float64         t_const[BANDS_DIMS_1A];$/;"	v
t_exponential_1	l1a_seawifs.c	/^float64         t_exponential_1[BANDS_DIMS_1A];$/;"	v
t_exponential_2	l1a_seawifs.c	/^float64         t_exponential_2[BANDS_DIMS_1A];$/;"	v
t_h2o	l1_struc.h	/^    float  *t_h2o;$/;"	m	struct:l1_struct
t_h2o	l2_struc.h	/^    float  *t_h2o; \/\/ water vapor transmittance$/;"	m	struct:l2_struct
t_linear	l1a_osmi.c	/^static float32         t_linear[BANDS_DIMS_1A];$/;"	v	file:
t_linear_1	l1a_seawifs.c	/^float64         t_linear_1[BANDS_DIMS_1A];$/;"	v
t_linear_2	l1a_seawifs.c	/^float64         t_linear_2[BANDS_DIMS_1A];$/;"	v
t_o2	l1_struc.h	/^    float  *t_o2;$/;"	m	struct:l1_struct
t_o2	l2_struc.h	/^    float  *t_o2; \/\/ oxygen transmittance$/;"	m	struct:l2_struct
t_quadratic	l1a_osmi.c	/^static float32         t_quadratic[BANDS_DIMS_1A];$/;"	v	file:
t_sen	l1_struc.h	/^    float  *t_sen;$/;"	m	struct:l1_struct
t_sen	l2_struc.h	/^    float  *t_sen; \/\/ transmittance in the sensor path$/;"	m	struct:l2_struct
t_sol	l1_struc.h	/^    float  *t_sol;$/;"	m	struct:l1_struct
t_sol	l2_struc.h	/^    float  *t_sol; \/\/ transmittance in the solar path$/;"	m	struct:l2_struct
tab	las_iop.c	/^static lastabstr tab;        \/\/ R(0-) and <Kd>1 coefficient table $/;"	v	file:
tab_atom	pml_iop_config.h	/^struct tab_atom{$/;"	s
tab_size	pml_iop_config.c	/^int tab_size = 0;$/;"	v
tableaerphasefunc	par_utils.c	/^static float *tableaerphasefunc;$/;"	v	file:
tablealphas	par_utils.c	/^static float *tablealphas;  \/\/angstrom exponent$/;"	v	file:
tableomegas	par_utils.c	/^static float *tableomegas;  \/\/single scattering albedo$/;"	v	file:
tablephaseangles	par_utils.c	/^static float *tablephaseangles;$/;"	v	file:
tablewavelengths	par_utils.c	/^static float *tablewavelengths;$/;"	v	file:
taerr55	atrem_corl1.h	/^    float v,taerr55,vrto3,sno2;$/;"	m	struct:__anon4
taisec	l1_hmodis_hdf.c	/^    double taisec;    \/*< EV start time *\/$/;"	m	struct:__anon34	file:
taphs	swim.c	/^static float taphs[10] = { 0.840353901, 1.0, 0.821449702, 0.689387045,$/;"	v	file:
taphw	swim.c	/^static float taphw[10] = { 412.0, 443.0, 469.0, 488.0, 531.0, 551.0, 555.0,$/;"	v	file:
tar_rrs	convert_band.c	/^    float *tar_rrs;$/;"	m	struct:_context	file:
target_struct	target_struc.h	/^typedef struct target_struct {$/;"	s
tau	atmcor_soa.f	/^     &         trans(NLAMBDA),trans0(NLAMBDA),tau8/;"	v
tau	read_l3bin.h	/^    float     *tau;$/;"	m	struct:l3bin_struct
tau865	atmcor_soa.f	/^     &         trans(NLAMBDA),trans0(NLAMBDA),tau865,/;"	v
taua	aer_struc.h	/^    float  *taua;$/;"	m	struct:aer_struct
taua	input_struc.h	/^  float  *taua;   \/* Input aerosol optical thickness          *\/$/;"	m	struct:input_struct
taua	l2_struc.h	/^    float  *taua; \/\/ aerosol optical thickness$/;"	m	struct:l2_struct
tauaRam	raman.c	/^static float *tauaRam;      \/\/Aerosol optical thickness at Raman bands$/;"	v	file:
taua_est	glint.c	/^static float taua_est(float x) { return(-0.8 - 0.4*log(x)); };$/;"	f	file:
tauafile	input_struc.h	/^  char   tauafile[FILENAME_MAX]; \/* AOT climatology file             *\/$/;"	m	struct:input_struct
tauamax	input_struc.h	/^  float  tauamax;                \/* max tau 865 for hi-taua flagging *\/$/;"	m	struct:input_struct
tc	ice_mask.c	/^static double		slat=0.0, sinslat, tc, mc;$/;"	v	file:
tcoordFileID	l1_olci.c	/^static int32_t olci_sd[MAXOLCI_RADFILES],geoFileID,coordFileID,tcoordFileID,instrumentFileID;$/;"	v	file:
tdi	l1a_seawifs.c	/^  int16   tdi[8];$/;"	m	struct:__anon27	file:
tdi	l1a_seawifs.c	/^int16   tdi[BANDS_DIMS_1A] = {0,0,0,0,0,0,0,0};$/;"	v
telem	rawcal.h	/^	FLOAT64	telem[1*5];$/;"	m	struct:__anon44::_rawCalEnt
teletg	rawcal.h	/^	FLOAT64	teletg[3*4*5];$/;"	m	struct:__anon44::_rawCalEnt
temps	l1a_osmi.c	/^static float32			egain[8], temps[8], mirror[8];$/;"	v	file:
temptab	brightness.c	/^static float  temptab [NBTBANDMAX][NBTDETMAX][NBTTABMAX];$/;"	v	file:
terrain_corrected	filehandle.h	/^    int32_t   terrain_corrected;$/;"	m	struct:filehandle_struct
tg_sen	l1_struc.h	/^    float  *tg_sen;$/;"	m	struct:l1_struct
tg_sen	l2_struc.h	/^    float  *tg_sen; \/\/gaseous transmittance in the sensor path$/;"	m	struct:l2_struct
tg_sol	l1_struc.h	/^    float  *tg_sol;$/;"	m	struct:l1_struct
tg_sol	l2_struc.h	/^    float  *tg_sol; \/\/gaseous transmittance in the solar path$/;"	m	struct:l2_struct
tgrec	l2_struc.h	/^    tgstr  *tgrec;$/;"	m	struct:l2_struct
tgstr	target_struc.h	/^} tgstr;$/;"	t	typeref:struct:target_struct
tgtfile	input_struc.h	/^  char   tgtfile[FILENAME_MAX];         \/* input cal target file     *\/$/;"	m	struct:input_struct
th_s_ind	niwa_iop.c	/^static float th_s_ind[TH_NS], th_v_ind[TH_NS], dphi_ind[DPHI_NS];$/;"	v	file:
th_s_lev	niwa_iop.c	/^static float th_s_lev[TH_NS], th_v_lev[TH_NS], dphi_lev[DPHI_NS];$/;"	v	file:
th_s_lev	pml_iop_tables.c	/^float *th_s_lev, *th_v_lev, *dphi_lev;$/;"	v
th_s_n	niwa_iop.c	/^static int th_s_n, th_v_n, dphi_n;$/;"	v	file:
th_s_n	pml_iop_tables.c	/^int32_t th_s_n, th_v_n, dphi_n;$/;"	v
th_v_ind	niwa_iop.c	/^static float th_s_ind[TH_NS], th_v_ind[TH_NS], dphi_ind[DPHI_NS];$/;"	v	file:
th_v_lev	niwa_iop.c	/^static float th_s_lev[TH_NS], th_v_lev[TH_NS], dphi_lev[DPHI_NS];$/;"	v	file:
th_v_lev	pml_iop_tables.c	/^float *th_s_lev, *th_v_lev, *dphi_lev;$/;"	v
th_v_n	niwa_iop.c	/^static int th_s_n, th_v_n, dphi_n;$/;"	v	file:
th_v_n	pml_iop_tables.c	/^int32_t th_s_n, th_v_n, dphi_n;$/;"	v
threshold	input_struc.h	/^  float	  threshold;$/;"	m	struct:input_struct
tieGeoCoordinatesFile	olci.h	/^    char  *geoCoordinatesFile,*tieGeoCoordinatesFile, *tieGeometriesFile,*instrumentFile, *time_coordinatesFile, *tieMeteoFile;$/;"	m	struct:olci_struct
tieGeometriesFile	olci.h	/^    char  *geoCoordinatesFile,*tieGeoCoordinatesFile, *tieGeometriesFile,*instrumentFile, *time_coordinatesFile, *tieMeteoFile;$/;"	m	struct:olci_struct
tieMeteoFile	olci.h	/^    char  *geoCoordinatesFile,*tieGeoCoordinatesFile, *tieGeometriesFile,*instrumentFile, *time_coordinatesFile, *tieMeteoFile;$/;"	m	struct:olci_struct
tif	l1_oli.c	/^    TIFF** tif; \/\/ file handle for each band$/;"	m	struct:oli_struct	file:
tile_findex	get_nc_height.c	/^int tile_findex(tile_struct tile, float lat, float lon, double *findex) {$/;"	f
tile_index	get_nc_height.c	/^int tile_index(tile_struct tile, float lat, float lon, size_t *index) {$/;"	f
tile_ref	get_dem_height.c	225;"	d	file:
tile_ref	get_dem_height.c	264;"	d	file:
tile_struct	get_nc_height.c	/^} tile_struct;$/;"	t	typeref:struct:__anon25	file:
tiles	get_nc_height.c	/^    tile_struct *tiles;$/;"	m	struct:__anon26	file:
tilt	l1_czcs_hdf.c	/^float32 *tilt, *att_ang, *slope, *intercept;$/;"	v
tilt	l1_octs_hdf.c	/^static float32 tilt[MAXOCLIN];$/;"	v	file:
tilt	l1_struc.h	/^    float tilt;$/;"	m	struct:l1_struct
tilt	l1a_seawifs.c	/^float32 *tilt;$/;"	v
tilt	l2_struc.h	/^    float  tilt;$/;"	m	struct:l2_struct
tilt_flag	l1_octs_hdf.c	/^static int16 *tilt_flag;$/;"	v	file:
time_coordinatesFile	olci.h	/^    char  *geoCoordinatesFile,*tieGeoCoordinatesFile, *tieGeometriesFile,*instrumentFile, *time_coordinatesFile, *tieMeteoFile;$/;"	m	struct:olci_struct
time_interval	l1_meris_CC.c	/^static double      time_interval;$/;"	v	file:
time_interval	l1_meris_N1.c	/^static double      time_interval;$/;"	v	file:
time_interval	l1_orca.c	/^static double time_interval;$/;"	v	file:
timer	atmcor_soa.f	/^      subroutine timer(/;"	s
tindx_morel	turbid.c	/^void tindx_morel(l2str *l2rec, int32_t ipix, float *tindx)$/;"	f
tindx_shi	turbid.c	/^void tindx_shi(l2str *l2rec, int32_t ipix, float *tindx)$/;"	f
title	l1b_viirs_nc.c	/^    char title[FILENAME_MAX];$/;"	m	struct:__anon29	file:
title	l2prod_struc.h	/^    char    title[TITLELEN];$/;"	m	struct:l2prod_index_struct
title_format	l2prod_struc.h	/^    char    title_format[TITLELEN];$/;"	m	struct:l2prod_index_struct
tjsm_pml_bright	pml_bright.h	2;"	d
tjsm_pml_iop	pml_iop.h	2;"	d
tjsm_pml_iop_calculate	pml_iop_calculate.h	2;"	d
tjsm_pml_iop_config	pml_iop_config.h	2;"	d
tjsm_pml_iop_tables	pml_iop_tables.h	2;"	d
tmonth	sst.c	/^static int32  tmonth = -1;$/;"	v	file:
tmpByte	l1_viirs_nc.c	/^static unsigned char *tmpByte;$/;"	v	file:
tmpShort	l1_viirs_nc.c	/^static short *tmpShort;$/;"	v	file:
toa_reflect	l1_imgscale.c	/^float toa_reflect(l1str *l1rec, int32_t ip, int32_t ib)$/;"	f
token	pml_iop_config.h	/^     char token[MAX_TOK];$/;"	m	struct:tab_atom
tol	pml_iop_tables.c	/^float tol;$/;"	v
tol_b	pml_iop_tables.c	/^float tol_n,tol_b,n_init;$/;"	v
tol_n	pml_iop_tables.c	/^float tol_n,tol_b,n_init;$/;"	v
tot_prod	filehandle.h	/^    int32_t   tot_prod;            \/* total # of L2 products to be created   *\/$/;"	m	struct:filehandle_struct
totbins	bin_climatology.c	/^static int32	totbins;$/;"	v	file:
tpvmr	atrem_corl1.h	/^    float tpvmr[81][7];$/;"	m	struct:__anon21
trans	atmcor_soa.f	/^      REAL     w0,v,$/;"	v
trans0	atmcor_soa.f	/^     &         trans(NLAMBDA),trans0(/;"	v
treesum	sst.c	/^static float *treesum = NULL;$/;"	v	file:
trefv6	d3940tref.h	/^static float trefv6[NSENZ] = {$/;"	v
triseset	par_utils.c	/^void triseset(int32_t *jday, float xlon, float xlat, float *trise, float *tset) {$/;"	f
trntbl	atrem_corl1.h	/^     t_array  *trntbl;$/;"	m	struct:param_table
trntbl	atrem_corl1.h	/^    float sh2o,vaptot[TBLMAX],r0p94[TBLMAX],r1p14[TBLMAX],trntbl[TBLMAX][NBANDS];$/;"	m	struct:__anon17
tss	swim.c	/^static float *tss;    \/\/tss value for scan line chla[pix,band] - total suspended sediment concentration$/;"	v	file:
tx	carder.c	/^static double tx[NX+1];$/;"	v	file:
type	h5io.h	/^   int type;$/;"	m	struct:h5io_str_d
u	get_qaa.c	/^static float *u;           $/;"	v	file:
u58_gran_en	l1_viirs_h5.c	/^static int64_t *u58_scn_st, u58_gran_st, u58_gran_en;$/;"	v	file:
u58_gran_st	l1_viirs_h5.c	/^static int64_t *u58_scn_st, u58_gran_st, u58_gran_en;$/;"	v	file:
u58_scn_st	l1_viirs_h5.c	/^static int64_t *u58_scn_st, u58_gran_st, u58_gran_en;$/;"	v	file:
uag_px_st	viirs_pxcvt.c	/^static int uag_px_st[] = { 0, 640, 1376, 4928, 5664, 6304 };$/;"	v	file:
undef	get_ndvi.c	/^static float undef  = -2.0;$/;"	v	file:
unitc	ipar.c	/^static float  unitc = 119.625e8;  \/* conversion to einsteins\/m^2\/s *\/$/;"	v	file:
units	l2prod_struc.h	/^    char    units[UNITLEN];$/;"	m	struct:l2prod_index_struct
upa0	carder.c	/^static double upa0[6], upa3[6];        \/* aph model prms unpackaged          *\/$/;"	v	file:
upa3	carder.c	/^static double upa0[6], upa3[6];        \/* aph model prms unpackaged          *\/$/;"	v	file:
upc0	carder.c	/^static double upc0, upc1, upc2, upc3;  \/* coefs for 490:555 chl alg unpackaged*\/$/;"	v	file:
upc1	carder.c	/^static double upc0, upc1, upc2, upc3;  \/* coefs for 490:555 chl alg unpackaged*\/$/;"	v	file:
upc2	carder.c	/^static double upc0, upc1, upc2, upc3;  \/* coefs for 490:555 chl alg unpackaged*\/$/;"	v	file:
upc3	carder.c	/^static double upc0, upc1, upc2, upc3;  \/* coefs for 490:555 chl alg unpackaged*\/$/;"	v	file:
update_flag_cnts	l2_generic.c	/^void  update_flag_cnts(int32_t *flag_cnt, int32_t*flags, int32_t nflags, int32_t npix, uint32_t init_mask) {$/;"	f
update_flag_cnts16	l2_generic.c	/^void  update_flag_cnts16(int32_t *flag_cnt, int16_t *flags, int32_t nflags, int32_t npix, uint32_t init_mask) {$/;"	f
update_qual_cnts	l2_generic.c	/^void  update_qual_cnts(int32_t *flag_cnt, int8_t* flags, int32_t nflags, int32_t npix) {$/;"	f
upp0	carder.c	/^static double upp0, upp1, upp2;        \/* coefs for chl=fn(aph675) unpackaged*\/$/;"	v	file:
upp1	carder.c	/^static double upp0, upp1, upp2;        \/* coefs for chl=fn(aph675) unpackaged*\/$/;"	v	file:
upp2	carder.c	/^static double upp0, upp1, upp2;        \/* coefs for chl=fn(aph675) unpackaged*\/$/;"	v	file:
upperLat	swim.c	/^static double upperLat;         \/\/ latitude of benthicProportion[0][0][bottomType]$/;"	v	file:
upperleft_lat	scene_meta.h	/^  float upperleft_lat;$/;"	m	struct:scene_meta_str
upperleft_lon	scene_meta.h	/^  float upperleft_lon;$/;"	m	struct:scene_meta_str
upperright_lat	scene_meta.h	/^  float upperright_lat;$/;"	m	struct:scene_meta_str
upperright_lon	scene_meta.h	/^  float upperright_lon;$/;"	m	struct:scene_meta_str
usage	main_lonlat2pixline.c	/^void usage(const char *prog)$/;"	f
use_rh	aerosol.c	/^static int use_rh  = 0;$/;"	v	file:
uselog	brightness.c	/^static int16  uselog  [NBTBANDMAX];$/;"	v	file:
ushort	l1b_viirs_nc.c	/^typedef unsigned short ushort;$/;"	t	file:
utc	aviris.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:aviris_struct
utc	olci.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:olci_struct
utc	prism.h	/^    double **sena, **senz, **sola, **solz, **utc;$/;"	m	struct:prism_struct
utmZone	aviris.h	/^    int    utmZone, numBands;$/;"	m	struct:aviris_struct
utmZone	prism.h	/^    int    utmZone, numBands;$/;"	m	struct:prism_struct
uval	miscstruct.h	/^    uint32_t uval;$/;"	m	union:_DevUnion
v	KDvector.h	/^typedef struct v {$/;"	s
v	atmcor_soa.f	/^      REAL     w0,v,/;"	v
v	atrem_corl1.h	/^    float v,taerr55,vrto3,sno2;$/;"	m	struct:__anon4
v	filter.c	/^    float v;$/;"	m	struct:fnode_str	file:
vLt	calfile_utils.h	/^    float    **vLt; \/\/ vLt[nband][ndets]$/;"	m	struct:cal_struct
vLt	vcal_struc.h	/^    float  *vLt;$/;"	m	struct:vcal_struct
v_insert	KDtree.c	/^   void v_insert( vector **m_pt, vector *t )$/;"	f
val	miscstruct.h	/^    int32_t 	val;$/;"	m	union:_DevUnion
values	get_nc_height.c	/^    double *values; \/**< values filled as needed *\/$/;"	m	struct:__anon25	file:
vap_slant_mdl	atrem_corl1.h	/^    float vap_slant_mdl;$/;"	m	struct:__anon19
vaptot	atrem_corl1.h	/^    float *vaptot;$/;"	m	struct:param_table
vaptot	atrem_corl1.h	/^    float sh2o,vaptot[TBLMAX],r0p94[TBLMAX],r1p14[TBLMAX],trntbl[TBLMAX][NBANDS];$/;"	m	struct:__anon17
variance	numerical.c	/^float variance(float *xs, int sample_size)$/;"	f
varlist	l1b_viirs_nc.c	/^typedef struct { size_t index; char *name; } varlist;$/;"	t	typeref:struct:__anon28	file:
vars1D	calfile_utils.h	/^    float    *vars1D; \/\/vars1D[nvars1d]$/;"	m	struct:cal_struct
varsol	par_utils.c	/^float varsol(int32_t jday) {$/;"	f
vc_bands	bioOptBandShift.c	/^static float vc_bands[7] = {412.,443.,490.,510.,531.,555.,670.};$/;"	v	file:
vcal	vcal.c	/^void vcal(l2str *l2rec, l2prodstr *p, float prod[])$/;"	f
vcal_Lw	input_struc.h	/^  float *vcal_Lw ;$/;"	m	struct:input_struct
vcal_chl	input_struc.h	/^  float vcal_chl;$/;"	m	struct:input_struct
vcal_depth	input_struc.h	/^  float   vcal_depth;  \/*  vcaltarget depth mask value *\/$/;"	m	struct:input_struct
vcal_min_nbin	input_struc.h	/^  int32_t vcal_min_nbin;  \/* min # samples in bin to accept *\/$/;"	m	struct:input_struct
vcal_min_nscene	input_struc.h	/^  int32_t vcal_min_nscene;  \/* min # scenes in bin to accept *\/$/;"	m	struct:input_struct
vcal_nLw	input_struc.h	/^  float *vcal_nLw;$/;"	m	struct:input_struct
vcal_opt	input_struc.h	/^  int   vcal_opt;$/;"	m	struct:input_struct
vcal_solz	input_struc.h	/^  float vcal_solz;$/;"	m	struct:input_struct
vcal_struct	vcal_struc.h	/^typedef struct vcal_struct {$/;"	s
vcalmerge_optionKeys	msl12_input.c	/^static char *vcalmerge_optionKeys[] = {$/;"	v	file:
vcnnfile	input_struc.h	/^  char      vcnnfile[FILENAME_MAX];$/;"	m	struct:input_struct
vcstr	vcal_struc.h	/^} vcstr;$/;"	t	typeref:struct:vcal_struct
vdata_id	bin_climatology.c	/^static int32 vdata_id[MAXNVDATA];$/;"	v	file:
vdiff	KDvector.h	9;"	d
vdistance	KDtree.c	/^float vdistance( vector *v1, vector *v2 )$/;"	f
vec2ll	ll2vec.c	/^int vec2ll( float *vec, float *ll )$/;"	f
vector	KDvector.h	/^} vector;$/;"	t	typeref:struct:v
vector	nrutil.c	/^float *vector(long nl, long nh)$/;"	f
vel	l1_viirs_h5.c	/^static float *pos, *vel, *att; \/* position, velocity, sensor attitude *\/$/;"	v	file:
vfnames	l1_viirs_h5.c	/^static char vfnames[MAXBANDS][FILENAME_MAX];$/;"	v	file:
vgain	vcal.c	/^void vgain(l2str *l2rec, int band, float vgain[])$/;"	f
vgid	bin_climatology.c	/^static int32 vgid;$/;"	v	file:
vhisenz	sst.c	/^static float vhisenz = 75.0;$/;"	v	file:
vhisenza	sst.c	/^static float vhisenza = 55.0; \/* make this higher?  ask Bob *\/$/;"	v	file:
vhisenzv2	sst.c	/^static float vhisenzv2  = 65.0;         \/* for VIIRS v6.4 sst2b May 2015 *\/$/;"	v	file:
viirs_file	l1b_viirs_nc.c	/^} viirs_file;$/;"	t	typeref:struct:__anon29	file:
viirs_pxcvt_2ag	viirs_pxcvt.c	/^void viirs_pxcvt_2ag( int in_pix, int *out_pix )$/;"	f
viirs_pxcvt_2uag	viirs_pxcvt.c	/^void viirs_pxcvt_2uag( int in_pix, int *out_pix, int *nag )$/;"	f
viirs_pxcvt_agdel	viirs_pxcvt.c	/^void viirs_pxcvt_agdel( int in_pix, int del, int *out_pix )$/;"	f
viirs_qual2	l1_viirs_h5.c	/^static unsigned char *viirs_qual2; \/* storage for the SDR scan quality info *\/$/;"	v	file:
viirs_sst_flag_lname	flags_sst.h	/^static const char *viirs_sst_flag_lname[NSSTFLAGS] = {"ISMASKED",$/;"	v
viirs_u58_yds	viirs_utls.c	/^void viirs_u58_yds( int64_t u58, short *year, short *day, double *dsec )$/;"	f
viirscalparfile	filehandle.h	/^    char      *viirscalparfile;$/;"	m	struct:filehandle_struct
viirscalparfile	input_struc.h	/^  char   viirscalparfile[FILENAME_MAX];  \/* VIIRS calibration parfile      *\/$/;"	m	struct:input_struct
viirsnosisaf	input_struc.h	/^  int32_t viirsnosisaf; \/* =1 to use the VIIRSN OSI-SAF equation and coeffs (sort of v5 like) *\/$/;"	m	struct:input_struct
viirsnv7	input_struc.h	/^  int32_t viirsnv7; \/* =1 to use the VIIRSN V7 high satz latband equation and coeffs *\/$/;"	m	struct:input_struct
virtual_constellation	virtual_constellation.c	/^void virtual_constellation(l2str *l2rec, l2prodstr *p, float prod[]) {$/;"	f
vlength	KDvector.h	12;"	d
vmr	atrem_corl1.h	/^    float h[MODELMAX],t[MODELMAX],p[MODELMAX],vmr[MODELMAX];$/;"	m	struct:__anon4
vrec	vcal.c	/^static vcstr    vrec;$/;"	v	file:
vrto3	atrem_corl1.h	/^    float v,taerr55,vrto3,sno2;$/;"	m	struct:__anon4
w	giop.c	/^    double  *w;$/;"	m	struct:fit_data_str	file:
w0	atmcor_soa.f	/^      REAL     w0,/;"	v
w1p14c	atrem_corl1.h	/^    float wndow1,wndow2,wp94c,wndow3,wndow4,w1p14c;$/;"	m	struct:__anon7
wang_modx	aerosol.c	/^static int   wang_modx = 0;$/;"	v	file:
wangaer	aerosol.c	/^int wangaer(int32_t sensorID, float wave[], int32_t nwave, int32_t iwnir_s, int32_t iwnir_l,$/;"	f
want_pixbox	lonlat2pixline.h	/^        int want_pixbox; \/**< use SWlon, SWlat as center and xbox, ybox as$/;"	m	struct:lonlat2pixline_struct
water	input_struc.h	/^  char   water  [FILENAME_MAX];  \/* Bathymetry mask file             *\/$/;"	m	struct:input_struct
water_vapor	water_vapor.c	/^float water_vapor (int iband, float uH2O, float airmass)$/;"	f
water_vapor_	water_vapor.c	/^void water_vapor_(int *iband, float *uH2O, float *airmass, float *t_h2o)$/;"	f
watervapor	input_struc.h	/^  float  watervapor;             \/* use fixed pr. water as specified *\/$/;"	m	struct:input_struct
watv	atmcor_soa.f	6668;"	c	subroutine:INBAND
watv	atmcor_soa.f	704;"	c	subroutine:SPEC1GEOFIT
wav	las_iop.c	/^  float *wav;$/;"	m	struct:las_table_struc	file:
wave	aerosol.c	/^    float  *wave;$/;"	m	struct:aermodtab_struct	file:
wave	aviris.h	/^    double *wave,*fwhm;$/;"	m	struct:aviris_struct
wave	giop.h	/^  float *wave   ; \/* fit wavelengths  [NBANDS]    *\/$/;"	m	struct:giop_ctl_str
wave	las_iop.c	/^static float *wave;          \/\/ sensor wavelengths to fit$/;"	v	file:
wave	olci.h	/^    double *wave,*fwhm;$/;"	m	struct:olci_struct
wave	prism.h	/^    double *wave,*fwhm;$/;"	m	struct:prism_struct
wave	setflags.c	/^static float *wave;$/;"	v	file:
wave_ix	l1_hico_h5.c	/^    int* wave_ix;     \/\/ array that maps the sensor bands into the hico file$/;"	m	struct:hico_private_struct	file:
wave_vc	virtual_constellation.c	/^static int wave_vc[] = {412, 443, 490, 510, 531, 555, 670};$/;"	v	file:
wavelength	l1_generic_write.c	/^int32_t *wavelength;$/;"	v
wavelength	l1_hdf_generic_write.c	/^int32 *wavelength;$/;"	v
wavelength	l1_hmodis_hdf.c	/^    int16_t wavelength; \/*< (nm) *\/$/;"	m	struct:__anon33	file:
wavobs	atrem_corl1.h	/^    float wavobs[NBANDS],fwhm[NBANDS];$/;"	m	struct:__anon5
wd	l1_struc.h	/^    float  *wd;$/;"	m	struct:l1_struct
wd	l2_struc.h	/^    float  *wd; \/\/wind direction$/;"	m	struct:l2_struct
west	input_struc.h	/^  float   west;$/;"	m	struct:input_struct
west_lon	main_l1info.c	/^    float32 west_lon;$/;"	m	struct:__anon37	file:
western_lon	scene_meta.c	/^static float western_lon  = +180.0;$/;"	v	file:
western_lon	scene_meta.h	/^  float western_lon;$/;"	m	struct:scene_meta_str
westernmost	scene_meta.c	/^float32 westernmost( float32 lon1, float32 lon2 )$/;"	f
wgs_npix	aviris.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:aviris_struct
wgs_npix	prism.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:prism_struct
wgs_nscan	aviris.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:aviris_struct
wgs_nscan	prism.h	/^    int32_t npix,nscan,wgs_nscan,wgs_npix;$/;"	m	struct:prism_struct
wgt	amoeba.h	/^  double *wgt;$/;"	m	struct:__anon1
whitecap_spectral_shape	whitecaps.c	/^void whitecap_spectral_shape(int32_t nwave, float *wave, float *awc)$/;"	f
whitecaps	whitecaps.c	/^void whitecaps(int32_t sensorID, int32_t evalmask, int32_t nwave, $/;"	f
width	input_struc.h	/^  int32_t   width;$/;"	m	struct:input_struct
width	main_l1mapgen.c	/^static int width, height;$/;"	v	file:
wiggle_band	input_struc.h	/^  int32_t wiggle_band; \/*  band to be perturbed for analytical uncertainty calculation *\/$/;"	m	struct:input_struct
wiggle_by	input_struc.h	/^  float wiggle_by;\/* noise level designated band perturbation *\/$/;"	m	struct:input_struct
windangle	input_struc.h	/^  float  windangle;              \/* use fixed wind dir as specified  *\/$/;"	m	struct:input_struct
windex	windex.c	/^int windex(float wave, float twave[], int ntwave)$/;"	f
windex_	windex.c	/^int windex_(float *wave, float twave[], int *ntwave)$/;"	f
windspeed	input_struc.h	/^  float  windspeed;              \/* use fixed windspeed as specified *\/$/;"	m	struct:input_struct
wndow1	atrem_corl1.h	/^    float wndow1,wndow2,wp94c,wndow3,wndow4,w1p14c;$/;"	m	struct:__anon7
wndow2	atrem_corl1.h	/^    float wndow1,wndow2,wp94c,wndow3,wndow4,w1p14c;$/;"	m	struct:__anon7
wndow3	atrem_corl1.h	/^    float wndow1,wndow2,wp94c,wndow3,wndow4,w1p14c;$/;"	m	struct:__anon7
wndow4	atrem_corl1.h	/^    float wndow1,wndow2,wp94c,wndow3,wndow4,w1p14c;$/;"	m	struct:__anon7
wp94c	atrem_corl1.h	/^    float wndow1,wndow2,wp94c,wndow3,wndow4,w1p14c;$/;"	m	struct:__anon7
write_flag_pcnts	l2_generic.c	/^int write_flag_pcnts(idDS ds_id, FILE *fpmeta, int32_t *flag_cnt,int32_t nflags, const char *flag_lname[], int32_t numScans, int32_t numPixels)$/;"	f
write_product_XML_file	get_l2prod_index.c	/^void write_product_XML_file(char* filename) {$/;"	f
write_product_XML_file2	get_l2prod_index.c	/^void write_product_XML_file2(char* filename) {$/;"	f
write_qual_flag_pcnts	l2_generic.c	/^int write_qual_flag_pcnts(idDS ds_id, FILE *fpmeta, int32_t *flag_cnt,int32_t nflags, const char *flag_lname[])$/;"	f
writel1	l1_generic_write.c	/^int writel1(filehandle *l1file, int32_t recnum, l1str *l1rec) {$/;"	f
writel1_hdf	l1_hdf_generic_write.c	/^int writel1_hdf( filehandle *l1file, int32_t recnum, l1str *l1rec )$/;"	f
writel2	l2_generic.c	/^int writel2( filehandle *l2file, int32_t recnum, l2str *l2rec, int outfile_number)$/;"	f
ws	l1_struc.h	/^    float  *ws;$/;"	m	struct:l1_struct
ws	l2_struc.h	/^    float  *ws; \/\/wind speed$/;"	m	struct:l2_struct
wsmax	input_struc.h	/^  float  wsmax;                  \/* max windspeed for whitecap corr  *\/$/;"	m	struct:input_struct
wt1	atrem_corl1.h	/^    double wt1,wt2,wt3,wt4;$/;"	m	struct:param_table
wt1	atrem_corl1.h	/^    float wt1,wt2,wt3,wt4,ja;$/;"	m	struct:__anon14
wt2	atrem_corl1.h	/^    double wt1,wt2,wt3,wt4;$/;"	m	struct:param_table
wt2	atrem_corl1.h	/^    float wt1,wt2,wt3,wt4,ja;$/;"	m	struct:__anon14
wt3	atrem_corl1.h	/^    double wt1,wt2,wt3,wt4;$/;"	m	struct:param_table
wt3	atrem_corl1.h	/^    float wt1,wt2,wt3,wt4,ja;$/;"	m	struct:__anon14
wt4	atrem_corl1.h	/^    double wt1,wt2,wt3,wt4;$/;"	m	struct:param_table
wt4	atrem_corl1.h	/^    float wt1,wt2,wt3,wt4,ja;$/;"	m	struct:__anon14
wt_opt	giop.h	/^  int wt_opt;          \/* do we have input wts *\/$/;"	m	struct:giop_ctl_str
wts	giop.h	/^  float *wts    ; \/* input Rrs wts  [NBANDS]       *\/$/;"	m	struct:giop_ctl_str
wv	l1_struc.h	/^    float  *wv;$/;"	m	struct:l1_struct
wv	l2_struc.h	/^    float  *wv; \/\/water vapor$/;"	m	struct:l2_struct
wvRMeris	raman.c	/^static float wvRMeris[9] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.56413E-12, 3.72271E-06, 0.0107485};$/;"	v	file:
wvRModisa	raman.c	/^static float wvRModisa[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.58618E-12, 9.70075E-11, 1.78547E-06};$/;"	v	file:
wvRModist	raman.c	/^static float wvRModist[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.39507E-05, 0.0374861, 0.00129678, 0.000237234};$/;"	v	file:
wvROcts	raman.c	/^static float wvROcts[6] = {0.0, 0.0, 0.0, 0.0, 0.000383718, 0.00141321};$/;"	v	file:
wvRSeawifs	raman.c	/^static float wvRSeawifs[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 9.24665E-08};$/;"	v	file:
wvRViirs	raman.c	/^static float wvRViirs[5] = {0.0, 0.0, 0.0, 0.0, 1.97873E-07};$/;"	v	file:
wvRam	raman.c	/^static float *wvRam;   \/\/Water vapor absorption at Raman bands$/;"	v	file:
wvSMeris	raman.c	/^static float wvSMeris[9] = {0.0, 0.0, 0.0, 0.0, 3.56388E-05, 0.0, 0.00213056, 0.000423637, 0.122217};$/;"	v	file:
wvSModisa	raman.c	/^static float wvSModisa[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.39507E-05, 0.0374861, 0.00129678, 0.000237234};$/;"	v	file:
wvSModist	raman.c	/^static float wvSModist[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.39507E-05, 0.0374861, 0.00129678, 0.000237234};$/;"	v	file:
wvSOcts	raman.c	/^static float wvSOcts[6] = {0.0, 0.0, 0.0, 0.0, 0.00671638, 0.00546072};$/;"	v	file:
wvSSeawifs	raman.c	/^static float wvSSeawifs[6] = {0.0, 0.0, 0.0, 0.0, 1.39507E-05, 0.00122049};$/;"	v	file:
wvSViirs	raman.c	/^static float wvSViirs[5] = {0.0, 0.0, 0.0, 0.0, 0.000757856};$/;"	v	file:
wvSen	raman.c	/^static float *wvSen;    \/\/Water vapor absorption at sensor bands$/;"	v	file:
wvl_i	bioOptBandShift.c	/^    float *wvl_i,*wvl_o;$/;"	m	struct:_context	file:
wvl_i	convert_band.c	/^    float *wvl_i;$/;"	m	struct:_context	file:
wvl_o	bioOptBandShift.c	/^    float *wvl_i,*wvl_o;$/;"	m	struct:_context	file:
wvl_ref	bioOptBandShift.c	/^    float aw_ref,bbw_ref,wvl_ref;$/;"	m	struct:_context	file:
x	atmcor_soa.f	/^      REAL*8   x(/;"	v
x	miscstruct.h	/^    short x, y;$/;"	m	struct:_DDXPoint
x0	carder.c	/^static double x0, x1;                  \/* regr. coefs for x                  *\/$/;"	v	file:
x1	carder.c	/^static double x0, x1;                  \/* regr. coefs for x                  *\/$/;"	v	file:
x1	miscstruct.h	/^    short x1, y1, x2, y2;$/;"	m	struct:_Box
x2	miscstruct.h	/^    short x1, y1, x2, y2;$/;"	m	struct:_Box
xbox	input_struc.h	/^  int32_t  xbox;    \/* number of pixels to retrieve around a point *\/$/;"	m	struct:input_struct
xbox	lonlat2pixline.h	/^        int32_t xbox; \/**< min number of x pixels *\/$/;"	m	struct:lonlat2pixline_struct
xcal_band	xcal.c	/^int xcal_band(int wave)$/;"	f
xcal_nwave	input_struc.h	/^  int32_t xcal_nwave;    \/* number of wavelengths to which xcal applied *\/$/;"	m	struct:input_struct
xcal_opt	input_struc.h	/^  int32_t *xcal_opt; \/* xcal option per band              *\/$/;"	m	struct:input_struct
xcal_wave	input_struc.h	/^  float   *xcal_wave; \/* sensor wavelengths to which xcal applied *\/$/;"	m	struct:input_struct
xcal_wave	xcal.c	/^static int *xcal_wave;$/;"	v	file:
xcalbox	input_struc.h	/^  int32_t xcalbox;          \/* Pixel size of the central box in the L1 scene (e.g. 5 pixels around MOBY) to be extracted into xcalfile, default=0-whole L1 *\/$/;"	m	struct:input_struct
xcalboxcenter	input_struc.h	/^  int32_t xcalboxcenter[2]; \/* Centeral [ipix, iscan] of the box in the L1 scene, default =[0,0] - center of the L1 scene *\/$/;"	m	struct:input_struct
xcalfile	input_struc.h	/^  char      xcalfile[FILENAME_MAX];$/;"	m	struct:input_struct
xcalpervalid	input_struc.h	/^  int32_t xcalpervalid;     \/* Minimum percent of valid cross-calibration pixels within the box or the L1 scene *\/$/;"	m	struct:input_struct
xcalsubsmpl	input_struc.h	/^  int32_t xcalsubsmpl;      \/* Subsampling rate for the data to be used for the cross-calibration  *\/$/;"	m	struct:input_struct
xlon	l1a_osmi.c	/^static float32 xlon[LAC_PIXEL_NUM];$/;"	v	file:
xlon	l1a_seawifs.c	/^float32 xlon[LAC_PIXEL_NUM];$/;"	v
xmi	atmcor_soa.f	/^      REAL*8   xmi,/;"	v
xmi_4	atmcor_soa.f	/^      REAL*8   xmi,ymr(1),C,acdm,bbp,xmi_4(/;"	v
xmlEncapsulateText	get_l2prod_index.c	/^char* xmlEncapsulateText(char* str) {$/;"	f
xmlMakeAlgorithm	get_l2prod_index.c	/^node_t* xmlMakeAlgorithm(node_t* productNode, l2prodstr* product) {$/;"	f
xmlMakeProduct	get_l2prod_index.c	/^node_t* xmlMakeProduct(node_t* rootNode, char* productName, l2prodstr* product) {$/;"	f
xppp	atrem_corl1.h	/^    float xpss,xppp;$/;"	m	struct:__anon10
xpss	atrem_corl1.h	/^    float xpss,xppp;$/;"	m	struct:__anon10
xsatid2name	l1_aci_hdf.c	/^const char* xsatid2name(int xsatid) {$/;"	f
y	amoeba.h	/^  double *y;$/;"	m	struct:__anon1
y	giop.c	/^    double  *y;$/;"	m	struct:fit_data_str	file:
y	gsm.c	/^  double * y;$/;"	m	struct:datastruct	file:
y	miscstruct.h	/^    short x, y;$/;"	m	struct:_DDXPoint
y1	miscstruct.h	/^    short x1, y1, x2, y2;$/;"	m	struct:_Box
y2	miscstruct.h	/^    short x1, y1, x2, y2;$/;"	m	struct:_Box
y2_vx	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
y2_vy	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
y2_vz	l1_czcs_hdf.c	/^float *ctl_pt_vx, *ctl_pt_vy, *ctl_pt_vz, *y2_vx, *y2_vy, *y2_vz, *ctl_pt_x;$/;"	v
y_0	carder.c	/^static double y_0, y_1;                \/* regr. coefs for y                  *\/$/;"	v	file:
y_1	carder.c	/^static double y_0, y_1;                \/* regr. coefs for y                  *\/$/;"	v	file:
ybox	input_struc.h	/^  int32_t  ybox;$/;"	m	struct:input_struct
ybox	lonlat2pixline.h	/^        int32_t ybox; \/**< min number of y lines *\/$/;"	m	struct:lonlat2pixline_struct
year	aviris.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:aviris_struct
year	calfile_utils.h	/^    int32_t  year;$/;"	m	struct:cal_struct
year	l1_goci.c	/^static int year, month, day, hour, minute, second, doy, base_msec;$/;"	v	file:
year	l1_meris_CC.c	/^static int         year, day, msec;$/;"	v	file:
year	l1_meris_N1.c	/^static int         year, day, msec;$/;"	v	file:
year	l1_ocmdb_hdf.c	/^static int32_t year, day, msec;$/;"	v	file:
year	l1_octs_hdf.c	/^static int16 year, day, nline, npix, sline, spix;$/;"	v	file:
year	l1_oli.c	/^    int32_t year, doy, msec;$/;"	m	struct:oli_struct	file:
year	l1_struc.h	/^    int32_t   *year;$/;"	m	struct:l1_struct
year	l2_struc.h	/^    int32_t   *year;$/;"	m	struct:l2_struct
year	mscal_struc.h	/^    int16  *year;$/;"	m	struct:mscal_struct
year	olci.h	/^    int32_t year,day,month, doy, msec;$/;"	m	struct:olci_struct
year	prism.h	/^    int32_t year,day,month, doy, msec,eyear,edoy,emsec;$/;"	m	struct:prism_struct
year	target_struc.h	/^    int32_t   *year;$/;"	m	struct:target_struct
year	viirs_utls.c	/^  int16_t *year;  \/* date of the leapsecond change *\/$/;"	m	struct:leap_str_def	file:
yeararr	l1_mos_hdf.c	/^static int32_t  yeararr [NS];$/;"	v	file:
yfit	amoeba.h	/^  double *yfit;$/;"	m	struct:__anon1
ylat	l1a_osmi.c	/^static float32 ylat[LAC_PIXEL_NUM];$/;"	v	file:
ylat	l1a_seawifs.c	/^float32 ylat[LAC_PIXEL_NUM];$/;"	v
ymax	mipoly.h	/^     int ymax;                 \/* ymax for the polygon     *\/$/;"	m	struct:__anon39
ymax	mipoly.h	/^     int ymax;             \/* ycoord at which we exit this edge. *\/$/;"	m	struct:_EdgeTableEntry
ymin	mipoly.h	/^     int ymin;                 \/* ymin for the polygon     *\/$/;"	m	struct:__anon39
ymr	atmcor_soa.f	/^      REAL*8   xmi,ymr(/;"	v
ysbpa_0	pml_iop_tables.c	/^float ysbpa_0, ysbpa_s, ysbpa_l;$/;"	v
ysbpa_l	pml_iop_tables.c	/^float ysbpa_0, ysbpa_s, ysbpa_l;$/;"	v
ysbpa_s	pml_iop_tables.c	/^float ysbpa_0, ysbpa_s, ysbpa_l;$/;"	v
zA	atmcor_soa.f	/^     &         zRho(NLAMBDA) , pdZrho(2,NLAMBDA),$/;"	v
zA0	atmcor_soa.f	/^     &         zB(NLAMBDA)   , pdZb(2,NLAMBDA),$/;"	v
zB	atmcor_soa.f	/^     &         zA(NLAMBDA)   , pdZa(2,NLAMBDA),$/;"	v
zB0	atmcor_soa.f	/^     &         zA0(NLAMBDA)  , pdZa0(2,NLAMBDA),$/;"	v
zC865	atmcor_soa.f	/^     &         zV(1)            , pdZv(2),$/;"	v
zRho	atmcor_soa.f	/^      REAL*8   xmi,ymr(1),C,acdm,bbp,xmi_4(1),$/;"	v
zTau	atmcor_soa.f	/^     &         zB0(NLAMBDA)  , pdZb0(2,NLAMBDA),$/;"	v
zTau865	atmcor_soa.f	/^     &         zTau(NLAMBDA) , $/;"	v
zV	atmcor_soa.f	/^     &         zW0(1)           , pdZw0(2),$/;"	v
zW0	atmcor_soa.f	/^     &         zTau865(1)       , pdZtau865(2),$/;"	v
zbad	get_zno3.c	/^static float zbad = BAD_FLT;$/;"	v	file:
zirrad	swim.c	/^static float *zirrad; \/\/zirrrad value for scan line zirrad[pix,band] - irradiance at depth array$/;"	v	file:
zw	l1_struc.h	/^    float  *zw;$/;"	m	struct:l1_struct
zw	l2_struc.h	/^    float  *zw; \/\/zonal wind vector$/;"	m	struct:l2_struct
zwRho	atmcor_soa.f	/^     &         zC865(NLAMBDA), pdZc865(2,NLAMBDA),$/;"	v
